
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	60 14 00 20 05 26 00 00 11 5c 00 00 d9 25 00 00     `.. .&...\...%..
  10:	d9 25 00 00 d9 25 00 00 d9 25 00 00 00 00 00 00     .%...%...%......
	...
  2c:	11 1f 00 00 d9 25 00 00 00 00 00 00 bd 1e 00 00     .....%..........
  3c:	d9 25 00 00                                         .%..

00000040 <_irq_vector_table>:
  40:	c1 1f 00 00 c1 1f 00 00 c1 1f 00 00 c1 1f 00 00     ................
  50:	c1 1f 00 00 c1 1f 00 00 c1 1f 00 00 c1 1f 00 00     ................
  60:	c1 1f 00 00 c1 1f 00 00 c1 1f 00 00 c1 1f 00 00     ................
  70:	c1 1f 00 00 c1 1f 00 00 c1 1f 00 00 c1 1f 00 00     ................
  80:	c1 1f 00 00 c1 1f 00 00 c1 1f 00 00 c1 1f 00 00     ................
  90:	c1 1f 00 00 c1 1f 00 00 c1 1f 00 00 c1 1f 00 00     ................
  a0:	c1 1f 00 00 c1 1f 00 00 c1 1f 00 00 c1 1f 00 00     ................
  b0:	c1 1f 00 00 c1 1f 00 00 c1 1f 00 00 c1 1f 00 00     ................
  c0:	c1 1f 00 00 c1 1f 00 00 c1 1f 00 00 c1 1f 00 00     ................
  d0:	c1 1f 00 00 c1 1f 00 00 c1 1f 00 00 c1 1f 00 00     ................
  e0:	c1 1f 00 00 c1 1f 00 00 c1 1f 00 00 c1 1f 00 00     ................
  f0:	c1 1f 00 00 c1 1f 00 00 c1 1f 00 00 c1 1f 00 00     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <CONFIG_FLASH_SIZE+0xd8>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x75>
     154:	b14f      	cbz	r7, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6d>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x71>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295
     1ba:	d203      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e2:	b902      	cbnz	r2, 1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <CONFIG_FLASH_SIZE+0x4a>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295
     20e:	d204      	bcs.n	21a <CONFIG_FLASH_SIZE+0x1a>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <CONFIG_FLASH_SIZE+0x1a>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <CONFIG_FLASH_SIZE+0xd4>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295
     23a:	d204      	bcs.n	246 <CONFIG_FLASH_SIZE+0x46>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <CONFIG_FLASH_SIZE+0x46>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <CONFIG_FLASH_SIZE+0xc8>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295
     286:	d204      	bcs.n	292 <CONFIG_FLASH_SIZE+0x92>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <CONFIG_FLASH_SIZE+0x92>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <CONFIG_FLASH_SIZE+0xcc>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295
     2b2:	d204      	bcs.n	2be <CONFIG_FLASH_SIZE+0xbe>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <CONFIG_FLASH_SIZE+0xbe>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7f>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <CONFIG_FLASH_SIZE+0x92>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <CONFIG_FLASH_SIZE+0xbe>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <CONFIG_FLASH_SIZE+0x1a>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <CONFIG_FLASH_SIZE+0x46>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <CONFIG_FLASH_SIZE+0xe8>
     2dc:	b10e      	cbz	r6, 2e2 <CONFIG_FLASH_SIZE+0xe2>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <CONFIG_FLASH_SIZE+0xf6>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd6>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xce>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295
     356:	d204      	bcs.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd2>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295
     382:	d204      	bcs.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     3a2:	d106      	bne.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd6>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
	...

000003dc <button_pressed>:
							      {0});
static struct gpio_callback button_cb_data;

void button_pressed(const struct device *dev, struct gpio_callback *cb,
		    uint32_t pins)
{
     3dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
     3de:	f005 fdd1 	bl	5f84 <sys_clock_cycle_get_32>
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_port_get(const struct device *port,
				gpio_port_value_t *value)
{
	const struct gpio_driver_data *const data =
     3e2:	4c12      	ldr	r4, [pc, #72]	; (42c <CONFIG_LOG_BUFFER_SIZE+0x2c>)
     3e4:	4601      	mov	r1, r0
	printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
     3e6:	4812      	ldr	r0, [pc, #72]	; (430 <CONFIG_LOG_BUFFER_SIZE+0x30>)
     3e8:	f005 f827 	bl	543a <printk>
     3ec:	6925      	ldr	r5, [r4, #16]
	return api->port_get_raw(port, value);
     3ee:	68a3      	ldr	r3, [r4, #8]
     3f0:	a901      	add	r1, sp, #4
     3f2:	685b      	ldr	r3, [r3, #4]
     3f4:	4620      	mov	r0, r4
     3f6:	4798      	blx	r3
			(const struct gpio_driver_data *)port->data;
	int ret;

	ret = gpio_port_get_raw(port, value);
	if (ret == 0) {
     3f8:	b920      	cbnz	r0, 404 <CONFIG_LOG_BUFFER_SIZE+0x4>
		*value ^= data->invert;
     3fa:	682b      	ldr	r3, [r5, #0]
     3fc:	9801      	ldr	r0, [sp, #4]
     3fe:	4058      	eors	r0, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
     400:	f3c0 20c0 	ubfx	r0, r0, #11, #1

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     404:	6923      	ldr	r3, [r4, #16]
     406:	681b      	ldr	r3, [r3, #0]
     408:	049b      	lsls	r3, r3, #18
     40a:	d503      	bpl.n	414 <CONFIG_LOG_BUFFER_SIZE+0x14>
	if (value != 0)	{
     40c:	b120      	cbz	r0, 418 <CONFIG_LOG_BUFFER_SIZE+0x18>
	return api->port_clear_bits_raw(port, pins);
     40e:	68a3      	ldr	r3, [r4, #8]
     410:	691b      	ldr	r3, [r3, #16]
     412:	e003      	b.n	41c <CONFIG_LOG_BUFFER_SIZE+0x1c>
	if (value != 0)	{
     414:	2800      	cmp	r0, #0
     416:	d0fa      	beq.n	40e <CONFIG_LOG_BUFFER_SIZE+0xe>
	return api->port_set_bits_raw(port, pins);
     418:	68a3      	ldr	r3, [r4, #8]
     41a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
     41c:	4803      	ldr	r0, [pc, #12]	; (42c <CONFIG_LOG_BUFFER_SIZE+0x2c>)
     41e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	int val = gpio_pin_get_dt(&button);
	gpio_pin_set_dt(&led, val);
}
     422:	b003      	add	sp, #12
     424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
     428:	4718      	bx	r3
     42a:	bf00      	nop
     42c:	0000656c 	.word	0x0000656c
     430:	0000699c 	.word	0x0000699c

00000434 <main>:

void main(void)
{
     434:	b570      	push	{r4, r5, r6, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     436:	4c25      	ldr	r4, [pc, #148]	; (4cc <main+0x98>)
     438:	4620      	mov	r0, r4
     43a:	f005 feeb 	bl	6214 <z_device_is_ready>
	int ret;

	if (!device_is_ready(button.port)) {
     43e:	b928      	cbnz	r0, 44c <main+0x18>
		printk("Error: button device %s is not ready\n",
     440:	6821      	ldr	r1, [r4, #0]
     442:	4823      	ldr	r0, [pc, #140]	; (4d0 <main+0x9c>)
	}

	while (1) {
		k_msleep(SLEEP_TIME_MS);
	}
}
     444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Error: button device %s is not ready\n",
     448:	f004 bff7 	b.w	543a <printk>
	ret = gpio_pin_configure_dt(&button, GPIO_INPUT);
     44c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     450:	4820      	ldr	r0, [pc, #128]	; (4d4 <main+0xa0>)
     452:	f004 ff73 	bl	533c <gpio_pin_configure_dt>
	if (ret != 0) {
     456:	4601      	mov	r1, r0
     458:	b130      	cbz	r0, 468 <main+0x34>
		printk("Error %d: failed to configure %s pin %d\n",
     45a:	6822      	ldr	r2, [r4, #0]
     45c:	481e      	ldr	r0, [pc, #120]	; (4d8 <main+0xa4>)
     45e:	230b      	movs	r3, #11
}
     460:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
     464:	f004 bfe9 	b.w	543a <printk>
	const struct gpio_driver_api *api =
     468:	68a5      	ldr	r5, [r4, #8]
	return api->pin_interrupt_configure(port, pin, mode, trig);
     46a:	210b      	movs	r1, #11
     46c:	69ae      	ldr	r6, [r5, #24]
     46e:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
     472:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
     476:	4620      	mov	r0, r4
     478:	47b0      	blx	r6
	if (ret != 0) {
     47a:	4601      	mov	r1, r0
     47c:	b118      	cbz	r0, 486 <main+0x52>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
     47e:	6822      	ldr	r2, [r4, #0]
     480:	4816      	ldr	r0, [pc, #88]	; (4dc <main+0xa8>)
     482:	230b      	movs	r3, #11
     484:	e7ec      	b.n	460 <main+0x2c>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     486:	4916      	ldr	r1, [pc, #88]	; (4e0 <main+0xac>)
     488:	4b16      	ldr	r3, [pc, #88]	; (4e4 <main+0xb0>)
     48a:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
     48c:	f44f 6300 	mov.w	r3, #2048	; 0x800
     490:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
     492:	69eb      	ldr	r3, [r5, #28]
     494:	b113      	cbz	r3, 49c <main+0x68>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     496:	2201      	movs	r2, #1
     498:	4620      	mov	r0, r4
     49a:	4798      	blx	r3
	printk("Set up button at %s pin %d\n", button.port->name, button.pin);
     49c:	6821      	ldr	r1, [r4, #0]
     49e:	4812      	ldr	r0, [pc, #72]	; (4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>)
     4a0:	220b      	movs	r2, #11
     4a2:	f004 ffca 	bl	543a <printk>
     4a6:	4809      	ldr	r0, [pc, #36]	; (4cc <main+0x98>)
     4a8:	f005 feb4 	bl	6214 <z_device_is_ready>
	if (!device_is_ready(led.port)) {
     4ac:	b160      	cbz	r0, 4c8 <main+0x94>
	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
     4ae:	480f      	ldr	r0, [pc, #60]	; (4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>)
     4b0:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     4b4:	f004 ff42 	bl	533c <gpio_pin_configure_dt>
	if (ret < 0) {
     4b8:	2800      	cmp	r0, #0
     4ba:	db05      	blt.n	4c8 <main+0x94>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     4bc:	2100      	movs	r1, #0
     4be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     4c2:	f004 fcd3 	bl	4e6c <z_impl_k_sleep>
     4c6:	e7f9      	b.n	4bc <main+0x88>
}
     4c8:	bd70      	pop	{r4, r5, r6, pc}
     4ca:	bf00      	nop
     4cc:	0000656c 	.word	0x0000656c
     4d0:	000069b2 	.word	0x000069b2
     4d4:	000067c8 	.word	0x000067c8
     4d8:	000069d8 	.word	0x000069d8
     4dc:	00006a01 	.word	0x00006a01
     4e0:	200006d0 	.word	0x200006d0
     4e4:	000003dd 	.word	0x000003dd
     4e8:	00006a37 	.word	0x00006a37
     4ec:	000067d0 	.word	0x000067d0

000004f0 <cbprintf_package_copy>:
			  void *packaged,
			  size_t len,
			  uint32_t flags,
			  uint16_t *strl,
			  size_t strl_len)
{
     4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4f4:	b08b      	sub	sp, #44	; 0x2c
     4f6:	4606      	mov	r6, r0
     4f8:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
     4fc:	9304      	str	r3, [sp, #16]
     4fe:	4614      	mov	r4, r2
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;

	in_len != 0 ? in_len : get_package_len(in_packaged);
     500:	460f      	mov	r7, r1
     502:	b1b1      	cbz	r1, 532 <cbprintf_package_copy+0x42>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = buf[2];
     504:	78b5      	ldrb	r5, [r6, #2]
     506:	9505      	str	r5, [sp, #20]
	ro_cpy = ros_nbr &&
     508:	bb35      	cbnz	r5, 558 <cbprintf_package_copy+0x68>
     50a:	46aa      	mov	sl, r5
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = buf[3];
     50c:	78f3      	ldrb	r3, [r6, #3]
     50e:	9301      	str	r3, [sp, #4]
	rw_cpy = rws_nbr > 0 &&
     510:	b113      	cbz	r3, 518 <cbprintf_package_copy+0x28>

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
     512:	f01b 0f02 	tst.w	fp, #2
     516:	d122      	bne.n	55e <cbprintf_package_copy+0x6e>
     518:	f1ba 0f00 	cmp.w	sl, #0
     51c:	d11f      	bne.n	55e <cbprintf_package_copy+0x6e>
		if (packaged) {
     51e:	b124      	cbz	r4, 52a <cbprintf_package_copy+0x3a>
			memcpy(packaged, in_packaged, in_len);
     520:	463a      	mov	r2, r7
     522:	4631      	mov	r1, r6
     524:	4620      	mov	r0, r4
     526:	f005 fb97 	bl	5c58 <memcpy>
			}

			str_pos++;
		}

		return out_len;
     52a:	4638      	mov	r0, r7
		rem -= cpy_len;
		dst += cpy_len;
	}

	return len - rem;
}
     52c:	b00b      	add	sp, #44	; 0x2c
     52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s_nbr     = buf[1];
     532:	f890 9001 	ldrb.w	r9, [r0, #1]
	buf += ros_nbr;
     536:	78b5      	ldrb	r5, [r6, #2]
     538:	7800      	ldrb	r0, [r0, #0]
     53a:	eb05 0580 	add.w	r5, r5, r0, lsl #2
     53e:	4435      	add	r5, r6
	for (int i = 0; i < s_nbr; i++) {
     540:	468a      	mov	sl, r1
     542:	45ca      	cmp	sl, r9
     544:	d2de      	bcs.n	504 <cbprintf_package_copy+0x14>
		buf++;
     546:	3501      	adds	r5, #1
		buf += strlen((const char *)buf) + 1;
     548:	4628      	mov	r0, r5
     54a:	f005 fb75 	bl	5c38 <strlen>
     54e:	3001      	adds	r0, #1
     550:	4405      	add	r5, r0
	for (int i = 0; i < s_nbr; i++) {
     552:	f10a 0a01 	add.w	sl, sl, #1
     556:	e7f4      	b.n	542 <cbprintf_package_copy+0x52>
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
     558:	f00b 0a01 	and.w	sl, fp, #1
     55c:	e7d6      	b.n	50c <cbprintf_package_copy+0x1c>
	args_size = buf[0] * sizeof(int);
     55e:	f896 9000 	ldrb.w	r9, [r6]
     562:	ea4f 0389 	mov.w	r3, r9, lsl #2
     566:	9303      	str	r3, [sp, #12]
	uint8_t *str_pos = &buf[args_size];
     568:	eb06 0989 	add.w	r9, r6, r9, lsl #2
	if (packaged == NULL) {
     56c:	2c00      	cmp	r4, #0
     56e:	d15b      	bne.n	628 <cbprintf_package_copy+0x138>
		if (ro_cpy) {
     570:	f1ba 0f00 	cmp.w	sl, #0
     574:	d032      	beq.n	5dc <cbprintf_package_copy+0xec>
     576:	444d      	add	r5, r9
			for (int i = 0; i < ros_nbr; i++) {
     578:	454d      	cmp	r5, r9
     57a:	d11d      	bne.n	5b8 <cbprintf_package_copy+0xc8>
     57c:	46a9      	mov	r9, r5
		bool drop_ro_str_pos = !(flags &
     57e:	f8dd a004 	ldr.w	sl, [sp, #4]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     582:	f8df c204 	ldr.w	ip, [pc, #516]	; 788 <cbprintf_package_copy+0x298>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     586:	4981      	ldr	r1, [pc, #516]	; (78c <cbprintf_package_copy+0x29c>)
		bool drop_ro_str_pos = !(flags &
     588:	f00b 0805 	and.w	r8, fp, #5
		for (int i = 0; i < rws_nbr; i++) {
     58c:	464d      	mov	r5, r9
     58e:	44ca      	add	sl, r9
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     590:	f00b 0202 	and.w	r2, fp, #2
		for (int i = 0; i < rws_nbr; i++) {
     594:	45aa      	cmp	sl, r5
     596:	d0c8      	beq.n	52a <cbprintf_package_copy+0x3a>
			const char *str = *(const char **)&buf32[*str_pos];
     598:	f815 0b01 	ldrb.w	r0, [r5], #1
     59c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
     5a0:	4560      	cmp	r0, ip
     5a2:	d324      	bcc.n	5ee <cbprintf_package_copy+0xfe>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     5a4:	4288      	cmp	r0, r1
     5a6:	d222      	bcs.n	5ee <cbprintf_package_copy+0xfe>
     5a8:	f01b 0f01 	tst.w	fp, #1
     5ac:	d139      	bne.n	622 <cbprintf_package_copy+0x132>
			if (is_ro && drop_ro_str_pos) {
     5ae:	f1b8 0f00 	cmp.w	r8, #0
     5b2:	d1ef      	bne.n	594 <cbprintf_package_copy+0xa4>
				out_len--;
     5b4:	3f01      	subs	r7, #1
		for (int i = 0; i < rws_nbr; i++) {
     5b6:	e7ed      	b.n	594 <cbprintf_package_copy+0xa4>
				const char *str = *(const char **)&buf32[*str_pos];
     5b8:	f819 3b01 	ldrb.w	r3, [r9], #1
		return 1 + strlen(str);
     5bc:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
     5c0:	f005 fb3a 	bl	5c38 <strlen>
				if (strl && strl_cnt < strl_len) {
     5c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
		return 1 + strlen(str);
     5c6:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     5c8:	b133      	cbz	r3, 5d8 <cbprintf_package_copy+0xe8>
     5ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
     5cc:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
     5ce:	bf3e      	ittt	cc
     5d0:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
     5d2:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
     5d6:	3401      	addcc	r4, #1
				out_len += len;
     5d8:	4407      	add	r7, r0
			for (int i = 0; i < ros_nbr; i++) {
     5da:	e7cd      	b.n	578 <cbprintf_package_copy+0x88>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     5dc:	b12d      	cbz	r5, 5ea <cbprintf_package_copy+0xfa>
     5de:	f01b 0404 	ands.w	r4, fp, #4
     5e2:	d0cc      	beq.n	57e <cbprintf_package_copy+0x8e>
				str_pos += ros_nbr;
     5e4:	44a9      	add	r9, r5
	size_t strl_cnt = 0;
     5e6:	4654      	mov	r4, sl
     5e8:	e7c9      	b.n	57e <cbprintf_package_copy+0x8e>
     5ea:	462c      	mov	r4, r5
     5ec:	e7c7      	b.n	57e <cbprintf_package_copy+0x8e>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     5ee:	2a00      	cmp	r2, #0
     5f0:	d0d0      	beq.n	594 <cbprintf_package_copy+0xa4>
     5f2:	f04f 0900 	mov.w	r9, #0
		return 1 + strlen(str);
     5f6:	9201      	str	r2, [sp, #4]
     5f8:	f005 fb1e 	bl	5c38 <strlen>
				if (strl && strl_cnt < strl_len) {
     5fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
     5fe:	f8df c188 	ldr.w	ip, [pc, #392]	; 788 <cbprintf_package_copy+0x298>
     602:	9a01      	ldr	r2, [sp, #4]
     604:	4961      	ldr	r1, [pc, #388]	; (78c <cbprintf_package_copy+0x29c>)
		return 1 + strlen(str);
     606:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     608:	b133      	cbz	r3, 618 <cbprintf_package_copy+0x128>
     60a:	9b16      	ldr	r3, [sp, #88]	; 0x58
     60c:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
     60e:	bf3e      	ittt	cc
     610:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
     612:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
     616:	3401      	addcc	r4, #1
				out_len += len;
     618:	4407      	add	r7, r0
			if (is_ro && drop_ro_str_pos) {
     61a:	f1b9 0f00 	cmp.w	r9, #0
     61e:	d0b9      	beq.n	594 <cbprintf_package_copy+0xa4>
     620:	e7c5      	b.n	5ae <cbprintf_package_copy+0xbe>
     622:	f04f 0901 	mov.w	r9, #1
     626:	e7e6      	b.n	5f6 <cbprintf_package_copy+0x106>
	memcpy(dst, in_packaged, args_size);
     628:	9a03      	ldr	r2, [sp, #12]
     62a:	4631      	mov	r1, r6
     62c:	4620      	mov	r0, r4
     62e:	f005 fb13 	bl	5c58 <memcpy>
	dst += args_size;
     632:	9b03      	ldr	r3, [sp, #12]
     634:	18e3      	adds	r3, r4, r3
     636:	9302      	str	r3, [sp, #8]
	if (ro_cpy) {
     638:	f1ba 0f00 	cmp.w	sl, #0
     63c:	d00a      	beq.n	654 <cbprintf_package_copy+0x164>
		memcpy(cpy_str_pos, str_pos, ros_nbr);
     63e:	4649      	mov	r1, r9
     640:	462a      	mov	r2, r5
     642:	a806      	add	r0, sp, #24
     644:	f005 fb08 	bl	5c58 <memcpy>
		dst_hdr[2] = 0;
     648:	2300      	movs	r3, #0
     64a:	70a3      	strb	r3, [r4, #2]
		str_pos += ros_nbr;
     64c:	44a9      	add	r9, r5
	dst += args_size;
     64e:	f8dd 8008 	ldr.w	r8, [sp, #8]
     652:	e00d      	b.n	670 <cbprintf_package_copy+0x180>
		if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     654:	b1bd      	cbz	r5, 686 <cbprintf_package_copy+0x196>
     656:	f01b 0f04 	tst.w	fp, #4
     65a:	d014      	beq.n	686 <cbprintf_package_copy+0x196>
			memcpy(dst, str_pos, ros_nbr);
     65c:	462a      	mov	r2, r5
     65e:	4649      	mov	r1, r9
     660:	9802      	ldr	r0, [sp, #8]
     662:	f005 faf9 	bl	5c58 <memcpy>
			dst += ros_nbr;
     666:	9b02      	ldr	r3, [sp, #8]
			str_pos += ros_nbr;
     668:	44a9      	add	r9, r5
			dst += ros_nbr;
     66a:	eb03 0805 	add.w	r8, r3, r5
		scpy_cnt = 0;
     66e:	4655      	mov	r5, sl
     670:	9b01      	ldr	r3, [sp, #4]
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     672:	f00b 0e02 	and.w	lr, fp, #2
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     676:	f00b 0001 	and.w	r0, fp, #1
     67a:	464a      	mov	r2, r9
     67c:	eb09 0c03 	add.w	ip, r9, r3
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     680:	f00b 0b04 	and.w	fp, fp, #4
     684:	e025      	b.n	6d2 <cbprintf_package_copy+0x1e2>
			dst_hdr[2] = 0;
     686:	2500      	movs	r5, #0
     688:	70a5      	strb	r5, [r4, #2]
     68a:	e7e0      	b.n	64e <cbprintf_package_copy+0x15e>
		const char *str = *(const char **)&buf32[*str_pos];
     68c:	f812 3b01 	ldrb.w	r3, [r2], #1
     690:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 788 <cbprintf_package_copy+0x298>
     694:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
     698:	4551      	cmp	r1, sl
     69a:	d303      	bcc.n	6a4 <cbprintf_package_copy+0x1b4>
     69c:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 78c <cbprintf_package_copy+0x29c>
     6a0:	4551      	cmp	r1, sl
     6a2:	d305      	bcc.n	6b0 <cbprintf_package_copy+0x1c0>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     6a4:	f1be 0f00 	cmp.w	lr, #0
     6a8:	d103      	bne.n	6b2 <cbprintf_package_copy+0x1c2>
				*dst++ = *str_pos;
     6aa:	f808 3b01 	strb.w	r3, [r8], #1
	for (int i = 0; i < rws_nbr; i++) {
     6ae:	e010      	b.n	6d2 <cbprintf_package_copy+0x1e2>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     6b0:	b138      	cbz	r0, 6c2 <cbprintf_package_copy+0x1d2>
				cpy_str_pos[scpy_cnt++] = *str_pos;
     6b2:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
     6b6:	1c69      	adds	r1, r5, #1
     6b8:	4455      	add	r5, sl
     6ba:	f805 3c10 	strb.w	r3, [r5, #-16]
     6be:	b2cd      	uxtb	r5, r1
     6c0:	e007      	b.n	6d2 <cbprintf_package_copy+0x1e2>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     6c2:	f1bb 0f00 	cmp.w	fp, #0
     6c6:	d004      	beq.n	6d2 <cbprintf_package_copy+0x1e2>
				*dst++ = *str_pos;
     6c8:	f808 3b01 	strb.w	r3, [r8], #1
				dst_hdr[2]++;
     6cc:	78a3      	ldrb	r3, [r4, #2]
     6ce:	3301      	adds	r3, #1
     6d0:	70a3      	strb	r3, [r4, #2]
	for (int i = 0; i < rws_nbr; i++) {
     6d2:	4594      	cmp	ip, r2
     6d4:	d1da      	bne.n	68c <cbprintf_package_copy+0x19c>
	dst_hdr[1] += scpy_cnt;
     6d6:	7863      	ldrb	r3, [r4, #1]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     6d8:	9a01      	ldr	r2, [sp, #4]
	dst_hdr[1] += scpy_cnt;
     6da:	442b      	add	r3, r5
     6dc:	7063      	strb	r3, [r4, #1]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
     6de:	9b02      	ldr	r3, [sp, #8]
     6e0:	eba8 0b03 	sub.w	fp, r8, r3
     6e4:	78a3      	ldrb	r3, [r4, #2]
     6e6:	ebab 0b03 	sub.w	fp, fp, r3
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     6ea:	9b05      	ldr	r3, [sp, #20]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
     6ec:	f884 b003 	strb.w	fp, [r4, #3]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     6f0:	4413      	add	r3, r2
     6f2:	1aff      	subs	r7, r7, r3
     6f4:	9b03      	ldr	r3, [sp, #12]
     6f6:	1aff      	subs	r7, r7, r3
	memcpy(dst, str_pos, strs_len);
     6f8:	9b01      	ldr	r3, [sp, #4]
     6fa:	4640      	mov	r0, r8
     6fc:	463a      	mov	r2, r7
     6fe:	eb09 0103 	add.w	r1, r9, r3
	dst += strs_len;
     702:	44b8      	add	r8, r7
	memcpy(dst, str_pos, strs_len);
     704:	f005 faa8 	bl	5c58 <memcpy>
		return dst - dst_hdr;
     708:	eba8 0004 	sub.w	r0, r8, r4
	if (scpy_cnt == 0) {
     70c:	2d00      	cmp	r5, #0
     70e:	f43f af0d 	beq.w	52c <cbprintf_package_copy+0x3c>
	size_t rem = len - ((size_t)(uintptr_t)(dst - dst_hdr));
     712:	9b04      	ldr	r3, [sp, #16]
     714:	1a1c      	subs	r4, r3, r0
	if (rem <= scpy_cnt) {
     716:	42a5      	cmp	r5, r4
     718:	d302      	bcc.n	720 <cbprintf_package_copy+0x230>
		return -ENOSPC;
     71a:	f06f 001b 	mvn.w	r0, #27
     71e:	e705      	b.n	52c <cbprintf_package_copy+0x3c>
	for (int i = 0; i < scpy_cnt; i++) {
     720:	f04f 0900 	mov.w	r9, #0
		uint8_t loc = cpy_str_pos[i];
     724:	ab06      	add	r3, sp, #24
		uint16_t str_len = strl ? strl[i] : 0;
     726:	9a15      	ldr	r2, [sp, #84]	; 0x54
		uint8_t loc = cpy_str_pos[i];
     728:	f813 3009 	ldrb.w	r3, [r3, r9]
		const char *str = *(const char **)&buf32[loc];
     72c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
     730:	b1c2      	cbz	r2, 764 <cbprintf_package_copy+0x274>
     732:	f832 7019 	ldrh.w	r7, [r2, r9, lsl #1]
		*dst = loc;
     736:	46c2      	mov	sl, r8
		rem--;
     738:	f104 3bff 	add.w	fp, r4, #4294967295
		*dst = loc;
     73c:	f80a 3b01 	strb.w	r3, [sl], #1
	if (strl) {
     740:	b197      	cbz	r7, 768 <cbprintf_package_copy+0x278>
		memcpy(dst, str, strl);
     742:	463a      	mov	r2, r7
     744:	4650      	mov	r0, sl
     746:	f005 fa87 	bl	5c58 <memcpy>
	for (int i = 0; i < scpy_cnt; i++) {
     74a:	f109 0901 	add.w	r9, r9, #1
     74e:	454d      	cmp	r5, r9
		rem -= cpy_len;
     750:	ebab 0407 	sub.w	r4, fp, r7
		dst += cpy_len;
     754:	eb0a 0807 	add.w	r8, sl, r7
	for (int i = 0; i < scpy_cnt; i++) {
     758:	dce4      	bgt.n	724 <cbprintf_package_copy+0x234>
	return len - rem;
     75a:	9b04      	ldr	r3, [sp, #16]
     75c:	441f      	add	r7, r3
     75e:	eba7 000b 	sub.w	r0, r7, fp
     762:	e6e3      	b.n	52c <cbprintf_package_copy+0x3c>
		uint16_t str_len = strl ? strl[i] : 0;
     764:	9f15      	ldr	r7, [sp, #84]	; 0x54
     766:	e7e6      	b.n	736 <cbprintf_package_copy+0x246>
     768:	3901      	subs	r1, #1
	if (strl) {
     76a:	2301      	movs	r3, #1
	for (size_t i = 0; i < num; i++) {
     76c:	429c      	cmp	r4, r3
     76e:	d0d4      	beq.n	71a <cbprintf_package_copy+0x22a>
		dst[i] = src[i];
     770:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     774:	f808 2003 	strb.w	r2, [r8, r3]
		if (src[i] == '\0') {
     778:	1c58      	adds	r0, r3, #1
     77a:	b912      	cbnz	r2, 782 <cbprintf_package_copy+0x292>
		if (cpy_len < 0) {
     77c:	1e1f      	subs	r7, r3, #0
     77e:	dae4      	bge.n	74a <cbprintf_package_copy+0x25a>
     780:	e7cb      	b.n	71a <cbprintf_package_copy+0x22a>
     782:	4603      	mov	r3, r0
     784:	e7f2      	b.n	76c <cbprintf_package_copy+0x27c>
     786:	bf00      	nop
     788:	000064fc 	.word	0x000064fc
     78c:	000070e8 	.word	0x000070e8

00000790 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     790:	680b      	ldr	r3, [r1, #0]
     792:	3301      	adds	r3, #1
     794:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     796:	4b01      	ldr	r3, [pc, #4]	; (79c <char_out+0xc>)
     798:	681b      	ldr	r3, [r3, #0]
     79a:	4718      	bx	r3
     79c:	20000000 	.word	0x20000000

000007a0 <__printk_hook_install>:
	_char_out = fn;
     7a0:	4b01      	ldr	r3, [pc, #4]	; (7a8 <__printk_hook_install+0x8>)
     7a2:	6018      	str	r0, [r3, #0]
}
     7a4:	4770      	bx	lr
     7a6:	bf00      	nop
     7a8:	20000000 	.word	0x20000000

000007ac <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     7ac:	b507      	push	{r0, r1, r2, lr}
     7ae:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
     7b0:	2100      	movs	r1, #0
{
     7b2:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
     7b4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
     7b6:	4803      	ldr	r0, [pc, #12]	; (7c4 <vprintk+0x18>)
     7b8:	a901      	add	r1, sp, #4
     7ba:	f000 f8f9 	bl	9b0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     7be:	b003      	add	sp, #12
     7c0:	f85d fb04 	ldr.w	pc, [sp], #4
     7c4:	00000791 	.word	0x00000791

000007c8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     7c8:	b530      	push	{r4, r5, lr}
     7ca:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     7cc:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     7d0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     7d2:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
     7d4:	a901      	add	r1, sp, #4
     7d6:	4805      	ldr	r0, [pc, #20]	; (7ec <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     7d8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
     7da:	f000 f8e9 	bl	9b0 <cbvprintf>

	if (ctx.count < ctx.max) {
     7de:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     7e2:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     7e4:	bfb8      	it	lt
     7e6:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     7e8:	b005      	add	sp, #20
     7ea:	bd30      	pop	{r4, r5, pc}
     7ec:	00005415 	.word	0x00005415

000007f0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     7f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     7f4:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     7f8:	f019 0808 	ands.w	r8, r9, #8
{
     7fc:	4604      	mov	r4, r0
     7fe:	4693      	mov	fp, r2
	if (processing) {
     800:	d00d      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
		if (evt == EVT_COMPLETE) {
     802:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     804:	bf0c      	ite	eq
     806:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     80a:	f049 0920 	orrne.w	r9, r9, #32
     80e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     812:	f38b 8811 	msr	BASEPRI, fp
     816:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     81a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     81e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     822:	2902      	cmp	r1, #2
     824:	d107      	bne.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
			evt = process_recheck(mgr);
     826:	4620      	mov	r0, r4
     828:	f004 fe21 	bl	546e <process_recheck>
		if (evt == EVT_NOP) {
     82c:	2800      	cmp	r0, #0
     82e:	d0f0      	beq.n	812 <CONFIG_ISR_STACK_SIZE+0x12>
		if (evt == EVT_COMPLETE) {
     830:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     832:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     834:	d14e      	bne.n	8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
			res = mgr->last_res;
     836:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     838:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     83a:	2f00      	cmp	r7, #0
     83c:	da15      	bge.n	86a <CONFIG_ISR_STACK_SIZE+0x6a>
		*clients = mgr->clients;
     83e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     840:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     844:	e9c4 8800 	strd	r8, r8, [r4]
     848:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     84c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     84e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     850:	8b21      	ldrh	r1, [r4, #24]
     852:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     856:	45ca      	cmp	sl, r9
     858:	d002      	beq.n	860 <CONFIG_ISR_STACK_SIZE+0x60>
		if (do_monitors
     85a:	68a3      	ldr	r3, [r4, #8]
     85c:	2b00      	cmp	r3, #0
     85e:	d15a      	bne.n	916 <CONFIG_ISR_STACK_SIZE+0x116>
		    || !sys_slist_is_empty(&clients)
     860:	b90d      	cbnz	r5, 866 <CONFIG_ISR_STACK_SIZE+0x66>
		    || (transit != NULL)) {
     862:	2e00      	cmp	r6, #0
     864:	d071      	beq.n	94a <CONFIG_ISR_STACK_SIZE+0x14a>
     866:	2300      	movs	r3, #0
     868:	e056      	b.n	918 <CONFIG_ISR_STACK_SIZE+0x118>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     86a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     86e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     870:	2a01      	cmp	r2, #1
     872:	d81e      	bhi.n	8b2 <CONFIG_ISR_STACK_SIZE+0xb2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     874:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     878:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     87a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     87c:	b289      	uxth	r1, r1
     87e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     882:	d10a      	bne.n	89a <CONFIG_ISR_STACK_SIZE+0x9a>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     884:	b13d      	cbz	r5, 896 <CONFIG_ISR_STACK_SIZE+0x96>
     886:	8b63      	ldrh	r3, [r4, #26]
     888:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     88a:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     88c:	3301      	adds	r3, #1
     88e:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     890:	2a00      	cmp	r2, #0
     892:	d1fa      	bne.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
     894:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     896:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     89a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     89c:	4620      	mov	r0, r4
     89e:	f004 fde6 	bl	546e <process_recheck>
     8a2:	4606      	mov	r6, r0
     8a4:	2800      	cmp	r0, #0
     8a6:	d0d3      	beq.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     8a8:	8b23      	ldrh	r3, [r4, #24]
     8aa:	f043 0320 	orr.w	r3, r3, #32
     8ae:	8323      	strh	r3, [r4, #24]
     8b0:	e7cd      	b.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     8b2:	2b04      	cmp	r3, #4
     8b4:	d10c      	bne.n	8d0 <CONFIG_ISR_STACK_SIZE+0xd0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     8b6:	f021 0107 	bic.w	r1, r1, #7
     8ba:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     8bc:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     8be:	4620      	mov	r0, r4
     8c0:	f004 fdd5 	bl	546e <process_recheck>
     8c4:	4605      	mov	r5, r0
     8c6:	2800      	cmp	r0, #0
     8c8:	d0c1      	beq.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     8ca:	f041 0120 	orr.w	r1, r1, #32
     8ce:	8321      	strh	r1, [r4, #24]
     8d0:	2500      	movs	r5, #0
     8d2:	e7bc      	b.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
		} else if (evt == EVT_START) {
     8d4:	2803      	cmp	r0, #3
     8d6:	d109      	bne.n	8ec <CONFIG_ISR_STACK_SIZE+0xec>
			transit = mgr->transitions->start;
     8d8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     8da:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     8de:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     8e0:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     8e4:	8323      	strh	r3, [r4, #24]
}
     8e6:	2500      	movs	r5, #0
		res = 0;
     8e8:	462f      	mov	r7, r5
     8ea:	e7b1      	b.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		} else if (evt == EVT_STOP) {
     8ec:	2804      	cmp	r0, #4
     8ee:	d106      	bne.n	8fe <CONFIG_ISR_STACK_SIZE+0xfe>
			transit = mgr->transitions->stop;
     8f0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     8f2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     8f6:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     8f8:	f043 0304 	orr.w	r3, r3, #4
     8fc:	e7f2      	b.n	8e4 <CONFIG_ISR_STACK_SIZE+0xe4>
		} else if (evt == EVT_RESET) {
     8fe:	2805      	cmp	r0, #5
     900:	d106      	bne.n	910 <CONFIG_ISR_STACK_SIZE+0x110>
			transit = mgr->transitions->reset;
     902:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     904:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     908:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     90a:	f043 0305 	orr.w	r3, r3, #5
     90e:	e7e9      	b.n	8e4 <CONFIG_ISR_STACK_SIZE+0xe4>
     910:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     912:	462e      	mov	r6, r5
     914:	e7e8      	b.n	8e8 <CONFIG_ISR_STACK_SIZE+0xe8>
				   && !sys_slist_is_empty(&mgr->monitors);
     916:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     918:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     91c:	8321      	strh	r1, [r4, #24]
     91e:	f38b 8811 	msr	BASEPRI, fp
     922:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     926:	b9fb      	cbnz	r3, 968 <CONFIG_ISR_STACK_SIZE+0x168>
	while (!sys_slist_is_empty(list)) {
     928:	bb85      	cbnz	r5, 98c <CONFIG_ISR_STACK_SIZE+0x18c>
			if (transit != NULL) {
     92a:	b116      	cbz	r6, 932 <CONFIG_ISR_STACK_SIZE+0x132>
				transit(mgr, transition_complete);
     92c:	491f      	ldr	r1, [pc, #124]	; (9ac <CONFIG_ISR_STACK_SIZE+0x1ac>)
     92e:	4620      	mov	r0, r4
     930:	47b0      	blx	r6
	__asm__ volatile(
     932:	f04f 0320 	mov.w	r3, #32
     936:	f3ef 8b11 	mrs	fp, BASEPRI
     93a:	f383 8812 	msr	BASEPRI_MAX, r3
     93e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     942:	8b23      	ldrh	r3, [r4, #24]
     944:	f023 0308 	bic.w	r3, r3, #8
     948:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     94a:	8b23      	ldrh	r3, [r4, #24]
     94c:	06da      	lsls	r2, r3, #27
     94e:	d525      	bpl.n	99c <CONFIG_ISR_STACK_SIZE+0x19c>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     950:	f023 0310 	bic.w	r3, r3, #16
     954:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     956:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     958:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     95c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     960:	2900      	cmp	r1, #0
     962:	f47f af5e 	bne.w	822 <CONFIG_ISR_STACK_SIZE+0x22>
out:
     966:	e754      	b.n	812 <CONFIG_ISR_STACK_SIZE+0x12>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     968:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     96a:	2900      	cmp	r1, #0
     96c:	d0dc      	beq.n	928 <CONFIG_ISR_STACK_SIZE+0x128>
	return node->next;
     96e:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     972:	f8d1 b004 	ldr.w	fp, [r1, #4]
     976:	463b      	mov	r3, r7
     978:	4652      	mov	r2, sl
     97a:	4620      	mov	r0, r4
     97c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     97e:	f1b9 0f00 	cmp.w	r9, #0
     982:	d0d1      	beq.n	928 <CONFIG_ISR_STACK_SIZE+0x128>
     984:	4649      	mov	r1, r9
     986:	f8d9 9000 	ldr.w	r9, [r9]
     98a:	e7f2      	b.n	972 <CONFIG_ISR_STACK_SIZE+0x172>
     98c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     98e:	463b      	mov	r3, r7
     990:	4652      	mov	r2, sl
     992:	4620      	mov	r0, r4
     994:	682d      	ldr	r5, [r5, #0]
     996:	f004 fd86 	bl	54a6 <notify_one>
     99a:	e7c5      	b.n	928 <CONFIG_ISR_STACK_SIZE+0x128>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     99c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     9a0:	bf1e      	ittt	ne
     9a2:	f023 0320 	bicne.w	r3, r3, #32
     9a6:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     9a8:	2102      	movne	r1, #2
     9aa:	e7d5      	b.n	958 <CONFIG_ISR_STACK_SIZE+0x158>
     9ac:	000054d3 	.word	0x000054d3

000009b0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9b4:	b091      	sub	sp, #68	; 0x44
     9b6:	468b      	mov	fp, r1
     9b8:	9002      	str	r0, [sp, #8]
     9ba:	4692      	mov	sl, r2
     9bc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     9be:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     9c0:	f89a 0000 	ldrb.w	r0, [sl]
     9c4:	b908      	cbnz	r0, 9ca <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     9c6:	4628      	mov	r0, r5
     9c8:	e35f      	b.n	108a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
		if (*fp != '%') {
     9ca:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     9cc:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     9d0:	d007      	beq.n	9e2 <cbvprintf+0x32>
			OUTC('%');
     9d2:	9b02      	ldr	r3, [sp, #8]
     9d4:	4659      	mov	r1, fp
     9d6:	4798      	blx	r3
     9d8:	2800      	cmp	r0, #0
     9da:	f2c0 8356 	blt.w	108a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
     9de:	3501      	adds	r5, #1
			break;
     9e0:	e212      	b.n	e08 <cbvprintf+0x458>
		} state = {
     9e2:	2218      	movs	r2, #24
     9e4:	2100      	movs	r1, #0
     9e6:	a80a      	add	r0, sp, #40	; 0x28
     9e8:	f005 f941 	bl	5c6e <memset>
	if (*sp == '%') {
     9ec:	f89a 3001 	ldrb.w	r3, [sl, #1]
     9f0:	2b25      	cmp	r3, #37	; 0x25
     9f2:	d078      	beq.n	ae6 <cbvprintf+0x136>
     9f4:	2200      	movs	r2, #0
     9f6:	4610      	mov	r0, r2
     9f8:	4696      	mov	lr, r2
     9fa:	4694      	mov	ip, r2
     9fc:	4616      	mov	r6, r2
     9fe:	4639      	mov	r1, r7
		switch (*sp) {
     a00:	f817 3b01 	ldrb.w	r3, [r7], #1
     a04:	2b2b      	cmp	r3, #43	; 0x2b
     a06:	f000 809d 	beq.w	b44 <cbvprintf+0x194>
     a0a:	f200 8094 	bhi.w	b36 <cbvprintf+0x186>
     a0e:	2b20      	cmp	r3, #32
     a10:	f000 809b 	beq.w	b4a <cbvprintf+0x19a>
     a14:	2b23      	cmp	r3, #35	; 0x23
     a16:	f000 809b 	beq.w	b50 <cbvprintf+0x1a0>
     a1a:	b12e      	cbz	r6, a28 <cbvprintf+0x78>
     a1c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     a20:	f046 0604 	orr.w	r6, r6, #4
     a24:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     a28:	f1bc 0f00 	cmp.w	ip, #0
     a2c:	d005      	beq.n	a3a <cbvprintf+0x8a>
     a2e:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     a32:	f046 0608 	orr.w	r6, r6, #8
     a36:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     a3a:	f1be 0f00 	cmp.w	lr, #0
     a3e:	d005      	beq.n	a4c <cbvprintf+0x9c>
     a40:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     a44:	f046 0610 	orr.w	r6, r6, #16
     a48:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     a4c:	b128      	cbz	r0, a5a <cbvprintf+0xaa>
     a4e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     a52:	f040 0020 	orr.w	r0, r0, #32
     a56:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     a5a:	b12a      	cbz	r2, a68 <cbvprintf+0xb8>
     a5c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     a64:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     a68:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     a6c:	f002 0044 	and.w	r0, r2, #68	; 0x44
     a70:	2844      	cmp	r0, #68	; 0x44
     a72:	d103      	bne.n	a7c <cbvprintf+0xcc>
		conv->flag_zero = false;
     a74:	f36f 1286 	bfc	r2, #6, #1
     a78:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     a7c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     a80:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     a82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     a86:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     a8a:	d17b      	bne.n	b84 <cbvprintf+0x1d4>
		conv->width_star = true;
     a8c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     a90:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     a94:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     a96:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     a9a:	781a      	ldrb	r2, [r3, #0]
     a9c:	2a2e      	cmp	r2, #46	; 0x2e
     a9e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     aa2:	bf0c      	ite	eq
     aa4:	2101      	moveq	r1, #1
     aa6:	2100      	movne	r1, #0
     aa8:	f361 0241 	bfi	r2, r1, #1, #1
     aac:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     ab0:	d174      	bne.n	b9c <cbvprintf+0x1ec>
	if (*sp == '*') {
     ab2:	785a      	ldrb	r2, [r3, #1]
     ab4:	2a2a      	cmp	r2, #42	; 0x2a
     ab6:	d06a      	beq.n	b8e <cbvprintf+0x1de>
	++sp;
     ab8:	3301      	adds	r3, #1
	size_t val = 0;
     aba:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     abc:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     abe:	4618      	mov	r0, r3
     ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
     ac4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     ac8:	2f09      	cmp	r7, #9
     aca:	f240 808e 	bls.w	bea <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     ace:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     ad2:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     ad4:	f3c2 0040 	ubfx	r0, r2, #1, #1
     ad8:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     adc:	f361 0241 	bfi	r2, r1, #1, #1
     ae0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     ae4:	e05a      	b.n	b9c <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     ae6:	f10a 0702 	add.w	r7, sl, #2
     aea:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     aee:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     af2:	07d9      	lsls	r1, r3, #31
     af4:	f140 8149 	bpl.w	d8a <cbvprintf+0x3da>
			width = va_arg(ap, int);
     af8:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     afc:	f1b9 0f00 	cmp.w	r9, #0
     b00:	da07      	bge.n	b12 <cbvprintf+0x162>
				conv->flag_dash = true;
     b02:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b06:	f042 0204 	orr.w	r2, r2, #4
     b0a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     b0e:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     b12:	075a      	lsls	r2, r3, #29
     b14:	f140 8142 	bpl.w	d9c <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
     b18:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     b1c:	f1b8 0f00 	cmp.w	r8, #0
     b20:	f280 8141 	bge.w	da6 <cbvprintf+0x3f6>
				conv->prec_present = false;
     b24:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     b28:	f36f 0341 	bfc	r3, #1, #1
     b2c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     b30:	f04f 38ff 	mov.w	r8, #4294967295
     b34:	e137      	b.n	da6 <cbvprintf+0x3f6>
		switch (*sp) {
     b36:	2b2d      	cmp	r3, #45	; 0x2d
     b38:	d00c      	beq.n	b54 <cbvprintf+0x1a4>
     b3a:	2b30      	cmp	r3, #48	; 0x30
     b3c:	f47f af6d 	bne.w	a1a <cbvprintf+0x6a>
			conv->flag_zero = true;
     b40:	2201      	movs	r2, #1
	} while (loop);
     b42:	e75c      	b.n	9fe <cbvprintf+0x4e>
			conv->flag_plus = true;
     b44:	f04f 0c01 	mov.w	ip, #1
     b48:	e759      	b.n	9fe <cbvprintf+0x4e>
			conv->flag_space = true;
     b4a:	f04f 0e01 	mov.w	lr, #1
     b4e:	e756      	b.n	9fe <cbvprintf+0x4e>
			conv->flag_hash = true;
     b50:	2001      	movs	r0, #1
     b52:	e754      	b.n	9fe <cbvprintf+0x4e>
		switch (*sp) {
     b54:	2601      	movs	r6, #1
     b56:	e752      	b.n	9fe <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     b58:	fb0c 0202 	mla	r2, ip, r2, r0
     b5c:	3a30      	subs	r2, #48	; 0x30
     b5e:	4633      	mov	r3, r6
     b60:	461e      	mov	r6, r3
     b62:	f816 0b01 	ldrb.w	r0, [r6], #1
     b66:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     b6a:	2f09      	cmp	r7, #9
     b6c:	d9f4      	bls.n	b58 <cbvprintf+0x1a8>
	if (sp != wp) {
     b6e:	4299      	cmp	r1, r3
     b70:	d093      	beq.n	a9a <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     b72:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     b76:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     b78:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     b7a:	f362 0141 	bfi	r1, r2, #1, #1
     b7e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     b82:	e78a      	b.n	a9a <cbvprintf+0xea>
     b84:	460b      	mov	r3, r1
	size_t val = 0;
     b86:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     b88:	f04f 0c0a 	mov.w	ip, #10
     b8c:	e7e8      	b.n	b60 <cbvprintf+0x1b0>
		conv->prec_star = true;
     b8e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     b92:	f042 0204 	orr.w	r2, r2, #4
     b96:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     b9a:	3302      	adds	r3, #2
	switch (*sp) {
     b9c:	461f      	mov	r7, r3
     b9e:	f817 2b01 	ldrb.w	r2, [r7], #1
     ba2:	2a6c      	cmp	r2, #108	; 0x6c
     ba4:	d041      	beq.n	c2a <cbvprintf+0x27a>
     ba6:	d825      	bhi.n	bf4 <cbvprintf+0x244>
     ba8:	2a68      	cmp	r2, #104	; 0x68
     baa:	d02b      	beq.n	c04 <cbvprintf+0x254>
     bac:	2a6a      	cmp	r2, #106	; 0x6a
     bae:	d046      	beq.n	c3e <cbvprintf+0x28e>
     bb0:	2a4c      	cmp	r2, #76	; 0x4c
     bb2:	d04c      	beq.n	c4e <cbvprintf+0x29e>
     bb4:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     bb6:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     bba:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
     bbe:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     bc2:	2a78      	cmp	r2, #120	; 0x78
     bc4:	f200 80d9 	bhi.w	d7a <cbvprintf+0x3ca>
     bc8:	2a57      	cmp	r2, #87	; 0x57
     bca:	d84d      	bhi.n	c68 <cbvprintf+0x2b8>
     bcc:	2a41      	cmp	r2, #65	; 0x41
     bce:	d003      	beq.n	bd8 <cbvprintf+0x228>
     bd0:	3a45      	subs	r2, #69	; 0x45
     bd2:	2a02      	cmp	r2, #2
     bd4:	f200 80d1 	bhi.w	d7a <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
     bd8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     bdc:	2204      	movs	r2, #4
     bde:	f362 0302 	bfi	r3, r2, #0, #3
     be2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     be6:	2301      	movs	r3, #1
			break;
     be8:	e09e      	b.n	d28 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
     bea:	fb06 2101 	mla	r1, r6, r1, r2
     bee:	3930      	subs	r1, #48	; 0x30
     bf0:	4603      	mov	r3, r0
     bf2:	e764      	b.n	abe <cbvprintf+0x10e>
	switch (*sp) {
     bf4:	2a74      	cmp	r2, #116	; 0x74
     bf6:	d026      	beq.n	c46 <cbvprintf+0x296>
     bf8:	2a7a      	cmp	r2, #122	; 0x7a
     bfa:	d1db      	bne.n	bb4 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     bfc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     c00:	2206      	movs	r2, #6
     c02:	e00d      	b.n	c20 <cbvprintf+0x270>
		if (*++sp == 'h') {
     c04:	785a      	ldrb	r2, [r3, #1]
     c06:	2a68      	cmp	r2, #104	; 0x68
     c08:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     c0c:	d106      	bne.n	c1c <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     c0e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     c10:	f361 02c6 	bfi	r2, r1, #3, #4
     c14:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     c18:	1c9f      	adds	r7, r3, #2
     c1a:	e7cc      	b.n	bb6 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     c1c:	4613      	mov	r3, r2
     c1e:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     c20:	f362 03c6 	bfi	r3, r2, #3, #4
     c24:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     c28:	e7c5      	b.n	bb6 <cbvprintf+0x206>
		if (*++sp == 'l') {
     c2a:	785a      	ldrb	r2, [r3, #1]
     c2c:	2a6c      	cmp	r2, #108	; 0x6c
     c2e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     c32:	d101      	bne.n	c38 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
     c34:	2104      	movs	r1, #4
     c36:	e7eb      	b.n	c10 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     c38:	4613      	mov	r3, r2
     c3a:	2203      	movs	r2, #3
     c3c:	e7f0      	b.n	c20 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     c3e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     c42:	2205      	movs	r2, #5
     c44:	e7ec      	b.n	c20 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     c46:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     c4a:	2207      	movs	r2, #7
     c4c:	e7e8      	b.n	c20 <cbvprintf+0x270>
		conv->unsupported = true;
     c4e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     c52:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     c56:	f023 0302 	bic.w	r3, r3, #2
     c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     c5e:	f043 0302 	orr.w	r3, r3, #2
     c62:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     c66:	e7a6      	b.n	bb6 <cbvprintf+0x206>
	switch (conv->specifier) {
     c68:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     c6c:	2920      	cmp	r1, #32
     c6e:	f200 8084 	bhi.w	d7a <cbvprintf+0x3ca>
     c72:	a001      	add	r0, pc, #4	; (adr r0, c78 <cbvprintf+0x2c8>)
     c74:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     c78:	00000d3d 	.word	0x00000d3d
     c7c:	00000d7b 	.word	0x00000d7b
     c80:	00000d7b 	.word	0x00000d7b
     c84:	00000d7b 	.word	0x00000d7b
     c88:	00000d7b 	.word	0x00000d7b
     c8c:	00000d7b 	.word	0x00000d7b
     c90:	00000d7b 	.word	0x00000d7b
     c94:	00000d7b 	.word	0x00000d7b
     c98:	00000d7b 	.word	0x00000d7b
     c9c:	00000bd9 	.word	0x00000bd9
     ca0:	00000d7b 	.word	0x00000d7b
     ca4:	00000d3d 	.word	0x00000d3d
     ca8:	00000cfd 	.word	0x00000cfd
     cac:	00000bd9 	.word	0x00000bd9
     cb0:	00000bd9 	.word	0x00000bd9
     cb4:	00000bd9 	.word	0x00000bd9
     cb8:	00000d7b 	.word	0x00000d7b
     cbc:	00000cfd 	.word	0x00000cfd
     cc0:	00000d7b 	.word	0x00000d7b
     cc4:	00000d7b 	.word	0x00000d7b
     cc8:	00000d7b 	.word	0x00000d7b
     ccc:	00000d7b 	.word	0x00000d7b
     cd0:	00000d45 	.word	0x00000d45
     cd4:	00000d3d 	.word	0x00000d3d
     cd8:	00000d61 	.word	0x00000d61
     cdc:	00000d7b 	.word	0x00000d7b
     ce0:	00000d7b 	.word	0x00000d7b
     ce4:	00000d61 	.word	0x00000d61
     ce8:	00000d7b 	.word	0x00000d7b
     cec:	00000d3d 	.word	0x00000d3d
     cf0:	00000d7b 	.word	0x00000d7b
     cf4:	00000d7b 	.word	0x00000d7b
     cf8:	00000d3d 	.word	0x00000d3d
		conv->specifier_cat = SPECIFIER_SINT;
     cfc:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     d00:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     d02:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     d06:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     d0a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     d0c:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     d10:	bf02      	ittt	eq
     d12:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     d16:	f041 0101 	orreq.w	r1, r1, #1
     d1a:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     d1e:	2a63      	cmp	r2, #99	; 0x63
     d20:	d131      	bne.n	d86 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
     d22:	3b00      	subs	r3, #0
     d24:	bf18      	it	ne
     d26:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     d28:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     d2c:	f3c2 0140 	ubfx	r1, r2, #1, #1
     d30:	430b      	orrs	r3, r1
     d32:	f363 0241 	bfi	r2, r3, #1, #1
     d36:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     d3a:	e6d8      	b.n	aee <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     d3c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     d40:	2002      	movs	r0, #2
     d42:	e7de      	b.n	d02 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
     d44:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     d48:	f003 0378 	and.w	r3, r3, #120	; 0x78
     d4c:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     d50:	2103      	movs	r1, #3
     d52:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     d56:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     d58:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     d5c:	4143      	adcs	r3, r0
     d5e:	e7e3      	b.n	d28 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
     d60:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     d64:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     d66:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     d6a:	f361 0202 	bfi	r2, r1, #0, #3
     d6e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     d72:	bf14      	ite	ne
     d74:	2301      	movne	r3, #1
     d76:	2300      	moveq	r3, #0
     d78:	e7d6      	b.n	d28 <cbvprintf+0x378>
		conv->invalid = true;
     d7a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     d7e:	f043 0301 	orr.w	r3, r3, #1
     d82:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     d86:	2300      	movs	r3, #0
     d88:	e7ce      	b.n	d28 <cbvprintf+0x378>
		} else if (conv->width_present) {
     d8a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     d8e:	2a00      	cmp	r2, #0
			width = conv->width_value;
     d90:	bfb4      	ite	lt
     d92:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     d96:	f04f 39ff 	movge.w	r9, #4294967295
     d9a:	e6ba      	b.n	b12 <cbvprintf+0x162>
		} else if (conv->prec_present) {
     d9c:	079b      	lsls	r3, r3, #30
     d9e:	f57f aec7 	bpl.w	b30 <cbvprintf+0x180>
			precision = conv->prec_value;
     da2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     da6:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     daa:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     dac:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     db0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     db4:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     db8:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     dba:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     dbe:	d138      	bne.n	e32 <cbvprintf+0x482>
			switch (length_mod) {
     dc0:	1ecb      	subs	r3, r1, #3
     dc2:	2b04      	cmp	r3, #4
     dc4:	d822      	bhi.n	e0c <cbvprintf+0x45c>
     dc6:	e8df f003 	tbb	[pc, r3]
     dca:	0903      	.short	0x0903
     dcc:	2109      	.short	0x2109
     dce:	21          	.byte	0x21
     dcf:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     dd0:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
     dd4:	17da      	asrs	r2, r3, #31
     dd6:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
     dda:	e006      	b.n	dea <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
     ddc:	3407      	adds	r4, #7
     dde:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     de2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     de6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     dea:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     dee:	f013 0603 	ands.w	r6, r3, #3
     df2:	d056      	beq.n	ea2 <cbvprintf+0x4f2>
			OUTS(sp, fp);
     df4:	9802      	ldr	r0, [sp, #8]
     df6:	463b      	mov	r3, r7
     df8:	4652      	mov	r2, sl
     dfa:	4659      	mov	r1, fp
     dfc:	f004 fc32 	bl	5664 <outs>
     e00:	2800      	cmp	r0, #0
     e02:	f2c0 8142 	blt.w	108a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
     e06:	4405      	add	r5, r0
			continue;
     e08:	46ba      	mov	sl, r7
     e0a:	e5d9      	b.n	9c0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     e0c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     e10:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     e12:	ea4f 72e3 	mov.w	r2, r3, asr #31
     e16:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     e1a:	d105      	bne.n	e28 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
     e1c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     e20:	930a      	str	r3, [sp, #40]	; 0x28
     e22:	2300      	movs	r3, #0
     e24:	930b      	str	r3, [sp, #44]	; 0x2c
     e26:	e7e0      	b.n	dea <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
     e28:	2902      	cmp	r1, #2
     e2a:	d1de      	bne.n	dea <cbvprintf+0x43a>
				value->sint = (short)value->sint;
     e2c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
     e30:	e7d0      	b.n	dd4 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
     e32:	2b02      	cmp	r3, #2
     e34:	d123      	bne.n	e7e <cbvprintf+0x4ce>
			switch (length_mod) {
     e36:	1ecb      	subs	r3, r1, #3
     e38:	2b04      	cmp	r3, #4
     e3a:	d813      	bhi.n	e64 <cbvprintf+0x4b4>
     e3c:	e8df f003 	tbb	[pc, r3]
     e40:	120a0a03 	.word	0x120a0a03
     e44:	12          	.byte	0x12
     e45:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     e46:	6822      	ldr	r2, [r4, #0]
     e48:	920a      	str	r2, [sp, #40]	; 0x28
     e4a:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
     e4c:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
     e4e:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     e50:	4604      	mov	r4, r0
     e52:	e7ca      	b.n	dea <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
     e54:	1de0      	adds	r0, r4, #7
     e56:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
     e5a:	e8f0 2302 	ldrd	r2, r3, [r0], #8
     e5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
     e62:	e7f5      	b.n	e50 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
     e64:	f854 3b04 	ldr.w	r3, [r4], #4
     e68:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     e6a:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
     e6c:	f04f 0300 	mov.w	r3, #0
     e70:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     e72:	d0d3      	beq.n	e1c <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
     e74:	2902      	cmp	r1, #2
     e76:	d1b8      	bne.n	dea <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
     e78:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     e7c:	e7d0      	b.n	e20 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
     e7e:	2b04      	cmp	r3, #4
     e80:	d109      	bne.n	e96 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
     e82:	1de3      	adds	r3, r4, #7
     e84:	f023 0307 	bic.w	r3, r3, #7
     e88:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
     e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
     e90:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     e94:	e7a9      	b.n	dea <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
     e96:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     e98:	bf04      	itt	eq
     e9a:	f854 3b04 	ldreq.w	r3, [r4], #4
     e9e:	930a      	streq	r3, [sp, #40]	; 0x28
     ea0:	e7a3      	b.n	dea <cbvprintf+0x43a>
		switch (conv->specifier) {
     ea2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     ea6:	2878      	cmp	r0, #120	; 0x78
     ea8:	d8ae      	bhi.n	e08 <cbvprintf+0x458>
     eaa:	2862      	cmp	r0, #98	; 0x62
     eac:	d822      	bhi.n	ef4 <cbvprintf+0x544>
     eae:	2825      	cmp	r0, #37	; 0x25
     eb0:	f43f ad8f 	beq.w	9d2 <cbvprintf+0x22>
     eb4:	2858      	cmp	r0, #88	; 0x58
     eb6:	d1a7      	bne.n	e08 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
     eb8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     ebc:	9300      	str	r3, [sp, #0]
     ebe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     ec2:	ab04      	add	r3, sp, #16
     ec4:	aa0c      	add	r2, sp, #48	; 0x30
     ec6:	f004 fb87 	bl	55d8 <encode_uint>
     eca:	4682      	mov	sl, r0
			if (precision >= 0) {
     ecc:	f1b8 0f00 	cmp.w	r8, #0
     ed0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     ed4:	db0c      	blt.n	ef0 <cbvprintf+0x540>
				conv->flag_zero = false;
     ed6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     eda:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     ede:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     ee2:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     ee4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     ee8:	d902      	bls.n	ef0 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
     eea:	eba8 0303 	sub.w	r3, r8, r3
     eee:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     ef0:	4680      	mov	r8, r0
     ef2:	e03d      	b.n	f70 <cbvprintf+0x5c0>
		switch (conv->specifier) {
     ef4:	3863      	subs	r0, #99	; 0x63
     ef6:	2815      	cmp	r0, #21
     ef8:	d886      	bhi.n	e08 <cbvprintf+0x458>
     efa:	a201      	add	r2, pc, #4	; (adr r2, f00 <cbvprintf+0x550>)
     efc:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     f00:	00000f81 	.word	0x00000f81
     f04:	00000fe5 	.word	0x00000fe5
     f08:	00000e09 	.word	0x00000e09
     f0c:	00000e09 	.word	0x00000e09
     f10:	00000e09 	.word	0x00000e09
     f14:	00000e09 	.word	0x00000e09
     f18:	00000fe5 	.word	0x00000fe5
     f1c:	00000e09 	.word	0x00000e09
     f20:	00000e09 	.word	0x00000e09
     f24:	00000e09 	.word	0x00000e09
     f28:	00000e09 	.word	0x00000e09
     f2c:	0000103f 	.word	0x0000103f
     f30:	0000100d 	.word	0x0000100d
     f34:	00001011 	.word	0x00001011
     f38:	00000e09 	.word	0x00000e09
     f3c:	00000e09 	.word	0x00000e09
     f40:	00000f59 	.word	0x00000f59
     f44:	00000e09 	.word	0x00000e09
     f48:	0000100d 	.word	0x0000100d
     f4c:	00000e09 	.word	0x00000e09
     f50:	00000e09 	.word	0x00000e09
     f54:	0000100d 	.word	0x0000100d
			if (precision >= 0) {
     f58:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     f5c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     f60:	db0a      	blt.n	f78 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
     f62:	4641      	mov	r1, r8
     f64:	4650      	mov	r0, sl
     f66:	f004 fe6e 	bl	5c46 <strnlen>
			bpe = bps + len;
     f6a:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
     f6e:	2600      	movs	r6, #0
		if (bps == NULL) {
     f70:	f1ba 0f00 	cmp.w	sl, #0
     f74:	d10c      	bne.n	f90 <cbvprintf+0x5e0>
     f76:	e747      	b.n	e08 <cbvprintf+0x458>
				len = strlen(bps);
     f78:	4650      	mov	r0, sl
     f7a:	f004 fe5d 	bl	5c38 <strlen>
     f7e:	e7f4      	b.n	f6a <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     f82:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
     f86:	2600      	movs	r6, #0
			bps = buf;
     f88:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
     f8c:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
     f90:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     f94:	b106      	cbz	r6, f98 <cbvprintf+0x5e8>
			nj_len += 1U;
     f96:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     f98:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     f9c:	06d0      	lsls	r0, r2, #27
     f9e:	d568      	bpl.n	1072 <CONFIG_FPROTECT_BLOCK_SIZE+0x72>
			nj_len += 2U;
     fa0:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     fa2:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     fa4:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     fa6:	bf48      	it	mi
     fa8:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     faa:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     fac:	bf48      	it	mi
     fae:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     fb0:	f1b9 0f00 	cmp.w	r9, #0
     fb4:	dd76      	ble.n	10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
			if (!conv->flag_dash) {
     fb6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     fba:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     fbe:	f3c2 0380 	ubfx	r3, r2, #2, #1
     fc2:	9303      	str	r3, [sp, #12]
     fc4:	0753      	lsls	r3, r2, #29
     fc6:	d46d      	bmi.n	10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
				if (conv->flag_zero) {
     fc8:	0650      	lsls	r0, r2, #25
     fca:	d561      	bpl.n	1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>
					if (sign != 0) {
     fcc:	b146      	cbz	r6, fe0 <cbvprintf+0x630>
						OUTC(sign);
     fce:	9b02      	ldr	r3, [sp, #8]
     fd0:	4659      	mov	r1, fp
     fd2:	4630      	mov	r0, r6
     fd4:	4798      	blx	r3
     fd6:	2800      	cmp	r0, #0
     fd8:	db57      	blt.n	108a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
						sign = 0;
     fda:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     fdc:	3501      	adds	r5, #1
						sign = 0;
     fde:	461e      	mov	r6, r3
					pad = '0';
     fe0:	2330      	movs	r3, #48	; 0x30
     fe2:	e056      	b.n	1092 <CONFIG_FPROTECT_BLOCK_SIZE+0x92>
			if (conv->flag_plus) {
     fe4:	071e      	lsls	r6, r3, #28
     fe6:	d40f      	bmi.n	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
				sign = ' ';
     fe8:	f013 0610 	ands.w	r6, r3, #16
     fec:	bf18      	it	ne
     fee:	2620      	movne	r6, #32
			sint = value->sint;
     ff0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
     ff4:	2b00      	cmp	r3, #0
     ff6:	f6bf af5f 	bge.w	eb8 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
     ffa:	4252      	negs	r2, r2
     ffc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1000:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    1004:	262d      	movs	r6, #45	; 0x2d
    1006:	e757      	b.n	eb8 <cbvprintf+0x508>
				sign = '+';
    1008:	262b      	movs	r6, #43	; 0x2b
    100a:	e7f1      	b.n	ff0 <cbvprintf+0x640>
		switch (conv->specifier) {
    100c:	2600      	movs	r6, #0
    100e:	e753      	b.n	eb8 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    1010:	980a      	ldr	r0, [sp, #40]	; 0x28
    1012:	b340      	cbz	r0, 1066 <CONFIG_FPROTECT_BLOCK_SIZE+0x66>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1014:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1018:	9300      	str	r3, [sp, #0]
    101a:	aa0c      	add	r2, sp, #48	; 0x30
    101c:	ab04      	add	r3, sp, #16
    101e:	2100      	movs	r1, #0
    1020:	f004 fada 	bl	55d8 <encode_uint>
				conv->altform_0c = true;
    1024:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    1028:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    102c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1030:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1034:	4682      	mov	sl, r0
				conv->altform_0c = true;
    1036:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    103a:	2600      	movs	r6, #0
				goto prec_int_pad0;
    103c:	e746      	b.n	ecc <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    103e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1040:	2907      	cmp	r1, #7
    1042:	f63f aee1 	bhi.w	e08 <cbvprintf+0x458>
    1046:	e8df f001 	tbb	[pc, r1]
    104a:	040c      	.short	0x040c
    104c:	08080c06 	.word	0x08080c06
    1050:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    1052:	701d      	strb	r5, [r3, #0]
		break;
    1054:	e6d8      	b.n	e08 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    1056:	801d      	strh	r5, [r3, #0]
		break;
    1058:	e6d6      	b.n	e08 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    105a:	17ea      	asrs	r2, r5, #31
    105c:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    1060:	e6d2      	b.n	e08 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1062:	601d      	str	r5, [r3, #0]
		break;
    1064:	e6d0      	b.n	e08 <cbvprintf+0x458>
			bps = "(nil)";
    1066:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1130 <CONFIG_FPROTECT_BLOCK_SIZE+0x130>
    106a:	4606      	mov	r6, r0
			bpe = bps + 5;
    106c:	f10a 0805 	add.w	r8, sl, #5
    1070:	e78e      	b.n	f90 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    1072:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1074:	bf48      	it	mi
    1076:	3301      	addmi	r3, #1
    1078:	e793      	b.n	fa2 <cbvprintf+0x5f2>
					OUTC(pad);
    107a:	4618      	mov	r0, r3
    107c:	9303      	str	r3, [sp, #12]
    107e:	4659      	mov	r1, fp
    1080:	9b02      	ldr	r3, [sp, #8]
    1082:	4798      	blx	r3
    1084:	2800      	cmp	r0, #0
    1086:	9b03      	ldr	r3, [sp, #12]
    1088:	da04      	bge.n	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
#undef OUTS
#undef OUTC
}
    108a:	b011      	add	sp, #68	; 0x44
    108c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1090:	2320      	movs	r3, #32
    1092:	444d      	add	r5, r9
    1094:	464a      	mov	r2, r9
				while (width-- > 0) {
    1096:	2a00      	cmp	r2, #0
    1098:	eba5 0109 	sub.w	r1, r5, r9
    109c:	f109 39ff 	add.w	r9, r9, #4294967295
    10a0:	dceb      	bgt.n	107a <CONFIG_FPROTECT_BLOCK_SIZE+0x7a>
    10a2:	460d      	mov	r5, r1
		if (sign != 0) {
    10a4:	b136      	cbz	r6, 10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>
			OUTC(sign);
    10a6:	9b02      	ldr	r3, [sp, #8]
    10a8:	4659      	mov	r1, fp
    10aa:	4630      	mov	r0, r6
    10ac:	4798      	blx	r3
    10ae:	2800      	cmp	r0, #0
    10b0:	dbeb      	blt.n	108a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
    10b2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    10b4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    10b8:	06d9      	lsls	r1, r3, #27
    10ba:	d401      	bmi.n	10c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>
    10bc:	071a      	lsls	r2, r3, #28
    10be:	d506      	bpl.n	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
				OUTC('0');
    10c0:	9b02      	ldr	r3, [sp, #8]
    10c2:	4659      	mov	r1, fp
    10c4:	2030      	movs	r0, #48	; 0x30
    10c6:	4798      	blx	r3
    10c8:	2800      	cmp	r0, #0
    10ca:	dbde      	blt.n	108a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
    10cc:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    10ce:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    10d2:	06db      	lsls	r3, r3, #27
    10d4:	d507      	bpl.n	10e6 <CONFIG_FPROTECT_BLOCK_SIZE+0xe6>
				OUTC(conv->specifier);
    10d6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    10da:	9b02      	ldr	r3, [sp, #8]
    10dc:	4659      	mov	r1, fp
    10de:	4798      	blx	r3
    10e0:	2800      	cmp	r0, #0
    10e2:	dbd2      	blt.n	108a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
    10e4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    10e6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    10e8:	442e      	add	r6, r5
    10ea:	1b73      	subs	r3, r6, r5
    10ec:	2b00      	cmp	r3, #0
    10ee:	dc16      	bgt.n	111e <CONFIG_FPROTECT_BLOCK_SIZE+0x11e>
			OUTS(bps, bpe);
    10f0:	9802      	ldr	r0, [sp, #8]
    10f2:	4643      	mov	r3, r8
    10f4:	4652      	mov	r2, sl
    10f6:	4659      	mov	r1, fp
    10f8:	f004 fab4 	bl	5664 <outs>
    10fc:	2800      	cmp	r0, #0
    10fe:	dbc4      	blt.n	108a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
    1100:	4405      	add	r5, r0
		while (width > 0) {
    1102:	44a9      	add	r9, r5
    1104:	eba9 0305 	sub.w	r3, r9, r5
    1108:	2b00      	cmp	r3, #0
    110a:	f77f ae7d 	ble.w	e08 <cbvprintf+0x458>
			OUTC(' ');
    110e:	9b02      	ldr	r3, [sp, #8]
    1110:	4659      	mov	r1, fp
    1112:	2020      	movs	r0, #32
    1114:	4798      	blx	r3
    1116:	2800      	cmp	r0, #0
    1118:	dbb7      	blt.n	108a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
    111a:	3501      	adds	r5, #1
			--width;
    111c:	e7f2      	b.n	1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
				OUTC('0');
    111e:	9b02      	ldr	r3, [sp, #8]
    1120:	4659      	mov	r1, fp
    1122:	2030      	movs	r0, #48	; 0x30
    1124:	4798      	blx	r3
    1126:	2800      	cmp	r0, #0
    1128:	dbaf      	blt.n	108a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
    112a:	3501      	adds	r5, #1
    112c:	e7dd      	b.n	10ea <CONFIG_FPROTECT_BLOCK_SIZE+0xea>
    112e:	bf00      	nop
    1130:	00006a53 	.word	0x00006a53

00001134 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    1134:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    1136:	4910      	ldr	r1, [pc, #64]	; (1178 <enable_logger+0x44>)
    1138:	4810      	ldr	r0, [pc, #64]	; (117c <enable_logger+0x48>)
{
    113a:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    113c:	2200      	movs	r2, #0
    113e:	f005 f9ac 	bl	649a <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1142:	4d0f      	ldr	r5, [pc, #60]	; (1180 <enable_logger+0x4c>)
    1144:	490f      	ldr	r1, [pc, #60]	; (1184 <enable_logger+0x50>)
    1146:	2200      	movs	r2, #0
    1148:	2300      	movs	r3, #0
    114a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    114e:	2400      	movs	r4, #0
    1150:	230e      	movs	r3, #14
    1152:	e9cd 3403 	strd	r3, r4, [sp, #12]
    1156:	e9cd 4401 	strd	r4, r4, [sp, #4]
    115a:	4b0b      	ldr	r3, [pc, #44]	; (1188 <enable_logger+0x54>)
    115c:	9400      	str	r4, [sp, #0]
    115e:	f44f 7240 	mov.w	r2, #768	; 0x300
    1162:	4628      	mov	r0, r5
    1164:	f003 fa04 	bl	4570 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    1168:	4908      	ldr	r1, [pc, #32]	; (118c <enable_logger+0x58>)
    116a:	4628      	mov	r0, r5
    116c:	f005 f866 	bl	623c <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    1170:	4620      	mov	r0, r4
    1172:	b009      	add	sp, #36	; 0x24
    1174:	bd30      	pop	{r4, r5, pc}
    1176:	bf00      	nop
    1178:	00001191 	.word	0x00001191
    117c:	200004f0 	.word	0x200004f0
    1180:	20000528 	.word	0x20000528
    1184:	20000d40 	.word	0x20000d40
    1188:	000013b5 	.word	0x000013b5
    118c:	00006a59 	.word	0x00006a59

00001190 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1190:	4801      	ldr	r0, [pc, #4]	; (1198 <log_process_thread_timer_expiry_fn+0x8>)
    1192:	f003 bb4b 	b.w	482c <z_impl_k_sem_give>
    1196:	bf00      	nop
    1198:	200000e0 	.word	0x200000e0

0000119c <log_format_func_t_get>:
}
    119c:	4b01      	ldr	r3, [pc, #4]	; (11a4 <log_format_func_t_get+0x8>)
    119e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    11a2:	4770      	bx	lr
    11a4:	000067d8 	.word	0x000067d8

000011a8 <log_init>:
{
    11a8:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    11aa:	4b12      	ldr	r3, [pc, #72]	; (11f4 <log_init+0x4c>)
    11ac:	f3bf 8f5b 	dmb	ish
    11b0:	e853 5f00 	ldrex	r5, [r3]
    11b4:	1c6a      	adds	r2, r5, #1
    11b6:	e843 2100 	strex	r1, r2, [r3]
    11ba:	2900      	cmp	r1, #0
    11bc:	d1f8      	bne.n	11b0 <log_init+0x8>
    11be:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    11c2:	b92d      	cbnz	r5, 11d0 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    11c4:	4c0c      	ldr	r4, [pc, #48]	; (11f8 <log_init+0x50>)
    11c6:	4e0d      	ldr	r6, [pc, #52]	; (11fc <log_init+0x54>)
    11c8:	1b36      	subs	r6, r6, r4
    11ca:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    11cc:	42b5      	cmp	r5, r6
    11ce:	db00      	blt.n	11d2 <log_init+0x2a>
}
    11d0:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    11d2:	7b23      	ldrb	r3, [r4, #12]
    11d4:	b153      	cbz	r3, 11ec <log_init+0x44>
			if (backend->api->init != NULL) {
    11d6:	6823      	ldr	r3, [r4, #0]
    11d8:	699b      	ldr	r3, [r3, #24]
    11da:	b10b      	cbz	r3, 11e0 <log_init+0x38>
				backend->api->init(backend);
    11dc:	4620      	mov	r0, r4
    11de:	4798      	blx	r3
			log_backend_enable(backend,
    11e0:	6863      	ldr	r3, [r4, #4]
    11e2:	2204      	movs	r2, #4
    11e4:	6819      	ldr	r1, [r3, #0]
    11e6:	4620      	mov	r0, r4
    11e8:	f000 f992 	bl	1510 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    11ec:	3501      	adds	r5, #1
    11ee:	3410      	adds	r4, #16
    11f0:	e7ec      	b.n	11cc <log_init+0x24>
    11f2:	bf00      	nop
    11f4:	200006e4 	.word	0x200006e4
    11f8:	0000678c 	.word	0x0000678c
    11fc:	0000679c 	.word	0x0000679c

00001200 <z_log_notify_backend_enabled>:
{
    1200:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    1202:	4c04      	ldr	r4, [pc, #16]	; (1214 <z_log_notify_backend_enabled+0x14>)
    1204:	7823      	ldrb	r3, [r4, #0]
    1206:	b913      	cbnz	r3, 120e <z_log_notify_backend_enabled+0xe>
    1208:	4803      	ldr	r0, [pc, #12]	; (1218 <z_log_notify_backend_enabled+0x18>)
    120a:	f003 fb0f 	bl	482c <z_impl_k_sem_give>
	backend_attached = true;
    120e:	2301      	movs	r3, #1
    1210:	7023      	strb	r3, [r4, #0]
}
    1212:	bd10      	pop	{r4, pc}
    1214:	20000900 	.word	0x20000900
    1218:	200000e0 	.word	0x200000e0

0000121c <z_log_dropped>:
    121c:	4b0c      	ldr	r3, [pc, #48]	; (1250 <z_log_dropped+0x34>)
    121e:	f3bf 8f5b 	dmb	ish
    1222:	e853 2f00 	ldrex	r2, [r3]
    1226:	3201      	adds	r2, #1
    1228:	e843 2100 	strex	r1, r2, [r3]
    122c:	2900      	cmp	r1, #0
    122e:	d1f8      	bne.n	1222 <z_log_dropped+0x6>
    1230:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    1234:	b158      	cbz	r0, 124e <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1236:	f3bf 8f5b 	dmb	ish
    123a:	4b06      	ldr	r3, [pc, #24]	; (1254 <z_log_dropped+0x38>)
    123c:	e853 2f00 	ldrex	r2, [r3]
    1240:	3a01      	subs	r2, #1
    1242:	e843 2100 	strex	r1, r2, [r3]
    1246:	2900      	cmp	r1, #0
    1248:	d1f8      	bne.n	123c <z_log_dropped+0x20>
    124a:	f3bf 8f5b 	dmb	ish
}
    124e:	4770      	bx	lr
    1250:	200006e0 	.word	0x200006e0
    1254:	200006dc 	.word	0x200006dc

00001258 <z_log_dropped_read_and_clear>:
}
    1258:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    125a:	4b06      	ldr	r3, [pc, #24]	; (1274 <z_log_dropped_read_and_clear+0x1c>)
    125c:	f3bf 8f5b 	dmb	ish
    1260:	4602      	mov	r2, r0
    1262:	e853 0f00 	ldrex	r0, [r3]
    1266:	e843 2100 	strex	r1, r2, [r3]
    126a:	2900      	cmp	r1, #0
    126c:	d1f9      	bne.n	1262 <z_log_dropped_read_and_clear+0xa>
    126e:	f3bf 8f5b 	dmb	ish
    1272:	4770      	bx	lr
    1274:	200006e0 	.word	0x200006e0

00001278 <dropped_notify>:
{
    1278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    127a:	f7ff ffed 	bl	1258 <z_log_dropped_read_and_clear>
    127e:	4c0a      	ldr	r4, [pc, #40]	; (12a8 <dropped_notify+0x30>)
    1280:	4d0a      	ldr	r5, [pc, #40]	; (12ac <dropped_notify+0x34>)
    1282:	1b2d      	subs	r5, r5, r4
    1284:	4607      	mov	r7, r0
    1286:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1288:	2600      	movs	r6, #0
    128a:	42ae      	cmp	r6, r5
    128c:	db00      	blt.n	1290 <dropped_notify+0x18>
}
    128e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    1290:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1292:	795b      	ldrb	r3, [r3, #5]
    1294:	b12b      	cbz	r3, 12a2 <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    1296:	6823      	ldr	r3, [r4, #0]
    1298:	691b      	ldr	r3, [r3, #16]
    129a:	b113      	cbz	r3, 12a2 <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    129c:	4639      	mov	r1, r7
    129e:	4620      	mov	r0, r4
    12a0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    12a2:	3601      	adds	r6, #1
    12a4:	3410      	adds	r4, #16
    12a6:	e7f0      	b.n	128a <dropped_notify+0x12>
    12a8:	0000678c 	.word	0x0000678c
    12ac:	0000679c 	.word	0x0000679c

000012b0 <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    12b0:	4901      	ldr	r1, [pc, #4]	; (12b8 <z_log_msg2_init+0x8>)
    12b2:	4802      	ldr	r0, [pc, #8]	; (12bc <z_log_msg2_init+0xc>)
    12b4:	f004 baa1 	b.w	57fa <mpsc_pbuf_init>
    12b8:	000067e4 	.word	0x000067e4
    12bc:	200006e8 	.word	0x200006e8

000012c0 <log_core_init>:
	panic_mode = false;
    12c0:	4a08      	ldr	r2, [pc, #32]	; (12e4 <log_core_init+0x24>)
{
    12c2:	b508      	push	{r3, lr}
	panic_mode = false;
    12c4:	2300      	movs	r3, #0
    12c6:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    12c8:	4a07      	ldr	r2, [pc, #28]	; (12e8 <log_core_init+0x28>)
    12ca:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    12cc:	4b07      	ldr	r3, [pc, #28]	; (12ec <log_core_init+0x2c>)
    12ce:	4a08      	ldr	r2, [pc, #32]	; (12f0 <log_core_init+0x30>)
    12d0:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    12d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    12d6:	f000 fafb 	bl	18d0 <log_output_timestamp_freq_set>
}
    12da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg2_init();
    12de:	f7ff bfe7 	b.w	12b0 <z_log_msg2_init>
    12e2:	bf00      	nop
    12e4:	20000901 	.word	0x20000901
    12e8:	200006e0 	.word	0x200006e0
    12ec:	20000004 	.word	0x20000004
    12f0:	00005aa3 	.word	0x00005aa3

000012f4 <z_log_msg2_alloc>:
{
    12f4:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
    12f6:	2200      	movs	r2, #0
    12f8:	4801      	ldr	r0, [pc, #4]	; (1300 <z_log_msg2_alloc+0xc>)
    12fa:	2300      	movs	r3, #0
    12fc:	f004 ba9e 	b.w	583c <mpsc_pbuf_alloc>
    1300:	200006e8 	.word	0x200006e8

00001304 <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
    1304:	4801      	ldr	r0, [pc, #4]	; (130c <z_log_msg2_claim+0x8>)
    1306:	f004 bb2f 	b.w	5968 <mpsc_pbuf_claim>
    130a:	bf00      	nop
    130c:	200006e8 	.word	0x200006e8

00001310 <z_log_msg2_free>:
{
    1310:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    1312:	4801      	ldr	r0, [pc, #4]	; (1318 <z_log_msg2_free+0x8>)
    1314:	f004 bb74 	b.w	5a00 <mpsc_pbuf_free>
    1318:	200006e8 	.word	0x200006e8

0000131c <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    131c:	4801      	ldr	r0, [pc, #4]	; (1324 <z_log_msg2_pending+0x8>)
    131e:	f004 bba3 	b.w	5a68 <mpsc_pbuf_is_pending>
    1322:	bf00      	nop
    1324:	200006e8 	.word	0x200006e8

00001328 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    1328:	4b1d      	ldr	r3, [pc, #116]	; (13a0 <z_impl_log_process+0x78>)
    132a:	781b      	ldrb	r3, [r3, #0]
{
    132c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1330:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    1332:	b903      	cbnz	r3, 1336 <z_impl_log_process+0xe>
    1334:	b388      	cbz	r0, 139a <z_impl_log_process+0x72>
	msg = get_msg();
    1336:	f004 fbbb 	bl	5ab0 <get_msg>
	if (msg.msg) {
    133a:	4606      	mov	r6, r0
    133c:	b118      	cbz	r0, 1346 <z_impl_log_process+0x1e>
		if (!bypass) {
    133e:	b16d      	cbz	r5, 135c <z_impl_log_process+0x34>
		z_log_msg2_free(msg.msg2);
    1340:	4630      	mov	r0, r6
    1342:	f7ff ffe5 	bl	1310 <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
    1346:	b92d      	cbnz	r5, 1354 <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
    1348:	4b16      	ldr	r3, [pc, #88]	; (13a4 <z_impl_log_process+0x7c>)
	if (!bypass && z_log_dropped_pending()) {
    134a:	681b      	ldr	r3, [r3, #0]
    134c:	2b00      	cmp	r3, #0
    134e:	dd01      	ble.n	1354 <z_impl_log_process+0x2c>
		dropped_notify();
    1350:	f7ff ff92 	bl	1278 <dropped_notify>
}
    1354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_log_msg2_pending();
    1358:	f7ff bfe0 	b.w	131c <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    135c:	4b12      	ldr	r3, [pc, #72]	; (13a8 <z_impl_log_process+0x80>)
    135e:	f3bf 8f5b 	dmb	ish
    1362:	e853 2f00 	ldrex	r2, [r3]
    1366:	3a01      	subs	r2, #1
    1368:	e843 2100 	strex	r1, r2, [r3]
    136c:	2900      	cmp	r1, #0
    136e:	d1f8      	bne.n	1362 <z_impl_log_process+0x3a>
    1370:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
    1374:	4c0d      	ldr	r4, [pc, #52]	; (13ac <z_impl_log_process+0x84>)
    1376:	4f0e      	ldr	r7, [pc, #56]	; (13b0 <z_impl_log_process+0x88>)
    1378:	1b3f      	subs	r7, r7, r4
    137a:	113f      	asrs	r7, r7, #4
    137c:	46a8      	mov	r8, r5
		for (int i = 0; i < log_backend_count_get(); i++) {
    137e:	45b8      	cmp	r8, r7
    1380:	dade      	bge.n	1340 <z_impl_log_process+0x18>
	return backend->cb->active;
    1382:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    1384:	795b      	ldrb	r3, [r3, #5]
    1386:	b123      	cbz	r3, 1392 <z_impl_log_process+0x6a>
	backend->api->process(backend, msg);
    1388:	6823      	ldr	r3, [r4, #0]
    138a:	4631      	mov	r1, r6
    138c:	681b      	ldr	r3, [r3, #0]
    138e:	4620      	mov	r0, r4
    1390:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    1392:	f108 0801 	add.w	r8, r8, #1
    1396:	3410      	adds	r4, #16
    1398:	e7f1      	b.n	137e <z_impl_log_process+0x56>
}
    139a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    139e:	bf00      	nop
    13a0:	20000900 	.word	0x20000900
    13a4:	200006e0 	.word	0x200006e0
    13a8:	200006dc 	.word	0x200006dc
    13ac:	0000678c 	.word	0x0000678c
    13b0:	0000679c 	.word	0x0000679c

000013b4 <log_process_thread_func>:
{
    13b4:	b510      	push	{r4, lr}
	log_init();
    13b6:	f7ff fef7 	bl	11a8 <log_init>
	return z_impl_z_current_get();
    13ba:	f003 fd71 	bl	4ea0 <z_impl_z_current_get>
	proc_tid = process_tid;
    13be:	4b0c      	ldr	r3, [pc, #48]	; (13f0 <log_process_thread_func+0x3c>)
    13c0:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    13c2:	b130      	cbz	r0, 13d2 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    13c4:	4b0b      	ldr	r3, [pc, #44]	; (13f4 <log_process_thread_func+0x40>)
	    process_tid &&
    13c6:	681b      	ldr	r3, [r3, #0]
    13c8:	2b09      	cmp	r3, #9
    13ca:	dd02      	ble.n	13d2 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    13cc:	480a      	ldr	r0, [pc, #40]	; (13f8 <log_process_thread_func+0x44>)
    13ce:	f003 fa2d 	bl	482c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    13d2:	4c09      	ldr	r4, [pc, #36]	; (13f8 <log_process_thread_func+0x44>)
		union { uintptr_t x; bool val; } parm0 = { .val = bypass };
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    13d4:	2000      	movs	r0, #0
    13d6:	f7ff ffa7 	bl	1328 <z_impl_log_process>
		if (log_process(false) == false) {
    13da:	2800      	cmp	r0, #0
    13dc:	d1fa      	bne.n	13d4 <log_process_thread_func+0x20>
    13de:	f04f 32ff 	mov.w	r2, #4294967295
    13e2:	f04f 33ff 	mov.w	r3, #4294967295
    13e6:	4620      	mov	r0, r4
    13e8:	f003 fa40 	bl	486c <z_impl_k_sem_take>
    13ec:	e7f2      	b.n	13d4 <log_process_thread_func+0x20>
    13ee:	bf00      	nop
    13f0:	20000720 	.word	0x20000720
    13f4:	200006dc 	.word	0x200006dc
    13f8:	200000e0 	.word	0x200000e0

000013fc <z_log_msg_post_finalize>:
{
    13fc:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    13fe:	4b1d      	ldr	r3, [pc, #116]	; (1474 <z_log_msg_post_finalize+0x78>)
    1400:	f3bf 8f5b 	dmb	ish
    1404:	e853 2f00 	ldrex	r2, [r3]
    1408:	1c51      	adds	r1, r2, #1
    140a:	e843 1000 	strex	r0, r1, [r3]
    140e:	2800      	cmp	r0, #0
    1410:	d1f8      	bne.n	1404 <z_log_msg_post_finalize+0x8>
    1412:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    1416:	4b18      	ldr	r3, [pc, #96]	; (1478 <z_log_msg_post_finalize+0x7c>)
    1418:	781b      	ldrb	r3, [r3, #0]
    141a:	b183      	cbz	r3, 143e <z_log_msg_post_finalize+0x42>
    141c:	f04f 0320 	mov.w	r3, #32
    1420:	f3ef 8411 	mrs	r4, BASEPRI
    1424:	f383 8812 	msr	BASEPRI_MAX, r3
    1428:	f3bf 8f6f 	isb	sy
    142c:	2000      	movs	r0, #0
    142e:	f7ff ff7b 	bl	1328 <z_impl_log_process>
	__asm__ volatile(
    1432:	f384 8811 	msr	BASEPRI, r4
    1436:	f3bf 8f6f 	isb	sy
}
    143a:	b002      	add	sp, #8
    143c:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
    143e:	4b0f      	ldr	r3, [pc, #60]	; (147c <z_log_msg_post_finalize+0x80>)
    1440:	681b      	ldr	r3, [r3, #0]
    1442:	2b00      	cmp	r3, #0
    1444:	d0f9      	beq.n	143a <z_log_msg_post_finalize+0x3e>
    1446:	b952      	cbnz	r2, 145e <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
    1448:	2200      	movs	r2, #0
    144a:	2300      	movs	r3, #0
    144c:	e9cd 2300 	strd	r2, r3, [sp]
    1450:	480b      	ldr	r0, [pc, #44]	; (1480 <z_log_msg_post_finalize+0x84>)
    1452:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1456:	2300      	movs	r3, #0
    1458:	f003 ff12 	bl	5280 <z_impl_k_timer_start>
    145c:	e7ed      	b.n	143a <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    145e:	2a0a      	cmp	r2, #10
    1460:	d1eb      	bne.n	143a <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
    1462:	4807      	ldr	r0, [pc, #28]	; (1480 <z_log_msg_post_finalize+0x84>)
    1464:	f005 f825 	bl	64b2 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1468:	4806      	ldr	r0, [pc, #24]	; (1484 <z_log_msg_post_finalize+0x88>)
}
    146a:	b002      	add	sp, #8
    146c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1470:	f003 b9dc 	b.w	482c <z_impl_k_sem_give>
    1474:	200006dc 	.word	0x200006dc
    1478:	20000901 	.word	0x20000901
    147c:	20000720 	.word	0x20000720
    1480:	200004f0 	.word	0x200004f0
    1484:	200000e0 	.word	0x200000e0

00001488 <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
    1488:	4b06      	ldr	r3, [pc, #24]	; (14a4 <z_log_msg2_commit+0x1c>)
{
    148a:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    148c:	681b      	ldr	r3, [r3, #0]
{
    148e:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1490:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    1492:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    1494:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    1496:	4804      	ldr	r0, [pc, #16]	; (14a8 <z_log_msg2_commit+0x20>)
    1498:	f004 fa46 	bl	5928 <mpsc_pbuf_commit>
}
    149c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    14a0:	f7ff bfac 	b.w	13fc <z_log_msg_post_finalize>
    14a4:	20000004 	.word	0x20000004
    14a8:	200006e8 	.word	0x200006e8

000014ac <z_impl_log_panic>:
{
    14ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    14ae:	4f0e      	ldr	r7, [pc, #56]	; (14e8 <z_impl_log_panic+0x3c>)
    14b0:	783d      	ldrb	r5, [r7, #0]
    14b2:	b975      	cbnz	r5, 14d2 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    14b4:	4c0d      	ldr	r4, [pc, #52]	; (14ec <z_impl_log_panic+0x40>)
    14b6:	4e0e      	ldr	r6, [pc, #56]	; (14f0 <z_impl_log_panic+0x44>)
	log_init();
    14b8:	f7ff fe76 	bl	11a8 <log_init>
    14bc:	1b36      	subs	r6, r6, r4
    14be:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    14c0:	42b5      	cmp	r5, r6
    14c2:	db07      	blt.n	14d4 <z_impl_log_panic+0x28>
    14c4:	2000      	movs	r0, #0
    14c6:	f7ff ff2f 	bl	1328 <z_impl_log_process>
		while (log_process(false) == true) {
    14ca:	2800      	cmp	r0, #0
    14cc:	d1fa      	bne.n	14c4 <z_impl_log_panic+0x18>
	panic_mode = true;
    14ce:	2301      	movs	r3, #1
    14d0:	703b      	strb	r3, [r7, #0]
}
    14d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    14d4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    14d6:	795b      	ldrb	r3, [r3, #5]
    14d8:	b11b      	cbz	r3, 14e2 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    14da:	6823      	ldr	r3, [r4, #0]
    14dc:	4620      	mov	r0, r4
    14de:	695b      	ldr	r3, [r3, #20]
    14e0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    14e2:	3501      	adds	r5, #1
    14e4:	3410      	adds	r4, #16
    14e6:	e7eb      	b.n	14c0 <z_impl_log_panic+0x14>
    14e8:	20000901 	.word	0x20000901
    14ec:	0000678c 	.word	0x0000678c
    14f0:	0000679c 	.word	0x0000679c

000014f4 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    14f4:	4a04      	ldr	r2, [pc, #16]	; (1508 <log_source_name_get+0x14>)
    14f6:	4b05      	ldr	r3, [pc, #20]	; (150c <log_source_name_get+0x18>)
    14f8:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    14fa:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    14fe:	bf34      	ite	cc
    1500:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1504:	2000      	movcs	r0, #0
}
    1506:	4770      	bx	lr
    1508:	0000674c 	.word	0x0000674c
    150c:	0000678c 	.word	0x0000678c

00001510 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1510:	4a05      	ldr	r2, [pc, #20]	; (1528 <log_backend_enable+0x18>)
	backend->cb->id = id;
    1512:	6843      	ldr	r3, [r0, #4]
    1514:	1a80      	subs	r0, r0, r2
    1516:	1100      	asrs	r0, r0, #4
    1518:	3001      	adds	r0, #1
	backend->cb->active = true;
    151a:	2201      	movs	r2, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
	}

	log_backend_id_set(backend, id);
    151c:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
    151e:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1520:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    1522:	f7ff be6d 	b.w	1200 <z_log_notify_backend_enabled>
    1526:	bf00      	nop
    1528:	0000678c 	.word	0x0000678c

0000152c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    152c:	b40e      	push	{r1, r2, r3}
    152e:	b503      	push	{r0, r1, lr}
    1530:	ab03      	add	r3, sp, #12
    1532:	4601      	mov	r1, r0
    1534:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1538:	4804      	ldr	r0, [pc, #16]	; (154c <print_formatted+0x20>)
	va_start(args, fmt);
    153a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    153c:	f7ff fa38 	bl	9b0 <cbvprintf>
	va_end(args);

	return length;
}
    1540:	b002      	add	sp, #8
    1542:	f85d eb04 	ldr.w	lr, [sp], #4
    1546:	b003      	add	sp, #12
    1548:	4770      	bx	lr
    154a:	bf00      	nop
    154c:	00005af1 	.word	0x00005af1

00001550 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    1550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1554:	461d      	mov	r5, r3
    1556:	9b08      	ldr	r3, [sp, #32]
    1558:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    155a:	06da      	lsls	r2, r3, #27
{
    155c:	4604      	mov	r4, r0
    155e:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1560:	d405      	bmi.n	156e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1562:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    1564:	bf4c      	ite	mi
    1566:	492a      	ldrmi	r1, [pc, #168]	; (1610 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    1568:	492a      	ldrpl	r1, [pc, #168]	; (1614 <hexdump_line_print+0xc4>)
    156a:	f7ff ffdf 	bl	152c <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    156e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1618 <hexdump_line_print+0xc8>
{
    1572:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    1576:	45a8      	cmp	r8, r5
    1578:	db2a      	blt.n	15d0 <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    157a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 161c <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    157e:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1620 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    1582:	f8df a094 	ldr.w	sl, [pc, #148]	; 1618 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1586:	2500      	movs	r5, #0
		if (i < length) {
    1588:	42bd      	cmp	r5, r7
    158a:	d22f      	bcs.n	15ec <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    158c:	5d72      	ldrb	r2, [r6, r5]
    158e:	4649      	mov	r1, r9
    1590:	4620      	mov	r0, r4
    1592:	f7ff ffcb 	bl	152c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1596:	3501      	adds	r5, #1
    1598:	2d10      	cmp	r5, #16
    159a:	d120      	bne.n	15de <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    159c:	4921      	ldr	r1, [pc, #132]	; (1624 <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    159e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1618 <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    15a2:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1628 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    15a6:	4620      	mov	r0, r4
    15a8:	f7ff ffc0 	bl	152c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    15ac:	2500      	movs	r5, #0
		if (i < length) {
    15ae:	42af      	cmp	r7, r5
    15b0:	d928      	bls.n	1604 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    15b2:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    15b4:	f1a2 0320 	sub.w	r3, r2, #32
    15b8:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    15ba:	bf28      	it	cs
    15bc:	222e      	movcs	r2, #46	; 0x2e
    15be:	4649      	mov	r1, r9
    15c0:	4620      	mov	r0, r4
    15c2:	f7ff ffb3 	bl	152c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    15c6:	3501      	adds	r5, #1
    15c8:	2d10      	cmp	r5, #16
    15ca:	d114      	bne.n	15f6 <hexdump_line_print+0xa6>
		}
	}
}
    15cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    15d0:	4649      	mov	r1, r9
    15d2:	4620      	mov	r0, r4
    15d4:	f7ff ffaa 	bl	152c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    15d8:	f108 0801 	add.w	r8, r8, #1
    15dc:	e7cb      	b.n	1576 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    15de:	076a      	lsls	r2, r5, #29
    15e0:	d1d2      	bne.n	1588 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    15e2:	4651      	mov	r1, sl
    15e4:	4620      	mov	r0, r4
    15e6:	f7ff ffa1 	bl	152c <print_formatted>
    15ea:	e7cd      	b.n	1588 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    15ec:	4641      	mov	r1, r8
    15ee:	4620      	mov	r0, r4
    15f0:	f7ff ff9c 	bl	152c <print_formatted>
    15f4:	e7cf      	b.n	1596 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    15f6:	076b      	lsls	r3, r5, #29
    15f8:	d1d9      	bne.n	15ae <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    15fa:	4641      	mov	r1, r8
    15fc:	4620      	mov	r0, r4
    15fe:	f7ff ff95 	bl	152c <print_formatted>
    1602:	e7d4      	b.n	15ae <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    1604:	4641      	mov	r1, r8
    1606:	4620      	mov	r0, r4
    1608:	f7ff ff90 	bl	152c <print_formatted>
    160c:	e7db      	b.n	15c6 <hexdump_line_print+0x76>
    160e:	bf00      	nop
    1610:	00006a66 	.word	0x00006a66
    1614:	00006a65 	.word	0x00006a65
    1618:	00006a70 	.word	0x00006a70
    161c:	00006a6e 	.word	0x00006a6e
    1620:	00006a68 	.word	0x00006a68
    1624:	00006a72 	.word	0x00006a72
    1628:	00006a74 	.word	0x00006a74

0000162c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    162c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1630:	b087      	sub	sp, #28
    1632:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1634:	f001 0301 	and.w	r3, r1, #1
{
    1638:	9205      	str	r2, [sp, #20]
    163a:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    163e:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1642:	9304      	str	r3, [sp, #16]
{
    1644:	4607      	mov	r7, r0
    1646:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1648:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    164c:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    1650:	f004 fa32 	bl	5ab8 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    1654:	4602      	mov	r2, r0
    1656:	2800      	cmp	r0, #0
    1658:	d044      	beq.n	16e4 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    165a:	493a      	ldr	r1, [pc, #232]	; (1744 <prefix_print+0x118>)
    165c:	4638      	mov	r0, r7
    165e:	f7ff ff65 	bl	152c <print_formatted>
    1662:	4605      	mov	r5, r0
	}

	if (stamp) {
    1664:	f1bb 0f00 	cmp.w	fp, #0
    1668:	d008      	beq.n	167c <prefix_print+0x50>
	if (!format) {
    166a:	f018 0f44 	tst.w	r8, #68	; 0x44
    166e:	d13b      	bne.n	16e8 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    1670:	4935      	ldr	r1, [pc, #212]	; (1748 <prefix_print+0x11c>)
    1672:	4622      	mov	r2, r4
    1674:	4638      	mov	r0, r7
    1676:	f7ff ff59 	bl	152c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    167a:	4405      	add	r5, r0
	if (color) {
    167c:	9b04      	ldr	r3, [sp, #16]
    167e:	b153      	cbz	r3, 1696 <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    1680:	4b32      	ldr	r3, [pc, #200]	; (174c <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    1682:	4933      	ldr	r1, [pc, #204]	; (1750 <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    1684:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    1688:	4b32      	ldr	r3, [pc, #200]	; (1754 <prefix_print+0x128>)
    168a:	4638      	mov	r0, r7
    168c:	2a00      	cmp	r2, #0
    168e:	bf08      	it	eq
    1690:	461a      	moveq	r2, r3
    1692:	f7ff ff4b 	bl	152c <print_formatted>
	if (level_on) {
    1696:	b13e      	cbz	r6, 16a8 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    1698:	4b2f      	ldr	r3, [pc, #188]	; (1758 <prefix_print+0x12c>)
    169a:	4930      	ldr	r1, [pc, #192]	; (175c <prefix_print+0x130>)
    169c:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    16a0:	4638      	mov	r0, r7
    16a2:	f7ff ff43 	bl	152c <print_formatted>
    16a6:	4606      	mov	r6, r0
	if (source_id >= 0) {
    16a8:	f1ba 0f00 	cmp.w	sl, #0
    16ac:	db16      	blt.n	16dc <prefix_print+0xb0>
		total += print_formatted(output,
    16ae:	9b05      	ldr	r3, [sp, #20]
    16b0:	2b00      	cmp	r3, #0
    16b2:	d045      	beq.n	1740 <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    16b4:	2301      	movs	r3, #1
    16b6:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    16ba:	4b29      	ldr	r3, [pc, #164]	; (1760 <prefix_print+0x134>)
    16bc:	4c29      	ldr	r4, [pc, #164]	; (1764 <prefix_print+0x138>)
    16be:	f019 0f10 	tst.w	r9, #16
    16c2:	bf18      	it	ne
    16c4:	461c      	movne	r4, r3
    16c6:	4651      	mov	r1, sl
    16c8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    16cc:	f7ff ff12 	bl	14f4 <log_source_name_get>
    16d0:	4621      	mov	r1, r4
    16d2:	4602      	mov	r2, r0
    16d4:	4638      	mov	r0, r7
    16d6:	f7ff ff29 	bl	152c <print_formatted>
    16da:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    16dc:	1970      	adds	r0, r6, r5
    16de:	b007      	add	sp, #28
    16e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    16e4:	4605      	mov	r5, r0
    16e6:	e7bd      	b.n	1664 <prefix_print+0x38>
	} else if (freq != 0U) {
    16e8:	4b1f      	ldr	r3, [pc, #124]	; (1768 <prefix_print+0x13c>)
    16ea:	6818      	ldr	r0, [r3, #0]
    16ec:	2800      	cmp	r0, #0
    16ee:	d0c4      	beq.n	167a <prefix_print+0x4e>
		timestamp /= timestamp_div;
    16f0:	4b1e      	ldr	r3, [pc, #120]	; (176c <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    16f2:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    16f6:	681b      	ldr	r3, [r3, #0]
    16f8:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    16fc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    1700:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    1704:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    1708:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    170c:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    1710:	fbb3 f2f1 	udiv	r2, r3, r1
    1714:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1718:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    171c:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1720:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    1724:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1728:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    172c:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    172e:	fbb4 f0f0 	udiv	r0, r4, r0
				length = print_formatted(output,
    1732:	490f      	ldr	r1, [pc, #60]	; (1770 <prefix_print+0x144>)
    1734:	e9cd e001 	strd	lr, r0, [sp, #4]
    1738:	4638      	mov	r0, r7
    173a:	f7ff fef7 	bl	152c <print_formatted>
    173e:	e79c      	b.n	167a <prefix_print+0x4e>
		total += print_formatted(output,
    1740:	4c08      	ldr	r4, [pc, #32]	; (1764 <prefix_print+0x138>)
    1742:	e7c0      	b.n	16c6 <prefix_print+0x9a>
    1744:	00006a85 	.word	0x00006a85
    1748:	00006a89 	.word	0x00006a89
    174c:	000067f8 	.word	0x000067f8
    1750:	00006aae 	.word	0x00006aae
    1754:	00006a77 	.word	0x00006a77
    1758:	0000680c 	.word	0x0000680c
    175c:	00006ab1 	.word	0x00006ab1
    1760:	00006a81 	.word	0x00006a81
    1764:	00006a7c 	.word	0x00006a7c
    1768:	20000724 	.word	0x20000724
    176c:	20000728 	.word	0x20000728
    1770:	00006a92 	.word	0x00006a92

00001774 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    1774:	b538      	push	{r3, r4, r5, lr}
    1776:	460c      	mov	r4, r1
	if (color) {
    1778:	07e1      	lsls	r1, r4, #31
{
    177a:	4605      	mov	r5, r0
	if (color) {
    177c:	d503      	bpl.n	1786 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    177e:	4a08      	ldr	r2, [pc, #32]	; (17a0 <postfix_print+0x2c>)
    1780:	4908      	ldr	r1, [pc, #32]	; (17a4 <postfix_print+0x30>)
    1782:	f7ff fed3 	bl	152c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1786:	06e2      	lsls	r2, r4, #27
    1788:	d408      	bmi.n	179c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    178a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    178c:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    178e:	bf4c      	ite	mi
    1790:	4905      	ldrmi	r1, [pc, #20]	; (17a8 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    1792:	4906      	ldrpl	r1, [pc, #24]	; (17ac <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    1794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    1798:	f7ff bec8 	b.w	152c <print_formatted>
}
    179c:	bd38      	pop	{r3, r4, r5, pc}
    179e:	bf00      	nop
    17a0:	00006a77 	.word	0x00006a77
    17a4:	00006aae 	.word	0x00006aae
    17a8:	00006a66 	.word	0x00006a66
    17ac:	00006a65 	.word	0x00006a65

000017b0 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    17b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    17b4:	880b      	ldrh	r3, [r1, #0]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    17b6:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    17ba:	4606      	mov	r6, r0
    17bc:	460c      	mov	r4, r1
    17be:	4690      	mov	r8, r2
    17c0:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    17c4:	d04d      	beq.n	1862 <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
    17c6:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    17c8:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    17ca:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    17ce:	2b00      	cmp	r3, #0
    17d0:	d044      	beq.n	185c <log_output_msg2_process+0xac>
    17d2:	4925      	ldr	r1, [pc, #148]	; (1868 <log_output_msg2_process+0xb8>)
    17d4:	1a5b      	subs	r3, r3, r1
    17d6:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    17da:	e9cd 2301 	strd	r2, r3, [sp, #4]
    17de:	f8cd 9000 	str.w	r9, [sp]
    17e2:	68a3      	ldr	r3, [r4, #8]
    17e4:	2200      	movs	r2, #0
    17e6:	4641      	mov	r1, r8
    17e8:	4630      	mov	r0, r6
    17ea:	f7ff ff1f 	bl	162c <prefix_print>
    17ee:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    17f0:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    17f2:	f855 3b10 	ldr.w	r3, [r5], #16
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    17f6:	f3c3 2349 	ubfx	r3, r3, #9, #10
    17fa:	b153      	cbz	r3, 1812 <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    17fc:	4f1b      	ldr	r7, [pc, #108]	; (186c <log_output_msg2_process+0xbc>)
    17fe:	481c      	ldr	r0, [pc, #112]	; (1870 <log_output_msg2_process+0xc0>)
    1800:	491c      	ldr	r1, [pc, #112]	; (1874 <log_output_msg2_process+0xc4>)
    1802:	462b      	mov	r3, r5
    1804:	4632      	mov	r2, r6
    1806:	f1b9 0f00 	cmp.w	r9, #0
    180a:	bf08      	it	eq
    180c:	4638      	moveq	r0, r7
    180e:	f003 fdb4 	bl	537a <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
    1812:	8867      	ldrh	r7, [r4, #2]
    1814:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    1818:	b197      	cbz	r7, 1840 <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
    181a:	6823      	ldr	r3, [r4, #0]
    181c:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1820:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1822:	2f10      	cmp	r7, #16
    1824:	463c      	mov	r4, r7
    1826:	bf28      	it	cs
    1828:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    182a:	4629      	mov	r1, r5
    182c:	f8cd 8000 	str.w	r8, [sp]
    1830:	4653      	mov	r3, sl
    1832:	4622      	mov	r2, r4
    1834:	4630      	mov	r0, r6
    1836:	f7ff fe8b 	bl	1550 <hexdump_line_print>
	} while (len);
    183a:	1b3f      	subs	r7, r7, r4
		data += length;
    183c:	4425      	add	r5, r4
	} while (len);
    183e:	d1f0      	bne.n	1822 <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    1840:	f1b9 0f00 	cmp.w	r9, #0
    1844:	d004      	beq.n	1850 <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
    1846:	464a      	mov	r2, r9
    1848:	4641      	mov	r1, r8
    184a:	4630      	mov	r0, r6
    184c:	f7ff ff92 	bl	1774 <postfix_print>
	}

	log_output_flush(output);
    1850:	4630      	mov	r0, r6
}
    1852:	b004      	add	sp, #16
    1854:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    1858:	f004 b93d 	b.w	5ad6 <log_output_flush>
		int16_t source_id = source ?
    185c:	f04f 33ff 	mov.w	r3, #4294967295
    1860:	e7bb      	b.n	17da <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    1862:	46ca      	mov	sl, r9
    1864:	e7c4      	b.n	17f0 <log_output_msg2_process+0x40>
    1866:	bf00      	nop
    1868:	0000674c 	.word	0x0000674c
    186c:	00005b27 	.word	0x00005b27
    1870:	00005af1 	.word	0x00005af1
    1874:	000009b1 	.word	0x000009b1

00001878 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    1878:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    187a:	f242 730f 	movw	r3, #9999	; 0x270f
    187e:	428b      	cmp	r3, r1
    1880:	bf28      	it	cs
    1882:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    1884:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1886:	4a0f      	ldr	r2, [pc, #60]	; (18c4 <log_output_dropped_process+0x4c>)
{
    1888:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    188a:	2105      	movs	r1, #5
    188c:	4668      	mov	r0, sp
    188e:	f003 fde1 	bl	5454 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1892:	6863      	ldr	r3, [r4, #4]
    1894:	490c      	ldr	r1, [pc, #48]	; (18c8 <log_output_dropped_process+0x50>)
    1896:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1898:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    189a:	220b      	movs	r2, #11
    189c:	4628      	mov	r0, r5
    189e:	f004 f90d 	bl	5abc <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    18a2:	6863      	ldr	r3, [r4, #4]
    18a4:	4632      	mov	r2, r6
    18a6:	4669      	mov	r1, sp
    18a8:	4628      	mov	r0, r5
    18aa:	685b      	ldr	r3, [r3, #4]
    18ac:	f004 f906 	bl	5abc <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    18b0:	6863      	ldr	r3, [r4, #4]
    18b2:	4906      	ldr	r1, [pc, #24]	; (18cc <log_output_dropped_process+0x54>)
    18b4:	685b      	ldr	r3, [r3, #4]
    18b6:	221b      	movs	r2, #27
    18b8:	4628      	mov	r0, r5
    18ba:	f004 f8ff 	bl	5abc <buffer_write>
		     output->control_block->ctx);
}
    18be:	b002      	add	sp, #8
    18c0:	bd70      	pop	{r4, r5, r6, pc}
    18c2:	bf00      	nop
    18c4:	00007022 	.word	0x00007022
    18c8:	00006af3 	.word	0x00006af3
    18cc:	00006ad7 	.word	0x00006ad7

000018d0 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    18d0:	4a08      	ldr	r2, [pc, #32]	; (18f4 <log_output_timestamp_freq_set+0x24>)
{
    18d2:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    18d4:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    18d6:	4c08      	ldr	r4, [pc, #32]	; (18f8 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    18d8:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    18da:	2100      	movs	r1, #0
    18dc:	42a0      	cmp	r0, r4
    18de:	d804      	bhi.n	18ea <log_output_timestamp_freq_set+0x1a>
    18e0:	b101      	cbz	r1, 18e4 <log_output_timestamp_freq_set+0x14>
    18e2:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    18e4:	4b05      	ldr	r3, [pc, #20]	; (18fc <log_output_timestamp_freq_set+0x2c>)
    18e6:	6018      	str	r0, [r3, #0]
}
    18e8:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    18ea:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    18ec:	005b      	lsls	r3, r3, #1
    18ee:	2101      	movs	r1, #1
    18f0:	e7f4      	b.n	18dc <log_output_timestamp_freq_set+0xc>
    18f2:	bf00      	nop
    18f4:	20000728 	.word	0x20000728
    18f8:	000f4240 	.word	0x000f4240
    18fc:	20000724 	.word	0x20000724

00001900 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    1900:	4b01      	ldr	r3, [pc, #4]	; (1908 <log_backend_rtt_init+0x8>)
    1902:	2201      	movs	r2, #1
    1904:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    1906:	4770      	bx	lr
    1908:	20000912 	.word	0x20000912

0000190c <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    190c:	4b01      	ldr	r3, [pc, #4]	; (1914 <format_set+0x8>)
	return 0;
}
    190e:	2000      	movs	r0, #0
	log_format_current = log_type;
    1910:	6019      	str	r1, [r3, #0]
}
    1912:	4770      	bx	lr
    1914:	20000734 	.word	0x20000734

00001918 <panic>:
	panic_mode = true;
    1918:	4b02      	ldr	r3, [pc, #8]	; (1924 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    191a:	4803      	ldr	r0, [pc, #12]	; (1928 <panic+0x10>)
    191c:	2201      	movs	r2, #1
    191e:	701a      	strb	r2, [r3, #0]
    1920:	f004 b8d9 	b.w	5ad6 <log_output_flush>
    1924:	20000913 	.word	0x20000913
    1928:	00006840 	.word	0x00006840

0000192c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    192c:	4801      	ldr	r0, [pc, #4]	; (1934 <dropped+0x8>)
    192e:	f7ff bfa3 	b.w	1878 <log_output_dropped_process>
    1932:	bf00      	nop
    1934:	00006840 	.word	0x00006840

00001938 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1938:	4b06      	ldr	r3, [pc, #24]	; (1954 <process+0x1c>)
{
    193a:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    193c:	6818      	ldr	r0, [r3, #0]
{
    193e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1940:	f7ff fc2c 	bl	119c <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    1944:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1946:	4603      	mov	r3, r0
}
    1948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    194c:	4802      	ldr	r0, [pc, #8]	; (1958 <process+0x20>)
    194e:	220f      	movs	r2, #15
    1950:	4718      	bx	r3
    1952:	bf00      	nop
    1954:	20000734 	.word	0x20000734
    1958:	00006840 	.word	0x00006840

0000195c <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    195c:	4b05      	ldr	r3, [pc, #20]	; (1974 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    195e:	781b      	ldrb	r3, [r3, #0]
    1960:	b11b      	cbz	r3, 196a <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    1962:	f241 3088 	movw	r0, #5000	; 0x1388
    1966:	f004 bd94 	b.w	6492 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    196a:	20a4      	movs	r0, #164	; 0xa4
    196c:	2100      	movs	r1, #0
    196e:	f003 ba7d 	b.w	4e6c <z_impl_k_sleep>
    1972:	bf00      	nop
    1974:	20000913 	.word	0x20000913

00001978 <data_out_block_mode>:
{
    1978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    197c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1a0c <data_out_block_mode+0x94>
	return z_impl_k_mutex_lock(mutex, timeout);
    1980:	f8df a08c 	ldr.w	sl, [pc, #140]	; 1a10 <data_out_block_mode+0x98>
{
    1984:	4680      	mov	r8, r0
    1986:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    1988:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    198a:	f899 5000 	ldrb.w	r5, [r9]
    198e:	b9cd      	cbnz	r5, 19c4 <data_out_block_mode+0x4c>
    1990:	f04f 33ff 	mov.w	r3, #4294967295
    1994:	f04f 32ff 	mov.w	r2, #4294967295
    1998:	4650      	mov	r0, sl
    199a:	f002 fe8d 	bl	46b8 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    199e:	463a      	mov	r2, r7
    19a0:	4641      	mov	r1, r8
    19a2:	4628      	mov	r0, r5
    19a4:	f002 fbd2 	bl	414c <SEGGER_RTT_WriteSkipNoLock>
    19a8:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    19aa:	4650      	mov	r0, sl
    19ac:	f002 fefc 	bl	47a8 <z_impl_k_mutex_unlock>
		if (ret) {
    19b0:	4d18      	ldr	r5, [pc, #96]	; (1a14 <data_out_block_mode+0x9c>)
    19b2:	b1fe      	cbz	r6, 19f4 <data_out_block_mode+0x7c>
	host_present = true;
    19b4:	2301      	movs	r3, #1
    19b6:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    19b8:	f899 3000 	ldrb.w	r3, [r9]
    19bc:	b96b      	cbnz	r3, 19da <data_out_block_mode+0x62>
}
    19be:	4638      	mov	r0, r7
    19c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    19c4:	463a      	mov	r2, r7
    19c6:	4641      	mov	r1, r8
    19c8:	2000      	movs	r0, #0
    19ca:	f002 fbbf 	bl	414c <SEGGER_RTT_WriteSkipNoLock>
    19ce:	4606      	mov	r6, r0
    19d0:	e7ee      	b.n	19b0 <data_out_block_mode+0x38>
	if (retry_cnt == 0) {
    19d2:	b95c      	cbnz	r4, 19ec <data_out_block_mode+0x74>
		host_present = false;
    19d4:	702c      	strb	r4, [r5, #0]
    19d6:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    19da:	2000      	movs	r0, #0
    19dc:	f002 fc02 	bl	41e4 <SEGGER_RTT_HasDataUp>
    19e0:	2800      	cmp	r0, #0
    19e2:	d0ec      	beq.n	19be <data_out_block_mode+0x46>
    19e4:	782b      	ldrb	r3, [r5, #0]
    19e6:	2b00      	cmp	r3, #0
    19e8:	d1f3      	bne.n	19d2 <data_out_block_mode+0x5a>
    19ea:	e7e8      	b.n	19be <data_out_block_mode+0x46>
			on_failed_write(retry_cnt--);
    19ec:	3c01      	subs	r4, #1
    19ee:	f7ff ffb5 	bl	195c <on_failed_write.part.0>
    19f2:	e7f2      	b.n	19da <data_out_block_mode+0x62>
		} else if (host_present) {
    19f4:	782b      	ldrb	r3, [r5, #0]
    19f6:	b113      	cbz	r3, 19fe <data_out_block_mode+0x86>
	if (retry_cnt == 0) {
    19f8:	3c01      	subs	r4, #1
    19fa:	d104      	bne.n	1a06 <data_out_block_mode+0x8e>
		host_present = false;
    19fc:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    19fe:	782b      	ldrb	r3, [r5, #0]
    1a00:	2b00      	cmp	r3, #0
    1a02:	d1c2      	bne.n	198a <data_out_block_mode+0x12>
    1a04:	e7db      	b.n	19be <data_out_block_mode+0x46>
    1a06:	f7ff ffa9 	bl	195c <on_failed_write.part.0>
    1a0a:	e7f8      	b.n	19fe <data_out_block_mode+0x86>
    1a0c:	20000913 	.word	0x20000913
    1a10:	200000cc 	.word	0x200000cc
    1a14:	20000912 	.word	0x20000912

00001a18 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1a1c:	4605      	mov	r5, r0
	__asm__ volatile(
    1a1e:	f04f 0320 	mov.w	r3, #32
    1a22:	f3ef 8611 	mrs	r6, BASEPRI
    1a26:	f383 8812 	msr	BASEPRI_MAX, r3
    1a2a:	f3bf 8f6f 	isb	sy
	return list->head;
    1a2e:	4b0e      	ldr	r3, [pc, #56]	; (1a68 <pm_state_notify+0x50>)
    1a30:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1a32:	b19c      	cbz	r4, 1a5c <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1a34:	4f0d      	ldr	r7, [pc, #52]	; (1a6c <pm_state_notify+0x54>)
    1a36:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1a70 <pm_state_notify+0x58>
    1a3a:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    1a3e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1a42:	2d00      	cmp	r5, #0
    1a44:	bf08      	it	eq
    1a46:	4613      	moveq	r3, r2
		if (callback) {
    1a48:	b12b      	cbz	r3, 1a56 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1a4a:	f898 2014 	ldrb.w	r2, [r8, #20]
    1a4e:	fb09 f202 	mul.w	r2, r9, r2
    1a52:	5cb8      	ldrb	r0, [r7, r2]
    1a54:	4798      	blx	r3
	return node->next;
    1a56:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1a58:	2c00      	cmp	r4, #0
    1a5a:	d1f0      	bne.n	1a3e <pm_state_notify+0x26>
	__asm__ volatile(
    1a5c:	f386 8811 	msr	BASEPRI, r6
    1a60:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1a68:	20000744 	.word	0x20000744
    1a6c:	2000074c 	.word	0x2000074c
    1a70:	200008c8 	.word	0x200008c8

00001a74 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1a74:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    1a76:	2301      	movs	r3, #1
    1a78:	f000 001f 	and.w	r0, r0, #31
    1a7c:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1a80:	4b07      	ldr	r3, [pc, #28]	; (1aa0 <atomic_clear_bit.constprop.0+0x2c>)
    1a82:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1a86:	43c0      	mvns	r0, r0
    1a88:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1a8c:	e853 2f00 	ldrex	r2, [r3]
    1a90:	4002      	ands	r2, r0
    1a92:	e843 2100 	strex	r1, r2, [r3]
    1a96:	2900      	cmp	r1, #0
    1a98:	d1f8      	bne.n	1a8c <atomic_clear_bit.constprop.0+0x18>
    1a9a:	f3bf 8f5b 	dmb	ish
}
    1a9e:	4770      	bx	lr
    1aa0:	20000758 	.word	0x20000758

00001aa4 <pm_system_resume>:

void pm_system_resume(void)
{
    1aa4:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    1aa6:	4b1a      	ldr	r3, [pc, #104]	; (1b10 <pm_system_resume+0x6c>)
    1aa8:	7d1c      	ldrb	r4, [r3, #20]
    1aaa:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1aae:	f004 031f 	and.w	r3, r4, #31
    1ab2:	2201      	movs	r2, #1
    1ab4:	409a      	lsls	r2, r3
    1ab6:	4b17      	ldr	r3, [pc, #92]	; (1b14 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1ab8:	0961      	lsrs	r1, r4, #5
    1aba:	43d0      	mvns	r0, r2
    1abc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1ac0:	e853 1f00 	ldrex	r1, [r3]
    1ac4:	ea01 0500 	and.w	r5, r1, r0
    1ac8:	e843 5c00 	strex	ip, r5, [r3]
    1acc:	f1bc 0f00 	cmp.w	ip, #0
    1ad0:	d1f6      	bne.n	1ac0 <pm_system_resume+0x1c>
    1ad2:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1ad6:	4211      	tst	r1, r2
    1ad8:	d013      	beq.n	1b02 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    1ada:	4b0f      	ldr	r3, [pc, #60]	; (1b18 <pm_system_resume+0x74>)
    1adc:	4d0f      	ldr	r5, [pc, #60]	; (1b1c <pm_system_resume+0x78>)
    1ade:	b18b      	cbz	r3, 1b04 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    1ae0:	230c      	movs	r3, #12
    1ae2:	4363      	muls	r3, r4
    1ae4:	18ea      	adds	r2, r5, r3
    1ae6:	5ce8      	ldrb	r0, [r5, r3]
    1ae8:	7851      	ldrb	r1, [r2, #1]
    1aea:	f004 f8d8 	bl	5c9e <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    1aee:	2000      	movs	r0, #0
    1af0:	f7ff ff92 	bl	1a18 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1af4:	230c      	movs	r3, #12
    1af6:	435c      	muls	r4, r3
    1af8:	192a      	adds	r2, r5, r4
    1afa:	2300      	movs	r3, #0
    1afc:	512b      	str	r3, [r5, r4]
    1afe:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    1b02:	bd38      	pop	{r3, r4, r5, pc}
    1b04:	f383 8811 	msr	BASEPRI, r3
    1b08:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1b0c:	e7ef      	b.n	1aee <pm_system_resume+0x4a>
    1b0e:	bf00      	nop
    1b10:	200008c8 	.word	0x200008c8
    1b14:	2000075c 	.word	0x2000075c
    1b18:	00005c9f 	.word	0x00005c9f
    1b1c:	2000074c 	.word	0x2000074c

00001b20 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1b24:	4b32      	ldr	r3, [pc, #200]	; (1bf0 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1b26:	4a33      	ldr	r2, [pc, #204]	; (1bf4 <pm_system_suspend+0xd4>)
    1b28:	7d1c      	ldrb	r4, [r3, #20]
    1b2a:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1b2e:	0963      	lsrs	r3, r4, #5
    1b30:	ea4f 0983 	mov.w	r9, r3, lsl #2
    1b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1b38:	4e2f      	ldr	r6, [pc, #188]	; (1bf8 <pm_system_suspend+0xd8>)
    1b3a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    1b3e:	f004 081f 	and.w	r8, r4, #31
    1b42:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1b46:	f013 0f01 	tst.w	r3, #1
{
    1b4a:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1b4c:	d10a      	bne.n	1b64 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    1b4e:	4601      	mov	r1, r0
    1b50:	4620      	mov	r0, r4
    1b52:	f000 f869 	bl	1c28 <pm_policy_next_state>
		if (info != NULL) {
    1b56:	b128      	cbz	r0, 1b64 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    1b58:	c807      	ldmia	r0, {r0, r1, r2}
    1b5a:	230c      	movs	r3, #12
    1b5c:	fb03 6304 	mla	r3, r3, r4, r6
    1b60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1b64:	230c      	movs	r3, #12
    1b66:	4363      	muls	r3, r4
    1b68:	18f2      	adds	r2, r6, r3
    1b6a:	5cf5      	ldrb	r5, [r6, r3]
    1b6c:	b92d      	cbnz	r5, 1b7a <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    1b6e:	4620      	mov	r0, r4
    1b70:	f7ff ff80 	bl	1a74 <atomic_clear_bit.constprop.0>
		ret = false;
    1b74:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    1b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    1b7a:	1c7b      	adds	r3, r7, #1
    1b7c:	d00f      	beq.n	1b9e <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1b7e:	f8d2 c008 	ldr.w	ip, [r2, #8]
    1b82:	481e      	ldr	r0, [pc, #120]	; (1bfc <pm_system_suspend+0xdc>)
    1b84:	4a1e      	ldr	r2, [pc, #120]	; (1c00 <pm_system_suspend+0xe0>)
    1b86:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    1b8a:	2100      	movs	r1, #0
    1b8c:	2300      	movs	r3, #0
    1b8e:	fbec 0105 	umlal	r0, r1, ip, r5
    1b92:	f7fe fab5 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    1b96:	2101      	movs	r1, #1
    1b98:	1a38      	subs	r0, r7, r0
    1b9a:	f004 fc5c 	bl	6456 <z_set_timeout_expiry>
	k_sched_lock();
    1b9e:	f002 fee5 	bl	496c <k_sched_lock>
	pm_state_notify(true);
    1ba2:	2001      	movs	r0, #1
    1ba4:	f7ff ff38 	bl	1a18 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1ba8:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1bac:	2301      	movs	r3, #1
    1bae:	fa03 f808 	lsl.w	r8, r3, r8
    1bb2:	4b14      	ldr	r3, [pc, #80]	; (1c04 <pm_system_suspend+0xe4>)
    1bb4:	4499      	add	r9, r3
    1bb6:	e859 3f00 	ldrex	r3, [r9]
    1bba:	ea43 0308 	orr.w	r3, r3, r8
    1bbe:	e849 3200 	strex	r2, r3, [r9]
    1bc2:	2a00      	cmp	r2, #0
    1bc4:	d1f7      	bne.n	1bb6 <pm_system_suspend+0x96>
    1bc6:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    1bca:	4b0f      	ldr	r3, [pc, #60]	; (1c08 <pm_system_suspend+0xe8>)
    1bcc:	b133      	cbz	r3, 1bdc <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    1bce:	230c      	movs	r3, #12
    1bd0:	4363      	muls	r3, r4
    1bd2:	18f2      	adds	r2, r6, r3
    1bd4:	5cf0      	ldrb	r0, [r6, r3]
    1bd6:	7851      	ldrb	r1, [r2, #1]
    1bd8:	f004 f855 	bl	5c86 <pm_state_set>
	pm_system_resume();
    1bdc:	f7ff ff62 	bl	1aa4 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    1be0:	4620      	mov	r0, r4
    1be2:	f7ff ff47 	bl	1a74 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    1be6:	f003 f891 	bl	4d0c <k_sched_unlock>
	bool ret = true;
    1bea:	2001      	movs	r0, #1
    1bec:	e7c3      	b.n	1b76 <pm_system_suspend+0x56>
    1bee:	bf00      	nop
    1bf0:	200008c8 	.word	0x200008c8
    1bf4:	20000758 	.word	0x20000758
    1bf8:	2000074c 	.word	0x2000074c
    1bfc:	000f423f 	.word	0x000f423f
    1c00:	000f4240 	.word	0x000f4240
    1c04:	2000075c 	.word	0x2000075c
    1c08:	00005c87 	.word	0x00005c87

00001c0c <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1c0c:	4b05      	ldr	r3, [pc, #20]	; (1c24 <pm_policy_state_lock_is_active+0x18>)
    1c0e:	f3bf 8f5b 	dmb	ish
    1c12:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1c16:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    1c1a:	3800      	subs	r0, #0
    1c1c:	bf18      	it	ne
    1c1e:	2001      	movne	r0, #1
    1c20:	4770      	bx	lr
    1c22:	bf00      	nop
    1c24:	20000760 	.word	0x20000760

00001c28 <pm_policy_next_state>:
{
    1c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c2c:	b085      	sub	sp, #20
    1c2e:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1c30:	a903      	add	r1, sp, #12
    1c32:	f000 f847 	bl	1cc4 <pm_state_cpu_get_all>
    1c36:	f8df 8080 	ldr.w	r8, [pc, #128]	; 1cb8 <pm_policy_next_state+0x90>
    1c3a:	f8df a080 	ldr.w	sl, [pc, #128]	; 1cbc <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1c3e:	1e44      	subs	r4, r0, #1
    1c40:	b224      	sxth	r4, r4
    1c42:	f04f 0b00 	mov.w	fp, #0
    1c46:	1c63      	adds	r3, r4, #1
    1c48:	d104      	bne.n	1c54 <pm_policy_next_state+0x2c>
	return NULL;
    1c4a:	2600      	movs	r6, #0
}
    1c4c:	4630      	mov	r0, r6
    1c4e:	b005      	add	sp, #20
    1c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    1c54:	9a03      	ldr	r2, [sp, #12]
    1c56:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1c5a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    1c5e:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    1c62:	f7ff ffd3 	bl	1c0c <pm_policy_state_lock_is_active>
    1c66:	4605      	mov	r5, r0
    1c68:	bb10      	cbnz	r0, 1cb0 <pm_policy_next_state+0x88>
    1c6a:	6870      	ldr	r0, [r6, #4]
    1c6c:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    1c70:	46c4      	mov	ip, r8
    1c72:	4629      	mov	r1, r5
    1c74:	fbe0 c109 	umlal	ip, r1, r0, r9
    1c78:	4652      	mov	r2, sl
    1c7a:	465b      	mov	r3, fp
    1c7c:	4660      	mov	r0, ip
    1c7e:	f7fe fa3f 	bl	100 <__aeabi_uldivmod>
    1c82:	9001      	str	r0, [sp, #4]
    1c84:	68b0      	ldr	r0, [r6, #8]
    1c86:	46c4      	mov	ip, r8
    1c88:	4629      	mov	r1, r5
    1c8a:	fbe0 c109 	umlal	ip, r1, r0, r9
    1c8e:	465b      	mov	r3, fp
    1c90:	4652      	mov	r2, sl
    1c92:	4660      	mov	r0, ip
    1c94:	f7fe fa34 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1c98:	4b09      	ldr	r3, [pc, #36]	; (1cc0 <pm_policy_next_state+0x98>)
    1c9a:	681b      	ldr	r3, [r3, #0]
    1c9c:	1c59      	adds	r1, r3, #1
    1c9e:	d001      	beq.n	1ca4 <pm_policy_next_state+0x7c>
    1ca0:	4283      	cmp	r3, r0
    1ca2:	d905      	bls.n	1cb0 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    1ca4:	1c7a      	adds	r2, r7, #1
    1ca6:	d0d1      	beq.n	1c4c <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    1ca8:	9b01      	ldr	r3, [sp, #4]
    1caa:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    1cac:	42b8      	cmp	r0, r7
    1cae:	d9cd      	bls.n	1c4c <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1cb0:	3c01      	subs	r4, #1
    1cb2:	b224      	sxth	r4, r4
    1cb4:	e7c7      	b.n	1c46 <pm_policy_next_state+0x1e>
    1cb6:	bf00      	nop
    1cb8:	000f423f 	.word	0x000f423f
    1cbc:	000f4240 	.word	0x000f4240
    1cc0:	20000008 	.word	0x20000008

00001cc4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1cc4:	b908      	cbnz	r0, 1cca <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    1cc6:	4b02      	ldr	r3, [pc, #8]	; (1cd0 <pm_state_cpu_get_all+0xc>)
    1cc8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    1cca:	2000      	movs	r0, #0
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop
    1cd0:	00006850 	.word	0x00006850

00001cd4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1cd4:	4901      	ldr	r1, [pc, #4]	; (1cdc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1cd6:	2210      	movs	r2, #16
	str	r2, [r1]
    1cd8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1cda:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1cdc:	e000ed10 	.word	0xe000ed10

00001ce0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1ce0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1ce2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1ce4:	f380 8811 	msr	BASEPRI, r0
	isb
    1ce8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1cec:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1cf0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1cf2:	b662      	cpsie	i
	isb
    1cf4:	f3bf 8f6f 	isb	sy

	bx	lr
    1cf8:	4770      	bx	lr
    1cfa:	bf00      	nop

00001cfc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1cfc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1cfe:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1d00:	f381 8811 	msr	BASEPRI, r1

	wfe
    1d04:	bf20      	wfe

	msr	BASEPRI, r0
    1d06:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1d0a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    1d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1d14:	4681      	mov	r9, r0
    1d16:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    1d18:	460c      	mov	r4, r1
    1d1a:	2900      	cmp	r1, #0
    1d1c:	d04c      	beq.n	1db8 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    1d1e:	466e      	mov	r6, sp
    1d20:	b08a      	sub	sp, #40	; 0x28
    1d22:	466d      	mov	r5, sp
    1d24:	e9d1 1200 	ldrd	r1, r2, [r1]
    1d28:	68a3      	ldr	r3, [r4, #8]
    1d2a:	4827      	ldr	r0, [pc, #156]	; (1dc8 <z_arm_fatal_error+0xb8>)
    1d2c:	46a8      	mov	r8, r5
    1d2e:	f04f 0a05 	mov.w	sl, #5
    1d32:	e9c5 0105 	strd	r0, r1, [r5, #20]
    1d36:	e9c5 2307 	strd	r2, r3, [r5, #28]
    1d3a:	f848 af10 	str.w	sl, [r8, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    1d3e:	4823      	ldr	r0, [pc, #140]	; (1dcc <z_arm_fatal_error+0xbc>)
    1d40:	4642      	mov	r2, r8
    1d42:	2300      	movs	r3, #0
    1d44:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    1d48:	f003 ff15 	bl	5b76 <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    1d4c:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    1d50:	6963      	ldr	r3, [r4, #20]
    1d52:	481f      	ldr	r0, [pc, #124]	; (1dd0 <z_arm_fatal_error+0xc0>)
    1d54:	f8c5 a010 	str.w	sl, [r5, #16]
    1d58:	46b5      	mov	sp, r6
    1d5a:	e9c5 0105 	strd	r0, r1, [r5, #20]
    1d5e:	46ad      	mov	sp, r5
    1d60:	e9c5 2307 	strd	r2, r3, [r5, #28]
    1d64:	4819      	ldr	r0, [pc, #100]	; (1dcc <z_arm_fatal_error+0xbc>)
    1d66:	4642      	mov	r2, r8
    1d68:	2300      	movs	r3, #0
    1d6a:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    1d6e:	f003 ff02 	bl	5b76 <z_impl_z_log_msg2_static_create>
    1d72:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    1d74:	b088      	sub	sp, #32
    1d76:	466d      	mov	r5, sp
    1d78:	69e3      	ldr	r3, [r4, #28]
    1d7a:	4a16      	ldr	r2, [pc, #88]	; (1dd4 <z_arm_fatal_error+0xc4>)
    1d7c:	46a8      	mov	r8, r5
    1d7e:	f04f 0a03 	mov.w	sl, #3
    1d82:	e9c5 2305 	strd	r2, r3, [r5, #20]
    1d86:	f848 af10 	str.w	sl, [r8, #16]!
    1d8a:	4810      	ldr	r0, [pc, #64]	; (1dcc <z_arm_fatal_error+0xbc>)
    1d8c:	4642      	mov	r2, r8
    1d8e:	2300      	movs	r3, #0
    1d90:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    1d94:	f003 feef 	bl	5b76 <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    1d98:	4a0f      	ldr	r2, [pc, #60]	; (1dd8 <z_arm_fatal_error+0xc8>)
    1d9a:	69a3      	ldr	r3, [r4, #24]
    1d9c:	f8c5 a010 	str.w	sl, [r5, #16]
    1da0:	46b5      	mov	sp, r6
    1da2:	e9c5 2305 	strd	r2, r3, [r5, #20]
    1da6:	46ad      	mov	sp, r5
    1da8:	4808      	ldr	r0, [pc, #32]	; (1dcc <z_arm_fatal_error+0xbc>)
    1daa:	2300      	movs	r3, #0
    1dac:	4642      	mov	r2, r8
    1dae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    1db2:	f003 fee0 	bl	5b76 <z_impl_z_log_msg2_static_create>
    1db6:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    1db8:	4621      	mov	r1, r4
    1dba:	4648      	mov	r0, r9
    1dbc:	f002 fa3c 	bl	4238 <z_fatal_error>
}
    1dc0:	46bd      	mov	sp, r7
    1dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1dc6:	bf00      	nop
    1dc8:	00006b12 	.word	0x00006b12
    1dcc:	0000676c 	.word	0x0000676c
    1dd0:	00006b41 	.word	0x00006b41
    1dd4:	00006b70 	.word	0x00006b70
    1dd8:	00006b7f 	.word	0x00006b7f

00001ddc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1ddc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1dde:	2b00      	cmp	r3, #0
    1de0:	db08      	blt.n	1df4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1de2:	2201      	movs	r2, #1
    1de4:	f000 001f 	and.w	r0, r0, #31
    1de8:	fa02 f000 	lsl.w	r0, r2, r0
    1dec:	095b      	lsrs	r3, r3, #5
    1dee:	4a02      	ldr	r2, [pc, #8]	; (1df8 <arch_irq_enable+0x1c>)
    1df0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1df4:	4770      	bx	lr
    1df6:	bf00      	nop
    1df8:	e000e100 	.word	0xe000e100

00001dfc <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1dfc:	4b05      	ldr	r3, [pc, #20]	; (1e14 <arch_irq_is_enabled+0x18>)
    1dfe:	0942      	lsrs	r2, r0, #5
    1e00:	f000 001f 	and.w	r0, r0, #31
    1e04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1e08:	2301      	movs	r3, #1
    1e0a:	fa03 f000 	lsl.w	r0, r3, r0
}
    1e0e:	4010      	ands	r0, r2
    1e10:	4770      	bx	lr
    1e12:	bf00      	nop
    1e14:	e000e100 	.word	0xe000e100

00001e18 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1e18:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1e1a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e1c:	bfa8      	it	ge
    1e1e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    1e22:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e26:	bfb8      	it	lt
    1e28:	4b06      	ldrlt	r3, [pc, #24]	; (1e44 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e2a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1e2e:	bfac      	ite	ge
    1e30:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e34:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e38:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e3a:	bfb4      	ite	lt
    1e3c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e3e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    1e42:	4770      	bx	lr
    1e44:	e000ed14 	.word	0xe000ed14

00001e48 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1e48:	bf30      	wfi
    b z_SysNmiOnReset
    1e4a:	f7ff bffd 	b.w	1e48 <z_SysNmiOnReset>
    1e4e:	bf00      	nop

00001e50 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1e50:	4a0b      	ldr	r2, [pc, #44]	; (1e80 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1e52:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1e54:	4b0b      	ldr	r3, [pc, #44]	; (1e84 <z_arm_prep_c+0x34>)
    1e56:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1e5a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1e5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e60:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1e64:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1e68:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1e6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1e70:	f002 fa7a 	bl	4368 <z_bss_zero>
	z_data_copy();
    1e74:	f003 f86c 	bl	4f50 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1e78:	f000 fbb8 	bl	25ec <z_arm_interrupt_init>
	z_cstart();
    1e7c:	f002 fab8 	bl	43f0 <z_cstart>
    1e80:	00000000 	.word	0x00000000
    1e84:	e000ed00 	.word	0xe000ed00

00001e88 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1e88:	4a09      	ldr	r2, [pc, #36]	; (1eb0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1e8a:	490a      	ldr	r1, [pc, #40]	; (1eb4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1e8c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1e8e:	6809      	ldr	r1, [r1, #0]
    1e90:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1e92:	4909      	ldr	r1, [pc, #36]	; (1eb8 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1e94:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1e96:	684b      	ldr	r3, [r1, #4]
    1e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1e9c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    1e9e:	2300      	movs	r3, #0
    1ea0:	f383 8811 	msr	BASEPRI, r3
    1ea4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1ea8:	6893      	ldr	r3, [r2, #8]
}
    1eaa:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1eac:	4770      	bx	lr
    1eae:	bf00      	nop
    1eb0:	200008c8 	.word	0x200008c8
    1eb4:	00006984 	.word	0x00006984
    1eb8:	e000ed00 	.word	0xe000ed00

00001ebc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1ebc:	4912      	ldr	r1, [pc, #72]	; (1f08 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1ebe:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1ec0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1ec4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1ec6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1eca:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1ece:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1ed0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1ed4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1ed8:	4f0c      	ldr	r7, [pc, #48]	; (1f0c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1eda:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1ede:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1ee0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1ee2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1ee4:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1ee6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1ee8:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1eea:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1eee:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1ef0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1ef2:	f000 fc17 	bl	2724 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1ef6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1efa:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1efe:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1f02:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1f06:	4770      	bx	lr
    ldr r1, =_kernel
    1f08:	200008c8 	.word	0x200008c8
    ldr v4, =_SCS_ICSR
    1f0c:	e000ed04 	.word	0xe000ed04

00001f10 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1f10:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1f14:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1f16:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1f1a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1f1e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1f20:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1f24:	2902      	cmp	r1, #2
    beq _oops
    1f26:	d0ff      	beq.n	1f28 <_oops>

00001f28 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1f28:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1f2a:	f003 fe69 	bl	5c00 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1f2e:	bd01      	pop	{r0, pc}

00001f30 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1f30:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1f34:	9b00      	ldr	r3, [sp, #0]
    1f36:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1f3a:	490a      	ldr	r1, [pc, #40]	; (1f64 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1f3c:	9b01      	ldr	r3, [sp, #4]
    1f3e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1f42:	9b02      	ldr	r3, [sp, #8]
    1f44:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1f48:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1f4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1f50:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1f54:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1f58:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1f5a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1f5c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1f5e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1f60:	4770      	bx	lr
    1f62:	bf00      	nop
    1f64:	000055c5 	.word	0x000055c5

00001f68 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1f68:	4a09      	ldr	r2, [pc, #36]	; (1f90 <z_check_thread_stack_fail+0x28>)
{
    1f6a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1f6c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1f6e:	b170      	cbz	r0, 1f8e <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1f70:	f113 0f16 	cmn.w	r3, #22
    1f74:	6e40      	ldr	r0, [r0, #100]	; 0x64
    1f76:	d005      	beq.n	1f84 <z_check_thread_stack_fail+0x1c>
    1f78:	f1a0 0220 	sub.w	r2, r0, #32
    1f7c:	429a      	cmp	r2, r3
    1f7e:	d805      	bhi.n	1f8c <z_check_thread_stack_fail+0x24>
    1f80:	4283      	cmp	r3, r0
    1f82:	d203      	bcs.n	1f8c <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1f84:	4281      	cmp	r1, r0
    1f86:	bf28      	it	cs
    1f88:	2000      	movcs	r0, #0
    1f8a:	4770      	bx	lr
    1f8c:	2000      	movs	r0, #0
}
    1f8e:	4770      	bx	lr
    1f90:	200008c8 	.word	0x200008c8

00001f94 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1f94:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1f96:	4b09      	ldr	r3, [pc, #36]	; (1fbc <arch_switch_to_main_thread+0x28>)
    1f98:	6098      	str	r0, [r3, #8]
{
    1f9a:	460d      	mov	r5, r1
    1f9c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1f9e:	f000 fbc1 	bl	2724 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1fa2:	4620      	mov	r0, r4
    1fa4:	f385 8809 	msr	PSP, r5
    1fa8:	2100      	movs	r1, #0
    1faa:	b663      	cpsie	if
    1fac:	f381 8811 	msr	BASEPRI, r1
    1fb0:	f3bf 8f6f 	isb	sy
    1fb4:	2200      	movs	r2, #0
    1fb6:	2300      	movs	r3, #0
    1fb8:	f003 fb04 	bl	55c4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1fbc:	200008c8 	.word	0x200008c8

00001fc0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1fc0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1fc2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1fc4:	4a0b      	ldr	r2, [pc, #44]	; (1ff4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1fc6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1fc8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1fca:	bf1e      	ittt	ne
	movne	r1, #0
    1fcc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1fce:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1fd0:	f004 f939 	blne	6246 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1fd4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1fd6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1fda:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1fde:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1fe2:	4905      	ldr	r1, [pc, #20]	; (1ff8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1fe4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1fe6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1fe8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1fea:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1fee:	4903      	ldr	r1, [pc, #12]	; (1ffc <_isr_wrapper+0x3c>)
	bx r1
    1ff0:	4708      	bx	r1
    1ff2:	0000      	.short	0x0000
	ldr r2, =_kernel
    1ff4:	200008c8 	.word	0x200008c8
	ldr r1, =_sw_isr_table
    1ff8:	000065cc 	.word	0x000065cc
	ldr r1, =z_arm_int_exit
    1ffc:	00002001 	.word	0x00002001

00002000 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2000:	4b04      	ldr	r3, [pc, #16]	; (2014 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2002:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2004:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2006:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2008:	d003      	beq.n	2012 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    200a:	4903      	ldr	r1, [pc, #12]	; (2018 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    200c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2010:	600a      	str	r2, [r1, #0]

00002012 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2012:	4770      	bx	lr
	ldr r3, =_kernel
    2014:	200008c8 	.word	0x200008c8
	ldr r1, =_SCS_ICSR
    2018:	e000ed04 	.word	0xe000ed04

0000201c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    201c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2020:	b086      	sub	sp, #24
    2022:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    2024:	4b3f      	ldr	r3, [pc, #252]	; (2124 <bus_fault.constprop.0+0x108>)
    2026:	617b      	str	r3, [r7, #20]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2028:	4606      	mov	r6, r0
    202a:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    202c:	483e      	ldr	r0, [pc, #248]	; (2128 <bus_fault.constprop.0+0x10c>)
    202e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2032:	2402      	movs	r4, #2
    2034:	f107 0210 	add.w	r2, r7, #16
    2038:	613c      	str	r4, [r7, #16]
    203a:	f003 fdf0 	bl	5c1e <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    203e:	4b3b      	ldr	r3, [pc, #236]	; (212c <bus_fault.constprop.0+0x110>)
    2040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2042:	04d9      	lsls	r1, r3, #19
    2044:	d509      	bpl.n	205a <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
    2046:	4b3a      	ldr	r3, [pc, #232]	; (2130 <bus_fault.constprop.0+0x114>)
    2048:	4837      	ldr	r0, [pc, #220]	; (2128 <bus_fault.constprop.0+0x10c>)
    204a:	f107 0210 	add.w	r2, r7, #16
    204e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2052:	e9c7 4304 	strd	r4, r3, [r7, #16]
    2056:	f003 fde2 	bl	5c1e <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    205a:	4b34      	ldr	r3, [pc, #208]	; (212c <bus_fault.constprop.0+0x110>)
    205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    205e:	051a      	lsls	r2, r3, #20
    2060:	d50a      	bpl.n	2078 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    2062:	4b34      	ldr	r3, [pc, #208]	; (2134 <bus_fault.constprop.0+0x118>)
    2064:	617b      	str	r3, [r7, #20]
    2066:	4830      	ldr	r0, [pc, #192]	; (2128 <bus_fault.constprop.0+0x10c>)
    2068:	2302      	movs	r3, #2
    206a:	f107 0210 	add.w	r2, r7, #16
    206e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2072:	613b      	str	r3, [r7, #16]
    2074:	f003 fdd3 	bl	5c1e <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2078:	4c2c      	ldr	r4, [pc, #176]	; (212c <bus_fault.constprop.0+0x110>)
    207a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    207c:	059b      	lsls	r3, r3, #22
    207e:	d522      	bpl.n	20c6 <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
    2080:	4b2d      	ldr	r3, [pc, #180]	; (2138 <bus_fault.constprop.0+0x11c>)
    2082:	4829      	ldr	r0, [pc, #164]	; (2128 <bus_fault.constprop.0+0x10c>)
    2084:	617b      	str	r3, [r7, #20]
    2086:	f107 0210 	add.w	r2, r7, #16
    208a:	2302      	movs	r3, #2
    208c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2090:	613b      	str	r3, [r7, #16]
    2092:	f003 fdc4 	bl	5c1e <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2096:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2098:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    209a:	0410      	lsls	r0, r2, #16
		PR_FAULT_INFO("  Precise data bus error");
    209c:	46e8      	mov	r8, sp
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    209e:	d512      	bpl.n	20c6 <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    20a0:	b088      	sub	sp, #32
    20a2:	4926      	ldr	r1, [pc, #152]	; (213c <bus_fault.constprop.0+0x120>)
    20a4:	4820      	ldr	r0, [pc, #128]	; (2128 <bus_fault.constprop.0+0x10c>)
    20a6:	466a      	mov	r2, sp
    20a8:	e9c2 1305 	strd	r1, r3, [r2, #20]
    20ac:	2303      	movs	r3, #3
    20ae:	f842 3f10 	str.w	r3, [r2, #16]!
    20b2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    20b6:	f003 fdb2 	bl	5c1e <z_log_msg2_static_create.constprop.0>
    20ba:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    20bc:	b11e      	cbz	r6, 20c6 <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    20be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    20c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    20c4:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    20c6:	4b19      	ldr	r3, [pc, #100]	; (212c <bus_fault.constprop.0+0x110>)
    20c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    20ca:	0559      	lsls	r1, r3, #21
    20cc:	d50a      	bpl.n	20e4 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
    20ce:	4b1c      	ldr	r3, [pc, #112]	; (2140 <bus_fault.constprop.0+0x124>)
    20d0:	617b      	str	r3, [r7, #20]
    20d2:	4815      	ldr	r0, [pc, #84]	; (2128 <bus_fault.constprop.0+0x10c>)
    20d4:	2302      	movs	r3, #2
    20d6:	f107 0210 	add.w	r2, r7, #16
    20da:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    20de:	613b      	str	r3, [r7, #16]
    20e0:	f003 fd9d 	bl	5c1e <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    20e4:	4b11      	ldr	r3, [pc, #68]	; (212c <bus_fault.constprop.0+0x110>)
    20e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    20e8:	05d2      	lsls	r2, r2, #23
    20ea:	d515      	bpl.n	2118 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
    20ec:	4b15      	ldr	r3, [pc, #84]	; (2144 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    20ee:	617b      	str	r3, [r7, #20]
    20f0:	480d      	ldr	r0, [pc, #52]	; (2128 <bus_fault.constprop.0+0x10c>)
    20f2:	2302      	movs	r3, #2
    20f4:	f107 0210 	add.w	r2, r7, #16
    20f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    20fc:	613b      	str	r3, [r7, #16]
    20fe:	f003 fd8e 	bl	5c1e <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2102:	4a0a      	ldr	r2, [pc, #40]	; (212c <bus_fault.constprop.0+0x110>)
    2104:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    2106:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2108:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
    210c:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    210e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2110:	7028      	strb	r0, [r5, #0]
}
    2112:	46bd      	mov	sp, r7
    2114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    211a:	049b      	lsls	r3, r3, #18
    211c:	d5f1      	bpl.n	2102 <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    211e:	4b0a      	ldr	r3, [pc, #40]	; (2148 <bus_fault.constprop.0+0x12c>)
    2120:	e7e5      	b.n	20ee <bus_fault.constprop.0+0xd2>
    2122:	bf00      	nop
    2124:	00006bad 	.word	0x00006bad
    2128:	0000676c 	.word	0x0000676c
    212c:	e000ed00 	.word	0xe000ed00
    2130:	00006bc3 	.word	0x00006bc3
    2134:	00006bd4 	.word	0x00006bd4
    2138:	00006be7 	.word	0x00006be7
    213c:	00006c00 	.word	0x00006c00
    2140:	00006c15 	.word	0x00006c15
    2144:	00006c30 	.word	0x00006c30
    2148:	00006c48 	.word	0x00006c48

0000214c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    214c:	b510      	push	{r4, lr}
    214e:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    2150:	4b33      	ldr	r3, [pc, #204]	; (2220 <usage_fault.constprop.0+0xd4>)
    2152:	4834      	ldr	r0, [pc, #208]	; (2224 <usage_fault.constprop.0+0xd8>)
    2154:	9305      	str	r3, [sp, #20]
    2156:	2402      	movs	r4, #2
    2158:	aa04      	add	r2, sp, #16
    215a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    215e:	9404      	str	r4, [sp, #16]
    2160:	f003 fd5d 	bl	5c1e <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2164:	4b30      	ldr	r3, [pc, #192]	; (2228 <usage_fault.constprop.0+0xdc>)
    2166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2168:	019b      	lsls	r3, r3, #6
    216a:	d508      	bpl.n	217e <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
    216c:	4b2f      	ldr	r3, [pc, #188]	; (222c <usage_fault.constprop.0+0xe0>)
    216e:	482d      	ldr	r0, [pc, #180]	; (2224 <usage_fault.constprop.0+0xd8>)
    2170:	aa04      	add	r2, sp, #16
    2172:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2176:	e9cd 4304 	strd	r4, r3, [sp, #16]
    217a:	f003 fd50 	bl	5c1e <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    217e:	4b2a      	ldr	r3, [pc, #168]	; (2228 <usage_fault.constprop.0+0xdc>)
    2180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2182:	01dc      	lsls	r4, r3, #7
    2184:	d509      	bpl.n	219a <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
    2186:	4b2a      	ldr	r3, [pc, #168]	; (2230 <usage_fault.constprop.0+0xe4>)
    2188:	9305      	str	r3, [sp, #20]
    218a:	4826      	ldr	r0, [pc, #152]	; (2224 <usage_fault.constprop.0+0xd8>)
    218c:	2302      	movs	r3, #2
    218e:	aa04      	add	r2, sp, #16
    2190:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2194:	9304      	str	r3, [sp, #16]
    2196:	f003 fd42 	bl	5c1e <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    219a:	4b23      	ldr	r3, [pc, #140]	; (2228 <usage_fault.constprop.0+0xdc>)
    219c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    219e:	0318      	lsls	r0, r3, #12
    21a0:	d509      	bpl.n	21b6 <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
    21a2:	4b24      	ldr	r3, [pc, #144]	; (2234 <usage_fault.constprop.0+0xe8>)
    21a4:	9305      	str	r3, [sp, #20]
    21a6:	481f      	ldr	r0, [pc, #124]	; (2224 <usage_fault.constprop.0+0xd8>)
    21a8:	2302      	movs	r3, #2
    21aa:	aa04      	add	r2, sp, #16
    21ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    21b0:	9304      	str	r3, [sp, #16]
    21b2:	f003 fd34 	bl	5c1e <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    21b6:	4b1c      	ldr	r3, [pc, #112]	; (2228 <usage_fault.constprop.0+0xdc>)
    21b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21ba:	0359      	lsls	r1, r3, #13
    21bc:	d509      	bpl.n	21d2 <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    21be:	4b1e      	ldr	r3, [pc, #120]	; (2238 <usage_fault.constprop.0+0xec>)
    21c0:	9305      	str	r3, [sp, #20]
    21c2:	4818      	ldr	r0, [pc, #96]	; (2224 <usage_fault.constprop.0+0xd8>)
    21c4:	2302      	movs	r3, #2
    21c6:	aa04      	add	r2, sp, #16
    21c8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    21cc:	9304      	str	r3, [sp, #16]
    21ce:	f003 fd26 	bl	5c1e <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    21d2:	4b15      	ldr	r3, [pc, #84]	; (2228 <usage_fault.constprop.0+0xdc>)
    21d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21d6:	039a      	lsls	r2, r3, #14
    21d8:	d509      	bpl.n	21ee <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    21da:	4b18      	ldr	r3, [pc, #96]	; (223c <usage_fault.constprop.0+0xf0>)
    21dc:	9305      	str	r3, [sp, #20]
    21de:	4811      	ldr	r0, [pc, #68]	; (2224 <usage_fault.constprop.0+0xd8>)
    21e0:	2302      	movs	r3, #2
    21e2:	aa04      	add	r2, sp, #16
    21e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    21e8:	9304      	str	r3, [sp, #16]
    21ea:	f003 fd18 	bl	5c1e <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    21ee:	4b0e      	ldr	r3, [pc, #56]	; (2228 <usage_fault.constprop.0+0xdc>)
    21f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21f2:	03db      	lsls	r3, r3, #15
    21f4:	d509      	bpl.n	220a <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    21f6:	4b12      	ldr	r3, [pc, #72]	; (2240 <usage_fault.constprop.0+0xf4>)
    21f8:	9305      	str	r3, [sp, #20]
    21fa:	480a      	ldr	r0, [pc, #40]	; (2224 <usage_fault.constprop.0+0xd8>)
    21fc:	2302      	movs	r3, #2
    21fe:	aa04      	add	r2, sp, #16
    2200:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2204:	9304      	str	r3, [sp, #16]
    2206:	f003 fd0a 	bl	5c1e <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    220a:	4a07      	ldr	r2, [pc, #28]	; (2228 <usage_fault.constprop.0+0xdc>)
    220c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    220e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2212:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    2216:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2218:	6293      	str	r3, [r2, #40]	; 0x28
}
    221a:	b006      	add	sp, #24
    221c:	bd10      	pop	{r4, pc}
    221e:	bf00      	nop
    2220:	00006c77 	.word	0x00006c77
    2224:	0000676c 	.word	0x0000676c
    2228:	e000ed00 	.word	0xe000ed00
    222c:	00006c8f 	.word	0x00006c8f
    2230:	00006ca2 	.word	0x00006ca2
    2234:	00006cbc 	.word	0x00006cbc
    2238:	00006cda 	.word	0x00006cda
    223c:	00006cff 	.word	0x00006cff
    2240:	00006d19 	.word	0x00006d19

00002244 <mem_manage_fault>:
{
    2244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2248:	b086      	sub	sp, #24
    224a:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** MPU FAULT *****");
    224c:	4b50      	ldr	r3, [pc, #320]	; (2390 <mem_manage_fault+0x14c>)
    224e:	617b      	str	r3, [r7, #20]
{
    2250:	4606      	mov	r6, r0
    2252:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2254:	484f      	ldr	r0, [pc, #316]	; (2394 <mem_manage_fault+0x150>)
{
    2256:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    2258:	2502      	movs	r5, #2
    225a:	f107 0210 	add.w	r2, r7, #16
    225e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2262:	613d      	str	r5, [r7, #16]
    2264:	f003 fcdb 	bl	5c1e <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2268:	4b4b      	ldr	r3, [pc, #300]	; (2398 <mem_manage_fault+0x154>)
    226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    226c:	06d8      	lsls	r0, r3, #27
    226e:	d509      	bpl.n	2284 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2270:	4b4a      	ldr	r3, [pc, #296]	; (239c <mem_manage_fault+0x158>)
    2272:	4848      	ldr	r0, [pc, #288]	; (2394 <mem_manage_fault+0x150>)
    2274:	f107 0210 	add.w	r2, r7, #16
    2278:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    227c:	e9c7 5304 	strd	r5, r3, [r7, #16]
    2280:	f003 fccd 	bl	5c1e <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2284:	4b44      	ldr	r3, [pc, #272]	; (2398 <mem_manage_fault+0x154>)
    2286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2288:	0719      	lsls	r1, r3, #28
    228a:	d50a      	bpl.n	22a2 <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Unstacking error");
    228c:	4b44      	ldr	r3, [pc, #272]	; (23a0 <mem_manage_fault+0x15c>)
    228e:	617b      	str	r3, [r7, #20]
    2290:	4840      	ldr	r0, [pc, #256]	; (2394 <mem_manage_fault+0x150>)
    2292:	2302      	movs	r3, #2
    2294:	f107 0210 	add.w	r2, r7, #16
    2298:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    229c:	613b      	str	r3, [r7, #16]
    229e:	f003 fcbe 	bl	5c1e <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    22a2:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 2398 <mem_manage_fault+0x154>
    22a6:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    22aa:	079a      	lsls	r2, r3, #30
    22ac:	d439      	bmi.n	2322 <mem_manage_fault+0xde>
	uint32_t mmfar = -EINVAL;
    22ae:	f06f 0515 	mvn.w	r5, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    22b2:	4b39      	ldr	r3, [pc, #228]	; (2398 <mem_manage_fault+0x154>)
    22b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    22b6:	07d8      	lsls	r0, r3, #31
    22b8:	d50a      	bpl.n	22d0 <mem_manage_fault+0x8c>
		PR_FAULT_INFO("  Instruction Access Violation");
    22ba:	4b3a      	ldr	r3, [pc, #232]	; (23a4 <mem_manage_fault+0x160>)
    22bc:	617b      	str	r3, [r7, #20]
    22be:	4835      	ldr	r0, [pc, #212]	; (2394 <mem_manage_fault+0x150>)
    22c0:	2302      	movs	r3, #2
    22c2:	f107 0210 	add.w	r2, r7, #16
    22c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    22ca:	613b      	str	r3, [r7, #16]
    22cc:	f003 fca7 	bl	5c1e <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    22d0:	4b31      	ldr	r3, [pc, #196]	; (2398 <mem_manage_fault+0x154>)
    22d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    22d4:	0699      	lsls	r1, r3, #26
    22d6:	d50a      	bpl.n	22ee <mem_manage_fault+0xaa>
		PR_FAULT_INFO(
    22d8:	4b33      	ldr	r3, [pc, #204]	; (23a8 <mem_manage_fault+0x164>)
    22da:	617b      	str	r3, [r7, #20]
    22dc:	482d      	ldr	r0, [pc, #180]	; (2394 <mem_manage_fault+0x150>)
    22de:	2302      	movs	r3, #2
    22e0:	f107 0210 	add.w	r2, r7, #16
    22e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    22e8:	613b      	str	r3, [r7, #16]
    22ea:	f003 fc98 	bl	5c1e <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    22ee:	4b2a      	ldr	r3, [pc, #168]	; (2398 <mem_manage_fault+0x154>)
    22f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    22f2:	06d2      	lsls	r2, r2, #27
    22f4:	d43f      	bmi.n	2376 <mem_manage_fault+0x132>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    22f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    22f8:	0790      	lsls	r0, r2, #30
    22fa:	d43c      	bmi.n	2376 <mem_manage_fault+0x132>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    22fc:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    22fe:	4b26      	ldr	r3, [pc, #152]	; (2398 <mem_manage_fault+0x154>)
    2300:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2302:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    2304:	bf42      	ittt	mi
    2306:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    2308:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    230c:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    230e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2310:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2314:	629a      	str	r2, [r3, #40]	; 0x28
}
    2316:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    2318:	2300      	movs	r3, #0
    231a:	7023      	strb	r3, [r4, #0]
}
    231c:	46bd      	mov	sp, r7
    231e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    2322:	4b22      	ldr	r3, [pc, #136]	; (23ac <mem_manage_fault+0x168>)
    2324:	617b      	str	r3, [r7, #20]
    2326:	481b      	ldr	r0, [pc, #108]	; (2394 <mem_manage_fault+0x150>)
    2328:	2302      	movs	r3, #2
    232a:	f107 0210 	add.w	r2, r7, #16
    232e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2332:	613b      	str	r3, [r7, #16]
    2334:	f003 fc73 	bl	5c1e <z_log_msg2_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    2338:	f8da 5034 	ldr.w	r5, [sl, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    233c:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    2340:	061b      	lsls	r3, r3, #24
		PR_FAULT_INFO("  Data Access Violation");
    2342:	46e9      	mov	r9, sp
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2344:	d5b3      	bpl.n	22ae <mem_manage_fault+0x6a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2346:	b088      	sub	sp, #32
    2348:	4b19      	ldr	r3, [pc, #100]	; (23b0 <mem_manage_fault+0x16c>)
    234a:	4812      	ldr	r0, [pc, #72]	; (2394 <mem_manage_fault+0x150>)
    234c:	466a      	mov	r2, sp
    234e:	e9c2 3505 	strd	r3, r5, [r2, #20]
    2352:	2303      	movs	r3, #3
    2354:	f842 3f10 	str.w	r3, [r2, #16]!
    2358:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    235c:	f003 fc5f 	bl	5c1e <z_log_msg2_static_create.constprop.0>
    2360:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
    2362:	f1b8 0f00 	cmp.w	r8, #0
    2366:	d0a4      	beq.n	22b2 <mem_manage_fault+0x6e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2368:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    236c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2370:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
    2374:	e79d      	b.n	22b2 <mem_manage_fault+0x6e>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2376:	685b      	ldr	r3, [r3, #4]
    2378:	0519      	lsls	r1, r3, #20
    237a:	d5bf      	bpl.n	22fc <mem_manage_fault+0xb8>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    237c:	4631      	mov	r1, r6
    237e:	4628      	mov	r0, r5
    2380:	f7ff fdf2 	bl	1f68 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2384:	2800      	cmp	r0, #0
    2386:	d0b9      	beq.n	22fc <mem_manage_fault+0xb8>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2388:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    238c:	2002      	movs	r0, #2
    238e:	e7b6      	b.n	22fe <mem_manage_fault+0xba>
    2390:	00006d44 	.word	0x00006d44
    2394:	0000676c 	.word	0x0000676c
    2398:	e000ed00 	.word	0xe000ed00
    239c:	00006d5a 	.word	0x00006d5a
    23a0:	00006bd4 	.word	0x00006bd4
    23a4:	00006dbb 	.word	0x00006dbb
    23a8:	00006c48 	.word	0x00006c48
    23ac:	00006d8d 	.word	0x00006d8d
    23b0:	00006da5 	.word	0x00006da5

000023b4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    23b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    23b8:	4b76      	ldr	r3, [pc, #472]	; (2594 <z_arm_fault+0x1e0>)
{
    23ba:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    23bc:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    23c0:	af00      	add	r7, sp, #0
    23c2:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    23c4:	f3c8 0408 	ubfx	r4, r8, #0, #9
    23c8:	2600      	movs	r6, #0
    23ca:	f386 8811 	msr	BASEPRI, r6
    23ce:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    23d2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    23d6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    23da:	d10e      	bne.n	23fa <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    23dc:	f002 030c 	and.w	r3, r2, #12
    23e0:	2b08      	cmp	r3, #8
    23e2:	d10c      	bne.n	23fe <z_arm_fault+0x4a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    23e4:	4b6c      	ldr	r3, [pc, #432]	; (2598 <z_arm_fault+0x1e4>)
    23e6:	61fb      	str	r3, [r7, #28]
    23e8:	486c      	ldr	r0, [pc, #432]	; (259c <z_arm_fault+0x1e8>)
    23ea:	2302      	movs	r3, #2
    23ec:	f107 0218 	add.w	r2, r7, #24
    23f0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    23f4:	61bb      	str	r3, [r7, #24]
    23f6:	f003 fc12 	bl	5c1e <z_log_msg2_static_create.constprop.0>
		return NULL;
    23fa:	4635      	mov	r5, r6
    23fc:	e003      	b.n	2406 <z_arm_fault+0x52>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    23fe:	0712      	lsls	r2, r2, #28
    2400:	d401      	bmi.n	2406 <z_arm_fault+0x52>
			ptr_esf = (z_arch_esf_t *)msp;
    2402:	4605      	mov	r5, r0
			*nested_exc = true;
    2404:	2601      	movs	r6, #1
	*recoverable = false;
    2406:	2300      	movs	r3, #0
    2408:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    240a:	1ee3      	subs	r3, r4, #3
    240c:	2b09      	cmp	r3, #9
    240e:	f200 80a1 	bhi.w	2554 <z_arm_fault+0x1a0>
    2412:	e8df f003 	tbb	[pc, r3]
    2416:	9405      	.short	0x9405
    2418:	9f9f9197 	.word	0x9f9f9197
    241c:	9a9f9f9f 	.word	0x9a9f9f9f
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2420:	f8df 8170 	ldr.w	r8, [pc, #368]	; 2594 <z_arm_fault+0x1e0>
	PR_FAULT_INFO("***** HARD FAULT *****");
    2424:	4b5e      	ldr	r3, [pc, #376]	; (25a0 <z_arm_fault+0x1ec>)
    2426:	485d      	ldr	r0, [pc, #372]	; (259c <z_arm_fault+0x1e8>)
    2428:	61fb      	str	r3, [r7, #28]
    242a:	f04f 0a02 	mov.w	sl, #2
    242e:	f107 0218 	add.w	r2, r7, #24
    2432:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2436:	f8c7 a018 	str.w	sl, [r7, #24]
    243a:	f003 fbf0 	bl	5c1e <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    243e:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    2442:	f04f 0b00 	mov.w	fp, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2446:	ea14 040a 	ands.w	r4, r4, sl
	PR_FAULT_INFO("***** HARD FAULT *****");
    244a:	46e9      	mov	r9, sp
	*recoverable = false;
    244c:	f887 b007 	strb.w	fp, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2450:	d00b      	beq.n	246a <z_arm_fault+0xb6>
		PR_EXC("  Bus fault on vector table read");
    2452:	4b54      	ldr	r3, [pc, #336]	; (25a4 <z_arm_fault+0x1f0>)
    2454:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
    2458:	4850      	ldr	r0, [pc, #320]	; (259c <z_arm_fault+0x1e8>)
    245a:	f107 0218 	add.w	r2, r7, #24
    245e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2462:	f003 fbdc 	bl	5c1e <z_log_msg2_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2466:	2400      	movs	r4, #0
}
    2468:	e00d      	b.n	2486 <z_arm_fault+0xd2>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    246a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    246e:	2b00      	cmp	r3, #0
    2470:	da25      	bge.n	24be <z_arm_fault+0x10a>
		PR_EXC("  Debug event");
    2472:	4b4d      	ldr	r3, [pc, #308]	; (25a8 <z_arm_fault+0x1f4>)
    2474:	4849      	ldr	r0, [pc, #292]	; (259c <z_arm_fault+0x1e8>)
    2476:	f107 0218 	add.w	r2, r7, #24
    247a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    247e:	e9c7 a306 	strd	sl, r3, [r7, #24]
    2482:	f003 fbcc 	bl	5c1e <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2486:	79fb      	ldrb	r3, [r7, #7]
    2488:	b9ab      	cbnz	r3, 24b6 <z_arm_fault+0x102>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    248a:	2220      	movs	r2, #32
    248c:	4629      	mov	r1, r5
    248e:	f107 0008 	add.w	r0, r7, #8
    2492:	f003 fbe1 	bl	5c58 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2498:	2e00      	cmp	r6, #0
    249a:	d076      	beq.n	258a <z_arm_fault+0x1d6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    249c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    24a0:	b922      	cbnz	r2, 24ac <z_arm_fault+0xf8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    24a2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    24a6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    24aa:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    24ac:	f107 0108 	add.w	r1, r7, #8
    24b0:	4620      	mov	r0, r4
    24b2:	f7ff fc2d 	bl	1d10 <z_arm_fatal_error>
}
    24b6:	372c      	adds	r7, #44	; 0x2c
    24b8:	46bd      	mov	sp, r7
    24ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    24be:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    24c2:	005b      	lsls	r3, r3, #1
    24c4:	d5df      	bpl.n	2486 <z_arm_fault+0xd2>
		PR_EXC("  Fault escalation (see below)");
    24c6:	4b39      	ldr	r3, [pc, #228]	; (25ac <z_arm_fault+0x1f8>)
    24c8:	4834      	ldr	r0, [pc, #208]	; (259c <z_arm_fault+0x1e8>)
    24ca:	f107 0218 	add.w	r2, r7, #24
    24ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    24d2:	e9c7 a306 	strd	sl, r3, [r7, #24]
    24d6:	f003 fba2 	bl	5c1e <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    24da:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    24dc:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    24e0:	f64d 7302 	movw	r3, #57090	; 0xdf02
    24e4:	429a      	cmp	r2, r3
    24e6:	d009      	beq.n	24fc <z_arm_fault+0x148>
		} else if (SCB_MMFSR != 0) {
    24e8:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    24ec:	b1bb      	cbz	r3, 251e <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
    24ee:	1dfa      	adds	r2, r7, #7
    24f0:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    24f2:	4628      	mov	r0, r5
    24f4:	f7ff fea6 	bl	2244 <mem_manage_fault>
    24f8:	4604      	mov	r4, r0
		break;
    24fa:	e7c4      	b.n	2486 <z_arm_fault+0xd2>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    24fc:	b088      	sub	sp, #32
    24fe:	682b      	ldr	r3, [r5, #0]
    2500:	492b      	ldr	r1, [pc, #172]	; (25b0 <z_arm_fault+0x1fc>)
    2502:	4826      	ldr	r0, [pc, #152]	; (259c <z_arm_fault+0x1e8>)
    2504:	466a      	mov	r2, sp
    2506:	e9c2 1305 	strd	r1, r3, [r2, #20]
    250a:	2303      	movs	r3, #3
    250c:	f842 3f10 	str.w	r3, [r2, #16]!
    2510:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2514:	f003 fb83 	bl	5c1e <z_log_msg2_static_create.constprop.0>
    2518:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    251a:	682c      	ldr	r4, [r5, #0]
    251c:	e7b3      	b.n	2486 <z_arm_fault+0xd2>
		} else if (SCB_BFSR != 0) {
    251e:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    2522:	b123      	cbz	r3, 252e <z_arm_fault+0x17a>
			reason = bus_fault(esf, 1, recoverable);
    2524:	1df9      	adds	r1, r7, #7
    2526:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2528:	f7ff fd78 	bl	201c <bus_fault.constprop.0>
    252c:	e7e4      	b.n	24f8 <z_arm_fault+0x144>
		} else if (SCB_UFSR != 0) {
    252e:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    2532:	b29b      	uxth	r3, r3
    2534:	2b00      	cmp	r3, #0
    2536:	d0a6      	beq.n	2486 <z_arm_fault+0xd2>
		reason = usage_fault(esf);
    2538:	f7ff fe08 	bl	214c <usage_fault.constprop.0>
    253c:	e7dc      	b.n	24f8 <z_arm_fault+0x144>
		reason = mem_manage_fault(esf, 0, recoverable);
    253e:	1dfa      	adds	r2, r7, #7
    2540:	2100      	movs	r1, #0
    2542:	e7d6      	b.n	24f2 <z_arm_fault+0x13e>
		reason = bus_fault(esf, 0, recoverable);
    2544:	1df9      	adds	r1, r7, #7
    2546:	2000      	movs	r0, #0
    2548:	e7ee      	b.n	2528 <z_arm_fault+0x174>
	PR_FAULT_INFO(
    254a:	4b1a      	ldr	r3, [pc, #104]	; (25b4 <z_arm_fault+0x200>)
    254c:	61fb      	str	r3, [r7, #28]
    254e:	2302      	movs	r3, #2
    2550:	61bb      	str	r3, [r7, #24]
    2552:	e781      	b.n	2458 <z_arm_fault+0xa4>
	PR_FAULT_INFO("***** %s %d) *****",
    2554:	4a18      	ldr	r2, [pc, #96]	; (25b8 <z_arm_fault+0x204>)
    2556:	4b19      	ldr	r3, [pc, #100]	; (25bc <z_arm_fault+0x208>)
    2558:	4919      	ldr	r1, [pc, #100]	; (25c0 <z_arm_fault+0x20c>)
    255a:	4810      	ldr	r0, [pc, #64]	; (259c <z_arm_fault+0x1e8>)
    255c:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    2560:	46e8      	mov	r8, sp
    2562:	b08a      	sub	sp, #40	; 0x28
    2564:	bf18      	it	ne
    2566:	4613      	movne	r3, r2
    2568:	466a      	mov	r2, sp
    256a:	e9c2 1305 	strd	r1, r3, [r2, #20]
    256e:	2302      	movs	r3, #2
    2570:	f882 3020 	strb.w	r3, [r2, #32]
    2574:	3c10      	subs	r4, #16
    2576:	4b13      	ldr	r3, [pc, #76]	; (25c4 <z_arm_fault+0x210>)
    2578:	61d4      	str	r4, [r2, #28]
    257a:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    257e:	f842 3f10 	str.w	r3, [r2, #16]!
    2582:	f003 fb4c 	bl	5c1e <z_log_msg2_static_create.constprop.0>
    2586:	46c5      	mov	sp, r8
    2588:	e76d      	b.n	2466 <z_arm_fault+0xb2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    258a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    258e:	f023 0301 	bic.w	r3, r3, #1
    2592:	e78a      	b.n	24aa <z_arm_fault+0xf6>
    2594:	e000ed00 	.word	0xe000ed00
    2598:	00006e08 	.word	0x00006e08
    259c:	0000676c 	.word	0x0000676c
    25a0:	00006e33 	.word	0x00006e33
    25a4:	00006e4a 	.word	0x00006e4a
    25a8:	00006e6b 	.word	0x00006e6b
    25ac:	00006e79 	.word	0x00006e79
    25b0:	00006e98 	.word	0x00006e98
    25b4:	00006eb4 	.word	0x00006eb4
    25b8:	00006def 	.word	0x00006def
    25bc:	00006dda 	.word	0x00006dda
    25c0:	00006ed8 	.word	0x00006ed8
    25c4:	01000004 	.word	0x01000004

000025c8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    25c8:	4a02      	ldr	r2, [pc, #8]	; (25d4 <z_arm_fault_init+0xc>)
    25ca:	6953      	ldr	r3, [r2, #20]
    25cc:	f043 0310 	orr.w	r3, r3, #16
    25d0:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    25d2:	4770      	bx	lr
    25d4:	e000ed00 	.word	0xe000ed00

000025d8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    25d8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    25dc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    25e0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    25e2:	4672      	mov	r2, lr
	bl z_arm_fault
    25e4:	f7ff fee6 	bl	23b4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    25e8:	bd01      	pop	{r0, pc}
    25ea:	bf00      	nop

000025ec <z_arm_interrupt_init>:
    25ec:	4804      	ldr	r0, [pc, #16]	; (2600 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    25ee:	2300      	movs	r3, #0
    25f0:	2120      	movs	r1, #32
    25f2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    25f4:	3301      	adds	r3, #1
    25f6:	2b30      	cmp	r3, #48	; 0x30
    25f8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    25fc:	d1f9      	bne.n	25f2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    25fe:	4770      	bx	lr
    2600:	e000e100 	.word	0xe000e100

00002604 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2604:	2000      	movs	r0, #0
    msr CONTROL, r0
    2606:	f380 8814 	msr	CONTROL, r0
    isb
    260a:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    260e:	f003 ff6f 	bl	64f0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2612:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2614:	490d      	ldr	r1, [pc, #52]	; (264c <__start+0x48>)
    str r0, [r1]
    2616:	6008      	str	r0, [r1, #0]
    dsb
    2618:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    261c:	480c      	ldr	r0, [pc, #48]	; (2650 <__start+0x4c>)
    msr msp, r0
    261e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2622:	f000 f82b 	bl	267c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2626:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2628:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    262c:	4809      	ldr	r0, [pc, #36]	; (2654 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    262e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    2632:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2634:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2638:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    263c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    263e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2640:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2644:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2648:	f7ff fc02 	bl	1e50 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    264c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2650:	20001460 	.word	0x20001460
    ldr r0, =z_interrupt_stacks
    2654:	200015e0 	.word	0x200015e0

00002658 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2658:	4907      	ldr	r1, [pc, #28]	; (2678 <z_arm_clear_arm_mpu_config+0x20>)
    265a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    265e:	2300      	movs	r3, #0
	int num_regions =
    2660:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2664:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2666:	4293      	cmp	r3, r2
    2668:	d100      	bne.n	266c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    266a:	4770      	bx	lr
  MPU->RNR = rnr;
    266c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    2670:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    2674:	3301      	adds	r3, #1
    2676:	e7f6      	b.n	2666 <z_arm_clear_arm_mpu_config+0xe>
    2678:	e000ed00 	.word	0xe000ed00

0000267c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    267c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    267e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2680:	2300      	movs	r3, #0
    2682:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2686:	f7ff ffe7 	bl	2658 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    268a:	4b14      	ldr	r3, [pc, #80]	; (26dc <z_arm_init_arch_hw_at_boot+0x60>)
    268c:	f04f 32ff 	mov.w	r2, #4294967295
    2690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    269c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    26a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    26a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    26a8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    26ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    26b0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    26b4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    26b8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    26bc:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    26c0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    26c4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    26c8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    26cc:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    26d0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    26d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    26d6:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    26da:	bd08      	pop	{r3, pc}
    26dc:	e000e100 	.word	0xe000e100

000026e0 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    26e0:	4b08      	ldr	r3, [pc, #32]	; (2704 <z_impl_k_thread_abort+0x24>)
    26e2:	689b      	ldr	r3, [r3, #8]
    26e4:	4283      	cmp	r3, r0
    26e6:	d10b      	bne.n	2700 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    26e8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    26ec:	b143      	cbz	r3, 2700 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    26ee:	4b06      	ldr	r3, [pc, #24]	; (2708 <z_impl_k_thread_abort+0x28>)
    26f0:	685a      	ldr	r2, [r3, #4]
    26f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    26f6:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    26f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    26fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    26fe:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    2700:	f002 bbd4 	b.w	4eac <z_thread_abort>
    2704:	200008c8 	.word	0x200008c8
    2708:	e000ed00 	.word	0xe000ed00

0000270c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    270c:	4b02      	ldr	r3, [pc, #8]	; (2718 <z_arm_configure_static_mpu_regions+0xc>)
    270e:	4a03      	ldr	r2, [pc, #12]	; (271c <z_arm_configure_static_mpu_regions+0x10>)
    2710:	4803      	ldr	r0, [pc, #12]	; (2720 <z_arm_configure_static_mpu_regions+0x14>)
    2712:	2101      	movs	r1, #1
    2714:	f000 b890 	b.w	2838 <arm_core_mpu_configure_static_mpu_regions>
    2718:	20020000 	.word	0x20020000
    271c:	20000000 	.word	0x20000000
    2720:	00006850 	.word	0x00006850

00002724 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2724:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2726:	4b05      	ldr	r3, [pc, #20]	; (273c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2728:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    272a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    272c:	4a04      	ldr	r2, [pc, #16]	; (2740 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    272e:	2120      	movs	r1, #32
    2730:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2734:	4618      	mov	r0, r3
    2736:	2101      	movs	r1, #1
    2738:	f000 b888 	b.w	284c <arm_core_mpu_configure_dynamic_mpu_regions>
    273c:	2000077c 	.word	0x2000077c
    2740:	150b0000 	.word	0x150b0000

00002744 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2746:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 27fc <mpu_configure_regions+0xb8>
    274a:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    274c:	2500      	movs	r5, #0
    274e:	428d      	cmp	r5, r1
    2750:	da1a      	bge.n	2788 <mpu_configure_regions+0x44>
		if (regions[i].size == 0U) {
    2752:	6844      	ldr	r4, [r0, #4]
    2754:	2c00      	cmp	r4, #0
    2756:	d04d      	beq.n	27f4 <mpu_configure_regions+0xb0>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    2758:	b1fb      	cbz	r3, 279a <mpu_configure_regions+0x56>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    275a:	f104 3eff 	add.w	lr, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    275e:	ea14 0f0e 	tst.w	r4, lr
    2762:	d014      	beq.n	278e <mpu_configure_regions+0x4a>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    2764:	4b26      	ldr	r3, [pc, #152]	; (2800 <mpu_configure_regions+0xbc>)
    2766:	466c      	mov	r4, sp
    2768:	b088      	sub	sp, #32
    276a:	466a      	mov	r2, sp
    276c:	e9c2 3505 	strd	r3, r5, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2770:	2303      	movs	r3, #3
    2772:	f842 3f10 	str.w	r3, [r2, #16]!
    2776:	4823      	ldr	r0, [pc, #140]	; (2804 <mpu_configure_regions+0xc0>)
    2778:	2300      	movs	r3, #0
    277a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    277e:	f003 f9fa 	bl	5b76 <z_impl_z_log_msg2_static_create>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2782:	f06f 0215 	mvn.w	r2, #21
    2786:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2788:	4610      	mov	r0, r2
    278a:	46bd      	mov	sp, r7
    278c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    278e:	2c1f      	cmp	r4, #31
    2790:	d9e8      	bls.n	2764 <mpu_configure_regions+0x20>
		((part->start & (part->size - 1U)) == 0U);
    2792:	6806      	ldr	r6, [r0, #0]
		&&
    2794:	ea1e 0f06 	tst.w	lr, r6
    2798:	d1e4      	bne.n	2764 <mpu_configure_regions+0x20>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    279a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    279c:	6806      	ldr	r6, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    279e:	f8d0 e008 	ldr.w	lr, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    27a2:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    27a4:	d914      	bls.n	27d0 <mpu_configure_regions+0x8c>
	if (size > (1UL << 31)) {
    27a6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    27aa:	d813      	bhi.n	27d4 <mpu_configure_regions+0x90>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    27ac:	3c01      	subs	r4, #1
    27ae:	fab4 f484 	clz	r4, r4
    27b2:	f1c4 041f 	rsb	r4, r4, #31
    27b6:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    27b8:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    27ba:	ea4e 0404 	orr.w	r4, lr, r4
    27be:	d90b      	bls.n	27d8 <mpu_configure_regions+0x94>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    27c0:	4911      	ldr	r1, [pc, #68]	; (2808 <mpu_configure_regions+0xc4>)
    27c2:	466c      	mov	r4, sp
    27c4:	b088      	sub	sp, #32
    27c6:	466b      	mov	r3, sp
    27c8:	e9c3 1205 	strd	r1, r2, [r3, #20]
    27cc:	461a      	mov	r2, r3
    27ce:	e7cf      	b.n	2770 <mpu_configure_regions+0x2c>
		return REGION_32B;
    27d0:	2408      	movs	r4, #8
    27d2:	e7f1      	b.n	27b8 <mpu_configure_regions+0x74>
		return REGION_4G;
    27d4:	243e      	movs	r4, #62	; 0x3e
    27d6:	e7ef      	b.n	27b8 <mpu_configure_regions+0x74>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    27d8:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
    27dc:	4316      	orrs	r6, r2
    27de:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    27e2:	f044 0401 	orr.w	r4, r4, #1
    27e6:	f8cc 2098 	str.w	r2, [ip, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    27ea:	f8cc 609c 	str.w	r6, [ip, #156]	; 0x9c
		reg_index++;
    27ee:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    27f0:	f8cc 40a0 	str.w	r4, [ip, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    27f4:	3501      	adds	r5, #1
    27f6:	300c      	adds	r0, #12
    27f8:	e7a9      	b.n	274e <mpu_configure_regions+0xa>
    27fa:	bf00      	nop
    27fc:	e000ed00 	.word	0xe000ed00
    2800:	00006eef 	.word	0x00006eef
    2804:	00006764 	.word	0x00006764
    2808:	00006f12 	.word	0x00006f12

0000280c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    280c:	4b04      	ldr	r3, [pc, #16]	; (2820 <arm_core_mpu_enable+0x14>)
    280e:	2205      	movs	r2, #5
    2810:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2814:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2818:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    281c:	4770      	bx	lr
    281e:	bf00      	nop
    2820:	e000ed00 	.word	0xe000ed00

00002824 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2824:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2828:	4b02      	ldr	r3, [pc, #8]	; (2834 <arm_core_mpu_disable+0x10>)
    282a:	2200      	movs	r2, #0
    282c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2830:	4770      	bx	lr
    2832:	bf00      	nop
    2834:	e000ed00 	.word	0xe000ed00

00002838 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2838:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    283a:	4c03      	ldr	r4, [pc, #12]	; (2848 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    283c:	2301      	movs	r3, #1
    283e:	7822      	ldrb	r2, [r4, #0]
    2840:	f7ff ff80 	bl	2744 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2844:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    2846:	bd10      	pop	{r4, pc}
    2848:	20000914 	.word	0x20000914

0000284c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    284c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    284e:	4a09      	ldr	r2, [pc, #36]	; (2874 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    2850:	2300      	movs	r3, #0
    2852:	7812      	ldrb	r2, [r2, #0]
    2854:	f7ff ff76 	bl	2744 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2858:	f110 0f16 	cmn.w	r0, #22
    285c:	d003      	beq.n	2866 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    285e:	4b06      	ldr	r3, [pc, #24]	; (2878 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    2860:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2862:	2807      	cmp	r0, #7
    2864:	dd00      	ble.n	2868 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2866:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    2868:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    286c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    2870:	3001      	adds	r0, #1
    2872:	e7f6      	b.n	2862 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    2874:	20000914 	.word	0x20000914
    2878:	e000ed00 	.word	0xe000ed00

0000287c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    287c:	4914      	ldr	r1, [pc, #80]	; (28d0 <z_arm_mpu_init+0x54>)
    287e:	6808      	ldr	r0, [r1, #0]
    2880:	2808      	cmp	r0, #8
{
    2882:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2884:	d821      	bhi.n	28ca <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2886:	f7ff ffcd 	bl	2824 <arm_core_mpu_disable>
    288a:	4c12      	ldr	r4, [pc, #72]	; (28d4 <z_arm_mpu_init+0x58>)
    288c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    288e:	2200      	movs	r2, #0
    2890:	4290      	cmp	r0, r2
    2892:	f101 010c 	add.w	r1, r1, #12
    2896:	d105      	bne.n	28a4 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2898:	4b0f      	ldr	r3, [pc, #60]	; (28d8 <z_arm_mpu_init+0x5c>)
    289a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    289c:	f7ff ffb6 	bl	280c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    28a0:	2000      	movs	r0, #0
}
    28a2:	bd10      	pop	{r4, pc}
    28a4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    28a8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    28ac:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    28b0:	4313      	orrs	r3, r2
    28b2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    28b6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    28ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
    28be:	f043 0301 	orr.w	r3, r3, #1
    28c2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    28c6:	3201      	adds	r2, #1
    28c8:	e7e2      	b.n	2890 <z_arm_mpu_init+0x14>
		return -1;
    28ca:	f04f 30ff 	mov.w	r0, #4294967295
    28ce:	e7e8      	b.n	28a2 <z_arm_mpu_init+0x26>
    28d0:	0000685c 	.word	0x0000685c
    28d4:	e000ed00 	.word	0xe000ed00
    28d8:	20000914 	.word	0x20000914

000028dc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    28dc:	4b01      	ldr	r3, [pc, #4]	; (28e4 <__stdout_hook_install+0x8>)
    28de:	6018      	str	r0, [r3, #0]
}
    28e0:	4770      	bx	lr
    28e2:	bf00      	nop
    28e4:	2000000c 	.word	0x2000000c

000028e8 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    28e8:	f04f 0220 	mov.w	r2, #32
    28ec:	f3ef 8311 	mrs	r3, BASEPRI
    28f0:	f382 8812 	msr	BASEPRI_MAX, r2
    28f4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    28f8:	4a04      	ldr	r2, [pc, #16]	; (290c <nordicsemi_nrf52_init+0x24>)
    28fa:	2101      	movs	r1, #1
    28fc:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    2900:	f383 8811 	msr	BASEPRI, r3
    2904:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2908:	2000      	movs	r0, #0
    290a:	4770      	bx	lr
    290c:	4001e000 	.word	0x4001e000

00002910 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    2910:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2914:	b2c0      	uxtb	r0, r0
    2916:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    291a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    291e:	4905      	ldr	r1, [pc, #20]	; (2934 <sys_arch_reboot+0x24>)
    2920:	4b05      	ldr	r3, [pc, #20]	; (2938 <sys_arch_reboot+0x28>)
    2922:	68ca      	ldr	r2, [r1, #12]
    2924:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2928:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    292a:	60cb      	str	r3, [r1, #12]
    292c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2930:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2932:	e7fd      	b.n	2930 <sys_arch_reboot+0x20>
    2934:	e000ed00 	.word	0xe000ed00
    2938:	05fa0004 	.word	0x05fa0004

0000293c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    293c:	b120      	cbz	r0, 2948 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    293e:	4b03      	ldr	r3, [pc, #12]	; (294c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2940:	0180      	lsls	r0, r0, #6
    2942:	f043 0301 	orr.w	r3, r3, #1
    2946:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2948:	4770      	bx	lr
    294a:	bf00      	nop
    294c:	000067c0 	.word	0x000067c0

00002950 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2950:	4b08      	ldr	r3, [pc, #32]	; (2974 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2952:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2954:	1ac3      	subs	r3, r0, r3
{
    2956:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2958:	4907      	ldr	r1, [pc, #28]	; (2978 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    295a:	109b      	asrs	r3, r3, #2
{
    295c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    295e:	4359      	muls	r1, r3
    2960:	4806      	ldr	r0, [pc, #24]	; (297c <onoff_stop+0x2c>)
    2962:	2240      	movs	r2, #64	; 0x40
    2964:	f003 f9bd 	bl	5ce2 <stop>
	notify(mgr, res);
    2968:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    296a:	4601      	mov	r1, r0
	notify(mgr, res);
    296c:	4620      	mov	r0, r4
}
    296e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2972:	4718      	bx	r3
    2974:	20000798 	.word	0x20000798
    2978:	b6db6db7 	.word	0xb6db6db7
    297c:	00006554 	.word	0x00006554

00002980 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2980:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2982:	4c0c      	ldr	r4, [pc, #48]	; (29b4 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2984:	4a0c      	ldr	r2, [pc, #48]	; (29b8 <onoff_start+0x38>)
    2986:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    2988:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    298a:	9300      	str	r3, [sp, #0]
{
    298c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    298e:	460b      	mov	r3, r1
    2990:	490a      	ldr	r1, [pc, #40]	; (29bc <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    2992:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2994:	4361      	muls	r1, r4
{
    2996:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2998:	4809      	ldr	r0, [pc, #36]	; (29c0 <onoff_start+0x40>)
    299a:	f003 f9cf 	bl	5d3c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    299e:	1e01      	subs	r1, r0, #0
    29a0:	da05      	bge.n	29ae <onoff_start+0x2e>
		notify(mgr, err);
    29a2:	4630      	mov	r0, r6
    29a4:	462b      	mov	r3, r5
	}
}
    29a6:	b002      	add	sp, #8
    29a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    29ac:	4718      	bx	r3
}
    29ae:	b002      	add	sp, #8
    29b0:	bd70      	pop	{r4, r5, r6, pc}
    29b2:	bf00      	nop
    29b4:	20000798 	.word	0x20000798
    29b8:	00005dab 	.word	0x00005dab
    29bc:	b6db6db7 	.word	0xb6db6db7
    29c0:	00006554 	.word	0x00006554

000029c4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    29c4:	2200      	movs	r2, #0
{
    29c6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    29c8:	2101      	movs	r1, #1
{
    29ca:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    29cc:	4610      	mov	r0, r2
    29ce:	f7ff fa23 	bl	1e18 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    29d2:	480f      	ldr	r0, [pc, #60]	; (2a10 <clk_init+0x4c>)
    29d4:	f000 ffe2 	bl	399c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    29d8:	4b0e      	ldr	r3, [pc, #56]	; (2a14 <clk_init+0x50>)
    29da:	4298      	cmp	r0, r3
    29dc:	d115      	bne.n	2a0a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    29de:	f003 fb6f 	bl	60c0 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    29e2:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    29e4:	490c      	ldr	r1, [pc, #48]	; (2a18 <clk_init+0x54>)
    29e6:	4630      	mov	r0, r6
    29e8:	f002 fd90 	bl	550c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    29ec:	2800      	cmp	r0, #0
    29ee:	db0b      	blt.n	2a08 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    29f0:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    29f2:	4909      	ldr	r1, [pc, #36]	; (2a18 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    29f4:	2501      	movs	r5, #1
    29f6:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    29f8:	f104 001c 	add.w	r0, r4, #28
    29fc:	f002 fd86 	bl	550c <onoff_manager_init>
		if (err < 0) {
    2a00:	2800      	cmp	r0, #0
    2a02:	db01      	blt.n	2a08 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2a04:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    2a06:	2000      	movs	r0, #0
}
    2a08:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2a0a:	f06f 0004 	mvn.w	r0, #4
    2a0e:	e7fb      	b.n	2a08 <clk_init+0x44>
    2a10:	00002a51 	.word	0x00002a51
    2a14:	0bad0000 	.word	0x0bad0000
    2a18:	000068ac 	.word	0x000068ac

00002a1c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2a1c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2a1e:	230c      	movs	r3, #12
    2a20:	4809      	ldr	r0, [pc, #36]	; (2a48 <clkstarted_handle.constprop.0+0x2c>)
    2a22:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    2a24:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    2a26:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2a28:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2a2c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2a2e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2a30:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2a32:	4418      	add	r0, r3
    2a34:	f003 f942 	bl	5cbc <set_on_state>
	if (callback) {
    2a38:	b12d      	cbz	r5, 2a46 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2a3a:	4632      	mov	r2, r6
    2a3c:	462b      	mov	r3, r5
    2a3e:	4803      	ldr	r0, [pc, #12]	; (2a4c <clkstarted_handle.constprop.0+0x30>)
}
    2a40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2a44:	4718      	bx	r3
}
    2a46:	bd70      	pop	{r4, r5, r6, pc}
    2a48:	20000798 	.word	0x20000798
    2a4c:	00006554 	.word	0x00006554

00002a50 <clock_event_handler>:
	switch (event) {
    2a50:	b110      	cbz	r0, 2a58 <clock_event_handler+0x8>
    2a52:	2801      	cmp	r0, #1
    2a54:	d004      	beq.n	2a60 <clock_event_handler+0x10>
    2a56:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2a58:	4b03      	ldr	r3, [pc, #12]	; (2a68 <clock_event_handler+0x18>)
    2a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2a5c:	075b      	lsls	r3, r3, #29
    2a5e:	d101      	bne.n	2a64 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2a60:	f7ff bfdc 	b.w	2a1c <clkstarted_handle.constprop.0>
}
    2a64:	4770      	bx	lr
    2a66:	bf00      	nop
    2a68:	20000798 	.word	0x20000798

00002a6c <generic_hfclk_start>:
{
    2a6c:	b508      	push	{r3, lr}
	__asm__ volatile(
    2a6e:	f04f 0320 	mov.w	r3, #32
    2a72:	f3ef 8111 	mrs	r1, BASEPRI
    2a76:	f383 8812 	msr	BASEPRI_MAX, r3
    2a7a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2a7e:	4a12      	ldr	r2, [pc, #72]	; (2ac8 <generic_hfclk_start+0x5c>)
    2a80:	6813      	ldr	r3, [r2, #0]
    2a82:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    2a86:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    2a8a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2a8c:	d00c      	beq.n	2aa8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2a8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a92:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2a96:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2a9a:	f013 0301 	ands.w	r3, r3, #1
    2a9e:	d003      	beq.n	2aa8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2aa0:	480a      	ldr	r0, [pc, #40]	; (2acc <generic_hfclk_start+0x60>)
    2aa2:	f003 f90b 	bl	5cbc <set_on_state>
			already_started = true;
    2aa6:	2301      	movs	r3, #1
	__asm__ volatile(
    2aa8:	f381 8811 	msr	BASEPRI, r1
    2aac:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2ab0:	b123      	cbz	r3, 2abc <generic_hfclk_start+0x50>
}
    2ab2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2ab6:	2000      	movs	r0, #0
    2ab8:	f7ff bfb0 	b.w	2a1c <clkstarted_handle.constprop.0>
}
    2abc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2ac0:	2001      	movs	r0, #1
    2ac2:	f003 bb0a 	b.w	60da <nrfx_clock_start>
    2ac6:	bf00      	nop
    2ac8:	200007e8 	.word	0x200007e8
    2acc:	200007d8 	.word	0x200007d8

00002ad0 <api_blocking_start>:
{
    2ad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2ad2:	2200      	movs	r2, #0
    2ad4:	2301      	movs	r3, #1
    2ad6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2ada:	4a09      	ldr	r2, [pc, #36]	; (2b00 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2adc:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2ae0:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2ae2:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2ae6:	f003 f959 	bl	5d9c <api_start>
	if (err < 0) {
    2aea:	2800      	cmp	r0, #0
    2aec:	db05      	blt.n	2afa <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    2aee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2af2:	2300      	movs	r3, #0
    2af4:	4668      	mov	r0, sp
    2af6:	f001 feb9 	bl	486c <z_impl_k_sem_take>
}
    2afa:	b005      	add	sp, #20
    2afc:	f85d fb04 	ldr.w	pc, [sp], #4
    2b00:	00005dc9 	.word	0x00005dc9

00002b04 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2b04:	4b09      	ldr	r3, [pc, #36]	; (2b2c <generic_hfclk_stop+0x28>)
    2b06:	f3bf 8f5b 	dmb	ish
    2b0a:	e853 2f00 	ldrex	r2, [r3]
    2b0e:	f022 0102 	bic.w	r1, r2, #2
    2b12:	e843 1000 	strex	r0, r1, [r3]
    2b16:	2800      	cmp	r0, #0
    2b18:	d1f7      	bne.n	2b0a <generic_hfclk_stop+0x6>
    2b1a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    2b1e:	07d3      	lsls	r3, r2, #31
    2b20:	d402      	bmi.n	2b28 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2b22:	2001      	movs	r0, #1
    2b24:	f003 bb16 	b.w	6154 <nrfx_clock_stop>
}
    2b28:	4770      	bx	lr
    2b2a:	bf00      	nop
    2b2c:	200007e8 	.word	0x200007e8

00002b30 <z_nrf_clock_control_lf_on>:
{
    2b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2b34:	4939      	ldr	r1, [pc, #228]	; (2c1c <z_nrf_clock_control_lf_on+0xec>)
    2b36:	f3bf 8f5b 	dmb	ish
    2b3a:	4607      	mov	r7, r0
    2b3c:	2201      	movs	r2, #1
    2b3e:	e851 3f00 	ldrex	r3, [r1]
    2b42:	e841 2000 	strex	r0, r2, [r1]
    2b46:	2800      	cmp	r0, #0
    2b48:	d1f9      	bne.n	2b3e <z_nrf_clock_control_lf_on+0xe>
    2b4a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2b4e:	b933      	cbnz	r3, 2b5e <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2b50:	4933      	ldr	r1, [pc, #204]	; (2c20 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    2b52:	4834      	ldr	r0, [pc, #208]	; (2c24 <z_nrf_clock_control_lf_on+0xf4>)
    2b54:	604b      	str	r3, [r1, #4]
    2b56:	60cb      	str	r3, [r1, #12]
    2b58:	608a      	str	r2, [r1, #8]
    2b5a:	f002 fcea 	bl	5532 <onoff_request>
	switch (start_mode) {
    2b5e:	1e7b      	subs	r3, r7, #1
    2b60:	2b01      	cmp	r3, #1
    2b62:	d82f      	bhi.n	2bc4 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2b64:	2f01      	cmp	r7, #1
    2b66:	d107      	bne.n	2b78 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2b68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b6c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2b70:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2b74:	2b01      	cmp	r3, #1
    2b76:	d025      	beq.n	2bc4 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2b78:	f003 fb5a 	bl	6230 <k_is_in_isr>
    2b7c:	4604      	mov	r4, r0
    2b7e:	b918      	cbnz	r0, 2b88 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    2b80:	4b29      	ldr	r3, [pc, #164]	; (2c28 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    2b82:	781b      	ldrb	r3, [r3, #0]
    2b84:	2b00      	cmp	r3, #0
    2b86:	d141      	bne.n	2c0c <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    2b88:	f04f 0320 	mov.w	r3, #32
    2b8c:	f3ef 8611 	mrs	r6, BASEPRI
    2b90:	f383 8812 	msr	BASEPRI_MAX, r3
    2b94:	f3bf 8f6f 	isb	sy
    2b98:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b9a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2c2c <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2b9e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    2ba2:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2ba6:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    2baa:	03d2      	lsls	r2, r2, #15
    2bac:	d50c      	bpl.n	2bc8 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2bae:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2bb2:	2b01      	cmp	r3, #1
    2bb4:	d001      	beq.n	2bba <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2bb6:	2f01      	cmp	r7, #1
    2bb8:	d106      	bne.n	2bc8 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    2bba:	b30c      	cbz	r4, 2c00 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    2bbc:	f386 8811 	msr	BASEPRI, r6
    2bc0:	f3bf 8f6f 	isb	sy
}
    2bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2bc8:	b1ac      	cbz	r4, 2bf6 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2bca:	4630      	mov	r0, r6
    2bcc:	f7ff f896 	bl	1cfc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2bd0:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2bd4:	2b00      	cmp	r3, #0
    2bd6:	d1e4      	bne.n	2ba2 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2bd8:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    2bdc:	2a00      	cmp	r2, #0
    2bde:	d0e0      	beq.n	2ba2 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2be0:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2be4:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    2be8:	2301      	movs	r3, #1
    2bea:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    2bee:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2bf2:	60ab      	str	r3, [r5, #8]
}
    2bf4:	e7d5      	b.n	2ba2 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    2bf6:	2100      	movs	r1, #0
    2bf8:	2021      	movs	r0, #33	; 0x21
    2bfa:	f002 f937 	bl	4e6c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2bfe:	e7e7      	b.n	2bd0 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    2c00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c04:	2202      	movs	r2, #2
    2c06:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2c0a:	e7db      	b.n	2bc4 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    2c0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c10:	2202      	movs	r2, #2
    2c12:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    2c16:	4606      	mov	r6, r0
}
    2c18:	e7bf      	b.n	2b9a <z_nrf_clock_control_lf_on+0x6a>
    2c1a:	bf00      	nop
    2c1c:	200007ec 	.word	0x200007ec
    2c20:	20000788 	.word	0x20000788
    2c24:	200007b4 	.word	0x200007b4
    2c28:	20000d25 	.word	0x20000d25
    2c2c:	e000e100 	.word	0xe000e100

00002c30 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2c30:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2c32:	4b08      	ldr	r3, [pc, #32]	; (2c54 <uart_console_init+0x24>)
    2c34:	4808      	ldr	r0, [pc, #32]	; (2c58 <uart_console_init+0x28>)
    2c36:	6018      	str	r0, [r3, #0]
    2c38:	f003 faec 	bl	6214 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    2c3c:	b138      	cbz	r0, 2c4e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    2c3e:	4807      	ldr	r0, [pc, #28]	; (2c5c <uart_console_init+0x2c>)
    2c40:	f7ff fe4c 	bl	28dc <__stdout_hook_install>
	__printk_hook_install(console_out);
    2c44:	4805      	ldr	r0, [pc, #20]	; (2c5c <uart_console_init+0x2c>)
    2c46:	f7fd fdab 	bl	7a0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2c4a:	2000      	movs	r0, #0
}
    2c4c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2c4e:	f06f 0012 	mvn.w	r0, #18
    2c52:	e7fb      	b.n	2c4c <uart_console_init+0x1c>
    2c54:	200007f0 	.word	0x200007f0
    2c58:	000065b4 	.word	0x000065b4
    2c5c:	00002c61 	.word	0x00002c61

00002c60 <console_out>:
	if ('\n' == c) {
    2c60:	280a      	cmp	r0, #10
{
    2c62:	b538      	push	{r3, r4, r5, lr}
    2c64:	4d07      	ldr	r5, [pc, #28]	; (2c84 <console_out+0x24>)
    2c66:	4604      	mov	r4, r0
	if ('\n' == c) {
    2c68:	d104      	bne.n	2c74 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    2c6a:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2c6c:	6883      	ldr	r3, [r0, #8]
    2c6e:	210d      	movs	r1, #13
    2c70:	685b      	ldr	r3, [r3, #4]
    2c72:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2c74:	6828      	ldr	r0, [r5, #0]
    2c76:	6883      	ldr	r3, [r0, #8]
    2c78:	b2e1      	uxtb	r1, r4
    2c7a:	685b      	ldr	r3, [r3, #4]
    2c7c:	4798      	blx	r3
}
    2c7e:	4620      	mov	r0, r4
    2c80:	bd38      	pop	{r3, r4, r5, pc}
    2c82:	bf00      	nop
    2c84:	200007f0 	.word	0x200007f0

00002c88 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    2c88:	b530      	push	{r4, r5, lr}
	return port->config;
    2c8a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2c8c:	7b04      	ldrb	r4, [r0, #12]
    2c8e:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    2c92:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2c96:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    2c9a:	b085      	sub	sp, #20
    2c9c:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    2ca0:	d104      	bne.n	2cac <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    2ca2:	4628      	mov	r0, r5
    2ca4:	f001 f8fa 	bl	3e9c <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    2ca8:	2000      	movs	r0, #0
    2caa:	e032      	b.n	2d12 <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    2cac:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2cb0:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2cb4:	d12f      	bne.n	2d16 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2cb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    2cba:	bf0c      	ite	eq
    2cbc:	2304      	moveq	r3, #4
    2cbe:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    2cc0:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2cc4:	6883      	ldr	r3, [r0, #8]
    2cc6:	fa23 f101 	lsr.w	r1, r3, r1
    2cca:	07c9      	lsls	r1, r1, #31
    2ccc:	d42f      	bmi.n	2d2e <gpio_nrfx_pin_interrupt_configure+0xa6>
    2cce:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    2cd2:	d12c      	bne.n	2d2e <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    2cd4:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    2cd6:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    2cd8:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    2cdc:	4a1c      	ldr	r2, [pc, #112]	; (2d50 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2cde:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    2ce2:	bf18      	it	ne
    2ce4:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2cec:	07db      	lsls	r3, r3, #31
    2cee:	d41e      	bmi.n	2d2e <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2cf0:	f10d 0407 	add.w	r4, sp, #7
    2cf4:	4621      	mov	r1, r4
    2cf6:	4628      	mov	r0, r5
    2cf8:	f001 f834 	bl	3d64 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2cfc:	4b15      	ldr	r3, [pc, #84]	; (2d54 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    2cfe:	4298      	cmp	r0, r3
    2d00:	d114      	bne.n	2d2c <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    2d02:	4620      	mov	r0, r4
    2d04:	f001 f87c 	bl	3e00 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2d08:	4b13      	ldr	r3, [pc, #76]	; (2d58 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    2d0a:	4298      	cmp	r0, r3
    2d0c:	d00e      	beq.n	2d2c <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    2d0e:	f06f 000b 	mvn.w	r0, #11
}
    2d12:	b005      	add	sp, #20
    2d14:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2d16:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    2d1a:	d005      	beq.n	2d28 <gpio_nrfx_pin_interrupt_configure+0xa0>
    2d1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    2d20:	bf0c      	ite	eq
    2d22:	2302      	moveq	r3, #2
    2d24:	2301      	movne	r3, #1
    2d26:	e7cb      	b.n	2cc0 <gpio_nrfx_pin_interrupt_configure+0x38>
    2d28:	2303      	movs	r3, #3
    2d2a:	e7c9      	b.n	2cc0 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    2d2c:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2d2e:	2300      	movs	r3, #0
    2d30:	4619      	mov	r1, r3
    2d32:	aa02      	add	r2, sp, #8
    2d34:	4628      	mov	r0, r5
    2d36:	f000 feef 	bl	3b18 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2d3a:	4b07      	ldr	r3, [pc, #28]	; (2d58 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    2d3c:	4298      	cmp	r0, r3
    2d3e:	d104      	bne.n	2d4a <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2d40:	2101      	movs	r1, #1
    2d42:	4628      	mov	r0, r5
    2d44:	f001 f862 	bl	3e0c <nrfx_gpiote_trigger_enable>
    2d48:	e7ae      	b.n	2ca8 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    2d4a:	f06f 0004 	mvn.w	r0, #4
    2d4e:	e7e0      	b.n	2d12 <gpio_nrfx_pin_interrupt_configure+0x8a>
    2d50:	50000300 	.word	0x50000300
    2d54:	0bad0004 	.word	0x0bad0004
    2d58:	0bad0000 	.word	0x0bad0000

00002d5c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2d5c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2d5e:	f001 f83f 	bl	3de0 <nrfx_gpiote_is_init>
    2d62:	4604      	mov	r4, r0
    2d64:	b968      	cbnz	r0, 2d82 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    2d66:	f001 f813 	bl	3d90 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2d6a:	4b08      	ldr	r3, [pc, #32]	; (2d8c <gpio_nrfx_init+0x30>)
    2d6c:	4298      	cmp	r0, r3
    2d6e:	d10a      	bne.n	2d86 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2d70:	4807      	ldr	r0, [pc, #28]	; (2d90 <gpio_nrfx_init+0x34>)
    2d72:	4621      	mov	r1, r4
    2d74:	f000 fff0 	bl	3d58 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2d78:	4622      	mov	r2, r4
    2d7a:	2105      	movs	r1, #5
    2d7c:	2006      	movs	r0, #6
    2d7e:	f7ff f84b 	bl	1e18 <z_arm_irq_priority_set>
		return 0;
    2d82:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2d84:	bd10      	pop	{r4, pc}
		return -EIO;
    2d86:	f06f 0004 	mvn.w	r0, #4
    2d8a:	e7fb      	b.n	2d84 <gpio_nrfx_init+0x28>
    2d8c:	0bad0000 	.word	0x0bad0000
    2d90:	00002d95 	.word	0x00002d95

00002d94 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2d94:	0942      	lsrs	r2, r0, #5
{
    2d96:	b570      	push	{r4, r5, r6, lr}
    2d98:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2d9a:	d002      	beq.n	2da2 <nrfx_gpio_handler+0xe>
    2d9c:	2a01      	cmp	r2, #1
    2d9e:	d015      	beq.n	2dcc <nrfx_gpio_handler+0x38>
}
    2da0:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2da2:	4e0b      	ldr	r6, [pc, #44]	; (2dd0 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    2da4:	6932      	ldr	r2, [r6, #16]
    2da6:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2da8:	2900      	cmp	r1, #0
    2daa:	d0f9      	beq.n	2da0 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    2dac:	f003 031f 	and.w	r3, r3, #31
    2db0:	2501      	movs	r5, #1
    2db2:	680c      	ldr	r4, [r1, #0]
    2db4:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    2db6:	688a      	ldr	r2, [r1, #8]
    2db8:	402a      	ands	r2, r5
    2dba:	d002      	beq.n	2dc2 <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2dbc:	684b      	ldr	r3, [r1, #4]
    2dbe:	4630      	mov	r0, r6
    2dc0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2dc2:	2c00      	cmp	r4, #0
    2dc4:	d0ec      	beq.n	2da0 <nrfx_gpio_handler+0xc>
    2dc6:	4621      	mov	r1, r4
    2dc8:	6824      	ldr	r4, [r4, #0]
    2dca:	e7f4      	b.n	2db6 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2dcc:	4e01      	ldr	r6, [pc, #4]	; (2dd4 <nrfx_gpio_handler+0x40>)
    2dce:	e7e9      	b.n	2da4 <nrfx_gpio_handler+0x10>
    2dd0:	0000656c 	.word	0x0000656c
    2dd4:	00006584 	.word	0x00006584

00002dd8 <gpio_nrfx_pin_configure>:
{
    2dd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    2ddc:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2dde:	7b3b      	ldrb	r3, [r7, #12]
    2de0:	f001 051f 	and.w	r5, r1, #31
{
    2de4:	b085      	sub	sp, #20
    2de6:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2de8:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    2dec:	4614      	mov	r4, r2
    2dee:	b9ca      	cbnz	r2, 2e24 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    2df0:	a902      	add	r1, sp, #8
    2df2:	4628      	mov	r0, r5
    2df4:	f000 ffb6 	bl	3d64 <nrfx_gpiote_channel_get>
    2df8:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    2dfa:	4628      	mov	r0, r5
    2dfc:	f001 f876 	bl	3eec <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2e00:	4b4a      	ldr	r3, [pc, #296]	; (2f2c <gpio_nrfx_pin_configure+0x154>)
    2e02:	4298      	cmp	r0, r3
    2e04:	d004      	beq.n	2e10 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    2e06:	f06f 0004 	mvn.w	r0, #4
}
    2e0a:	b005      	add	sp, #20
    2e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    2e10:	4284      	cmp	r4, r0
    2e12:	d105      	bne.n	2e20 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    2e14:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2e18:	f000 ffec 	bl	3df4 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2e1c:	42a0      	cmp	r0, r4
    2e1e:	d1f2      	bne.n	2e06 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2e20:	2000      	movs	r0, #0
    2e22:	e7f2      	b.n	2e0a <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2e24:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2e28:	f10d 0103 	add.w	r1, sp, #3
    2e2c:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    2e2e:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2e32:	f000 ff97 	bl	3d64 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2e36:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    2e38:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2e3a:	aa02      	add	r2, sp, #8
    2e3c:	4649      	mov	r1, r9
    2e3e:	4628      	mov	r0, r5
    2e40:	f000 fe6a 	bl	3b18 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2e44:	4b39      	ldr	r3, [pc, #228]	; (2f2c <gpio_nrfx_pin_configure+0x154>)
    2e46:	4298      	cmp	r0, r3
    2e48:	d002      	beq.n	2e50 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2e4a:	f06f 0015 	mvn.w	r0, #21
    2e4e:	e7dc      	b.n	2e0a <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    2e50:	4580      	cmp	r8, r0
    2e52:	d103      	bne.n	2e5c <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    2e54:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2e58:	f000 ffcc 	bl	3df4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2e5c:	03a3      	lsls	r3, r4, #14
    2e5e:	d551      	bpl.n	2f04 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2e60:	f240 6306 	movw	r3, #1542	; 0x606
    2e64:	4023      	ands	r3, r4
    2e66:	f240 2206 	movw	r2, #518	; 0x206
    2e6a:	4293      	cmp	r3, r2
    2e6c:	d03b      	beq.n	2ee6 <gpio_nrfx_pin_configure+0x10e>
    2e6e:	d80c      	bhi.n	2e8a <gpio_nrfx_pin_configure+0xb2>
    2e70:	2b06      	cmp	r3, #6
    2e72:	d015      	beq.n	2ea0 <gpio_nrfx_pin_configure+0xc8>
    2e74:	d804      	bhi.n	2e80 <gpio_nrfx_pin_configure+0xa8>
    2e76:	b19b      	cbz	r3, 2ea0 <gpio_nrfx_pin_configure+0xc8>
    2e78:	2b02      	cmp	r3, #2
    2e7a:	d1e6      	bne.n	2e4a <gpio_nrfx_pin_configure+0x72>
    2e7c:	2304      	movs	r3, #4
    2e7e:	e00f      	b.n	2ea0 <gpio_nrfx_pin_configure+0xc8>
    2e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2e84:	d1e1      	bne.n	2e4a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    2e86:	2301      	movs	r3, #1
    2e88:	e00a      	b.n	2ea0 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    2e8a:	f240 4202 	movw	r2, #1026	; 0x402
    2e8e:	4293      	cmp	r3, r2
    2e90:	d02b      	beq.n	2eea <gpio_nrfx_pin_configure+0x112>
    2e92:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    2e96:	d02a      	beq.n	2eee <gpio_nrfx_pin_configure+0x116>
    2e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2e9c:	d1d5      	bne.n	2e4a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    2e9e:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    2ea0:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2ea4:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    2ea8:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    2eac:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2eae:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    2eb2:	bf54      	ite	pl
    2eb4:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2eb8:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2eba:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    2ebc:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2ec0:	d517      	bpl.n	2ef2 <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2ec2:	687b      	ldr	r3, [r7, #4]
    2ec4:	2101      	movs	r1, #1
    2ec6:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    2eca:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2ece:	2200      	movs	r2, #0
    2ed0:	a901      	add	r1, sp, #4
    2ed2:	4628      	mov	r0, r5
    2ed4:	f000 fece 	bl	3c74 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2ed8:	4b14      	ldr	r3, [pc, #80]	; (2f2c <gpio_nrfx_pin_configure+0x154>)
    2eda:	4298      	cmp	r0, r3
    2edc:	bf14      	ite	ne
    2ede:	f06f 0015 	mvnne.w	r0, #21
    2ee2:	2000      	moveq	r0, #0
    2ee4:	e791      	b.n	2e0a <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    2ee6:	2307      	movs	r3, #7
    2ee8:	e7da      	b.n	2ea0 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    2eea:	2305      	movs	r3, #5
    2eec:	e7d8      	b.n	2ea0 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    2eee:	2303      	movs	r3, #3
    2ef0:	e7d6      	b.n	2ea0 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2ef2:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2ef4:	bf41      	itttt	mi
    2ef6:	687b      	ldrmi	r3, [r7, #4]
    2ef8:	2101      	movmi	r1, #1
    2efa:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    2efe:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    2f02:	e7e4      	b.n	2ece <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    2f04:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2f06:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    2f0a:	bf54      	ite	pl
    2f0c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    2f10:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2f12:	461a      	mov	r2, r3
    2f14:	a901      	add	r1, sp, #4
    2f16:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    2f18:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2f1c:	f000 fdfc 	bl	3b18 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2f20:	4b02      	ldr	r3, [pc, #8]	; (2f2c <gpio_nrfx_pin_configure+0x154>)
    2f22:	4298      	cmp	r0, r3
    2f24:	f43f af7c 	beq.w	2e20 <gpio_nrfx_pin_configure+0x48>
    2f28:	e78f      	b.n	2e4a <gpio_nrfx_pin_configure+0x72>
    2f2a:	bf00      	nop
    2f2c:	0bad0000 	.word	0x0bad0000

00002f30 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2f30:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2f32:	794b      	ldrb	r3, [r1, #5]
    2f34:	2b01      	cmp	r3, #1
    2f36:	d028      	beq.n	2f8a <uarte_nrfx_configure+0x5a>
    2f38:	2b03      	cmp	r3, #3
    2f3a:	d123      	bne.n	2f84 <uarte_nrfx_configure+0x54>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2f3c:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2f3e:	798b      	ldrb	r3, [r1, #6]
    2f40:	2b03      	cmp	r3, #3
    2f42:	d11f      	bne.n	2f84 <uarte_nrfx_configure+0x54>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2f44:	79cd      	ldrb	r5, [r1, #7]
    2f46:	b10d      	cbz	r5, 2f4c <uarte_nrfx_configure+0x1c>
    2f48:	2d01      	cmp	r5, #1
    2f4a:	d11b      	bne.n	2f84 <uarte_nrfx_configure+0x54>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2f4c:	790a      	ldrb	r2, [r1, #4]
    2f4e:	2a01      	cmp	r2, #1
    2f50:	d01d      	beq.n	2f8e <uarte_nrfx_configure+0x5e>
    2f52:	2a02      	cmp	r2, #2
    2f54:	d01f      	beq.n	2f96 <uarte_nrfx_configure+0x66>
    2f56:	b9aa      	cbnz	r2, 2f84 <uarte_nrfx_configure+0x54>
    2f58:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2f5a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2f5c:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
    2f5e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2f62:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
    2f64:	d06e      	beq.n	3044 <uarte_nrfx_configure+0x114>
    2f66:	d833      	bhi.n	2fd0 <uarte_nrfx_configure+0xa0>
    2f68:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2f6c:	d06d      	beq.n	304a <uarte_nrfx_configure+0x11a>
    2f6e:	d81c      	bhi.n	2faa <uarte_nrfx_configure+0x7a>
    2f70:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2f74:	d06b      	beq.n	304e <uarte_nrfx_configure+0x11e>
    2f76:	d810      	bhi.n	2f9a <uarte_nrfx_configure+0x6a>
    2f78:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2f7c:	d06a      	beq.n	3054 <uarte_nrfx_configure+0x124>
    2f7e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2f82:	d06a      	beq.n	305a <uarte_nrfx_configure+0x12a>
    2f84:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2f88:	e05b      	b.n	3042 <uarte_nrfx_configure+0x112>
	switch (cfg->stop_bits) {
    2f8a:	2700      	movs	r7, #0
    2f8c:	e7d7      	b.n	2f3e <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    2f8e:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2f92:	220e      	movs	r2, #14
    2f94:	e7e1      	b.n	2f5a <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    2f96:	2400      	movs	r4, #0
    2f98:	e7fb      	b.n	2f92 <uarte_nrfx_configure+0x62>
	switch (baudrate) {
    2f9a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2f9e:	d05f      	beq.n	3060 <uarte_nrfx_configure+0x130>
    2fa0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2fa4:	d1ee      	bne.n	2f84 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2fa6:	4b39      	ldr	r3, [pc, #228]	; (308c <uarte_nrfx_configure+0x15c>)
    2fa8:	e03e      	b.n	3028 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    2faa:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2fae:	d05a      	beq.n	3066 <uarte_nrfx_configure+0x136>
    2fb0:	d807      	bhi.n	2fc2 <uarte_nrfx_configure+0x92>
    2fb2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2fb6:	d058      	beq.n	306a <uarte_nrfx_configure+0x13a>
    2fb8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2fbc:	d1e2      	bne.n	2f84 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2fbe:	4b34      	ldr	r3, [pc, #208]	; (3090 <uarte_nrfx_configure+0x160>)
    2fc0:	e032      	b.n	3028 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    2fc2:	f647 2c12 	movw	ip, #31250	; 0x7a12
    2fc6:	4563      	cmp	r3, ip
    2fc8:	d1dc      	bne.n	2f84 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2fca:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2fce:	e02b      	b.n	3028 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    2fd0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2fd4:	d04b      	beq.n	306e <uarte_nrfx_configure+0x13e>
    2fd6:	d813      	bhi.n	3000 <uarte_nrfx_configure+0xd0>
    2fd8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2fdc:	d04a      	beq.n	3074 <uarte_nrfx_configure+0x144>
    2fde:	d809      	bhi.n	2ff4 <uarte_nrfx_configure+0xc4>
    2fe0:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
    2fe4:	4563      	cmp	r3, ip
    2fe6:	d047      	beq.n	3078 <uarte_nrfx_configure+0x148>
    2fe8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2fec:	d1ca      	bne.n	2f84 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2fee:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2ff2:	e019      	b.n	3028 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    2ff4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2ff8:	d1c4      	bne.n	2f84 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2ffa:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2ffe:	e013      	b.n	3028 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    3000:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3004:	d03b      	beq.n	307e <uarte_nrfx_configure+0x14e>
    3006:	d809      	bhi.n	301c <uarte_nrfx_configure+0xec>
    3008:	f8df c088 	ldr.w	ip, [pc, #136]	; 3094 <uarte_nrfx_configure+0x164>
    300c:	4563      	cmp	r3, ip
    300e:	d039      	beq.n	3084 <uarte_nrfx_configure+0x154>
    3010:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3014:	d1b6      	bne.n	2f84 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3016:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    301a:	e005      	b.n	3028 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    301c:	f8df c078 	ldr.w	ip, [pc, #120]	; 3098 <uarte_nrfx_configure+0x168>
    3020:	4563      	cmp	r3, ip
    3022:	d1af      	bne.n	2f84 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3024:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    3028:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    302a:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    302e:	1d03      	adds	r3, r0, #4
    3030:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    3032:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
    3034:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
    3036:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3038:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
    303c:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3040:	2000      	movs	r0, #0
}
    3042:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3044:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3048:	e7ee      	b.n	3028 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    304a:	4b14      	ldr	r3, [pc, #80]	; (309c <uarte_nrfx_configure+0x16c>)
    304c:	e7ec      	b.n	3028 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    304e:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3052:	e7e9      	b.n	3028 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = 0x00014000;
    3054:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3058:	e7e6      	b.n	3028 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    305a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    305e:	e7e3      	b.n	3028 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3060:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3064:	e7e0      	b.n	3028 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3066:	4b0e      	ldr	r3, [pc, #56]	; (30a0 <uarte_nrfx_configure+0x170>)
    3068:	e7de      	b.n	3028 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    306a:	4b0e      	ldr	r3, [pc, #56]	; (30a4 <uarte_nrfx_configure+0x174>)
    306c:	e7dc      	b.n	3028 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    306e:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3072:	e7d9      	b.n	3028 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3074:	4b0c      	ldr	r3, [pc, #48]	; (30a8 <uarte_nrfx_configure+0x178>)
    3076:	e7d7      	b.n	3028 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3078:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    307c:	e7d4      	b.n	3028 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    307e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3082:	e7d1      	b.n	3028 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3084:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3088:	e7ce      	b.n	3028 <uarte_nrfx_configure+0xf8>
    308a:	bf00      	nop
    308c:	0013b000 	.word	0x0013b000
    3090:	004ea000 	.word	0x004ea000
    3094:	0003d090 	.word	0x0003d090
    3098:	000f4240 	.word	0x000f4240
    309c:	00275000 	.word	0x00275000
    30a0:	0075c000 	.word	0x0075c000
    30a4:	003af000 	.word	0x003af000
    30a8:	013a9000 	.word	0x013a9000

000030ac <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    30ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    30b0:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    30b4:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    30b6:	f8d8 4000 	ldr.w	r4, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    30ba:	f8d8 900c 	ldr.w	r9, [r8, #12]
static int uarte_instance_init(const struct device *dev,
    30be:	b087      	sub	sp, #28
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    30c0:	2100      	movs	r1, #0
    30c2:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    30c6:	4607      	mov	r7, r0
	data->dev = dev;
    30c8:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    30ca:	466a      	mov	r2, sp
    30cc:	4648      	mov	r0, r9
    30ce:	f002 ff5d 	bl	5f8c <pinctrl_lookup_state>
	if (ret < 0) {
    30d2:	1e05      	subs	r5, r0, #0
    30d4:	db26      	blt.n	3124 <uarte_instance_init.constprop.0+0x78>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    30d6:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    30d8:	f8d9 2000 	ldr.w	r2, [r9]
    30dc:	7919      	ldrb	r1, [r3, #4]
    30de:	6818      	ldr	r0, [r3, #0]
    30e0:	f002 ff6c 	bl	5fbc <pinctrl_configure_pins>
	if (err < 0) {
    30e4:	1e05      	subs	r5, r0, #0
    30e6:	db1d      	blt.n	3124 <uarte_instance_init.constprop.0+0x78>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    30e8:	1d31      	adds	r1, r6, #4
    30ea:	4638      	mov	r0, r7
    30ec:	f7ff ff20 	bl	2f30 <uarte_nrfx_configure>
	if (err) {
    30f0:	4605      	mov	r5, r0
    30f2:	b9b8      	cbnz	r0, 3124 <uarte_instance_init.constprop.0+0x78>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    30f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    30f8:	0799      	lsls	r1, r3, #30
    30fa:	d52a      	bpl.n	3152 <uarte_instance_init.constprop.0+0xa6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    30fc:	f106 0012 	add.w	r0, r6, #18
    3100:	f000 ffee 	bl	40e0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3104:	4b28      	ldr	r3, [pc, #160]	; (31a8 <uarte_instance_init.constprop.0+0xfc>)
    3106:	4298      	cmp	r0, r3
    3108:	d010      	beq.n	312c <uarte_instance_init.constprop.0+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
    310a:	4b28      	ldr	r3, [pc, #160]	; (31ac <uarte_instance_init.constprop.0+0x100>)
    310c:	9305      	str	r3, [sp, #20]
    310e:	2302      	movs	r3, #2
    3110:	9304      	str	r3, [sp, #16]
    3112:	4827      	ldr	r0, [pc, #156]	; (31b0 <uarte_instance_init.constprop.0+0x104>)
    3114:	462b      	mov	r3, r5
    3116:	aa04      	add	r2, sp, #16
    3118:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
    311c:	f06f 0504 	mvn.w	r5, #4
    3120:	f002 fd29 	bl	5b76 <z_impl_z_log_msg2_static_create>

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    3124:	4628      	mov	r0, r5
    3126:	b007      	add	sp, #28
    3128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    312c:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    312e:	00c3      	lsls	r3, r0, #3
    3130:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3134:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    3138:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    313c:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    3140:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    3144:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    3148:	4a1a      	ldr	r2, [pc, #104]	; (31b4 <uarte_instance_init.constprop.0+0x108>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    314a:	2301      	movs	r3, #1
    314c:	4083      	lsls	r3, r0
    314e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3152:	2308      	movs	r3, #8
    3154:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    3158:	f898 3008 	ldrb.w	r3, [r8, #8]
    315c:	b95b      	cbnz	r3, 3176 <uarte_instance_init.constprop.0+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    315e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    3162:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    3166:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    316a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    316e:	2301      	movs	r3, #1
    3170:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3174:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3176:	f8d8 3004 	ldr.w	r3, [r8, #4]
    317a:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    317c:	bf5c      	itt	pl
    317e:	f44f 7280 	movpl.w	r2, #256	; 0x100
    3182:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3186:	06db      	lsls	r3, r3, #27
    3188:	bf44      	itt	mi
    318a:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    318e:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    3192:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    3194:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3196:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    319a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    319e:	2301      	movs	r3, #1
    31a0:	60a3      	str	r3, [r4, #8]
    31a2:	60e3      	str	r3, [r4, #12]
	return 0;
    31a4:	e7be      	b.n	3124 <uarte_instance_init.constprop.0+0x78>
    31a6:	bf00      	nop
    31a8:	0bad0000 	.word	0x0bad0000
    31ac:	00006f79 	.word	0x00006f79
    31b0:	00006784 	.word	0x00006784
    31b4:	4001f000 	.word	0x4001f000

000031b8 <uarte_nrfx_poll_out>:
{
    31b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    31ba:	6906      	ldr	r6, [r0, #16]
{
    31bc:	4605      	mov	r5, r0
    31be:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    31c0:	f003 f836 	bl	6230 <k_is_in_isr>
    31c4:	b910      	cbnz	r0, 31cc <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    31c6:	4b2c      	ldr	r3, [pc, #176]	; (3278 <uarte_nrfx_poll_out+0xc0>)
	if (isr_mode) {
    31c8:	781b      	ldrb	r3, [r3, #0]
    31ca:	b983      	cbnz	r3, 31ee <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    31cc:	f04f 0320 	mov.w	r3, #32
    31d0:	f3ef 8411 	mrs	r4, BASEPRI
    31d4:	f383 8812 	msr	BASEPRI_MAX, r3
    31d8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    31dc:	6868      	ldr	r0, [r5, #4]
    31de:	f002 fe69 	bl	5eb4 <is_tx_ready.isra.0>
    31e2:	bb28      	cbnz	r0, 3230 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    31e4:	f384 8811 	msr	BASEPRI, r4
    31e8:	f3bf 8f6f 	isb	sy
}
    31ec:	e7ee      	b.n	31cc <uarte_nrfx_poll_out+0x14>
{
    31ee:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    31f0:	6868      	ldr	r0, [r5, #4]
    31f2:	f002 fe5f 	bl	5eb4 <is_tx_ready.isra.0>
    31f6:	b970      	cbnz	r0, 3216 <uarte_nrfx_poll_out+0x5e>
    31f8:	2001      	movs	r0, #1
    31fa:	f002 ff14 	bl	6026 <nrfx_busy_wait>
    31fe:	3c01      	subs	r4, #1
    3200:	d1f6      	bne.n	31f0 <uarte_nrfx_poll_out+0x38>
    3202:	2100      	movs	r1, #0
    3204:	2021      	movs	r0, #33	; 0x21
    3206:	f001 fe31 	bl	4e6c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    320a:	e7f0      	b.n	31ee <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    320c:	f384 8811 	msr	BASEPRI, r4
    3210:	f3bf 8f6f 	isb	sy
}
    3214:	e7f5      	b.n	3202 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    3216:	f04f 0320 	mov.w	r3, #32
    321a:	f3ef 8411 	mrs	r4, BASEPRI
    321e:	f383 8812 	msr	BASEPRI_MAX, r3
    3222:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3226:	6868      	ldr	r0, [r5, #4]
    3228:	f002 fe44 	bl	5eb4 <is_tx_ready.isra.0>
    322c:	2800      	cmp	r0, #0
    322e:	d0ed      	beq.n	320c <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
    3230:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    3234:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    3236:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.MAXCNT = length;
    3238:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    323a:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    323e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3242:	2200      	movs	r2, #0
    3244:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3248:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    324c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    3250:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3254:	684a      	ldr	r2, [r1, #4]
    3256:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3258:	bf41      	itttt	mi
    325a:	2208      	movmi	r2, #8
    325c:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    3260:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    3264:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3268:	2201      	movs	r2, #1
    326a:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    326c:	f384 8811 	msr	BASEPRI, r4
    3270:	f3bf 8f6f 	isb	sy
}
    3274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3276:	bf00      	nop
    3278:	20000d25 	.word	0x20000d25

0000327c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    327c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    327e:	2301      	movs	r3, #1
    3280:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3282:	4a11      	ldr	r2, [pc, #68]	; (32c8 <compare_int_lock+0x4c>)
    3284:	f3bf 8f5b 	dmb	ish
    3288:	43dc      	mvns	r4, r3
    328a:	e852 1f00 	ldrex	r1, [r2]
    328e:	ea01 0c04 	and.w	ip, r1, r4
    3292:	e842 ce00 	strex	lr, ip, [r2]
    3296:	f1be 0f00 	cmp.w	lr, #0
    329a:	d1f6      	bne.n	328a <compare_int_lock+0xe>
    329c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    32a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    32a4:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    32a8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    32ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    32b0:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    32b4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    32b8:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    32bc:	420b      	tst	r3, r1
}
    32be:	bf14      	ite	ne
    32c0:	2001      	movne	r0, #1
    32c2:	2000      	moveq	r0, #0
    32c4:	bd10      	pop	{r4, pc}
    32c6:	bf00      	nop
    32c8:	20000810 	.word	0x20000810

000032cc <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    32cc:	4919      	ldr	r1, [pc, #100]	; (3334 <sys_clock_timeout_handler+0x68>)
{
    32ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32d0:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    32d2:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    32d6:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    32d8:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    32dc:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    32e0:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    32e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    32e6:	d222      	bcs.n	332e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    32e8:	4b13      	ldr	r3, [pc, #76]	; (3338 <sys_clock_timeout_handler+0x6c>)
    32ea:	681b      	ldr	r3, [r3, #0]
    32ec:	0a1a      	lsrs	r2, r3, #8
    32ee:	061b      	lsls	r3, r3, #24
    32f0:	195e      	adds	r6, r3, r5
    32f2:	4b12      	ldr	r3, [pc, #72]	; (333c <sys_clock_timeout_handler+0x70>)
    32f4:	f142 0700 	adc.w	r7, r2, #0
    32f8:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    32fc:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    32fe:	f001 ff05 	bl	510c <sys_clock_announce>
    return p_reg->CC[ch];
    3302:	00a3      	lsls	r3, r4, #2
    3304:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3308:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    330c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    3310:	42aa      	cmp	r2, r5
    3312:	d10b      	bne.n	332c <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    3314:	b91e      	cbnz	r6, 331e <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    3316:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    331a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    331e:	4b08      	ldr	r3, [pc, #32]	; (3340 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3320:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3324:	fa00 f404 	lsl.w	r4, r0, r4
    3328:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    332c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    332e:	2600      	movs	r6, #0
    3330:	e7e5      	b.n	32fe <sys_clock_timeout_handler+0x32>
    3332:	bf00      	nop
    3334:	200005c0 	.word	0x200005c0
    3338:	20000814 	.word	0x20000814
    333c:	200005a8 	.word	0x200005a8
    3340:	40011000 	.word	0x40011000

00003344 <compare_int_unlock>:
	if (key) {
    3344:	b319      	cbz	r1, 338e <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3346:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    334a:	2301      	movs	r3, #1
    334c:	4a10      	ldr	r2, [pc, #64]	; (3390 <compare_int_unlock+0x4c>)
    334e:	4083      	lsls	r3, r0
    3350:	e852 1f00 	ldrex	r1, [r2]
    3354:	4319      	orrs	r1, r3
    3356:	e842 1c00 	strex	ip, r1, [r2]
    335a:	f1bc 0f00 	cmp.w	ip, #0
    335e:	d1f7      	bne.n	3350 <compare_int_unlock+0xc>
    3360:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    3364:	4a0b      	ldr	r2, [pc, #44]	; (3394 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    336a:	4083      	lsls	r3, r0
    336c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3370:	4b09      	ldr	r3, [pc, #36]	; (3398 <compare_int_unlock+0x54>)
    3372:	f3bf 8f5b 	dmb	ish
    3376:	681b      	ldr	r3, [r3, #0]
    3378:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    337c:	fa23 f000 	lsr.w	r0, r3, r0
    3380:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3382:	bf42      	ittt	mi
    3384:	4b05      	ldrmi	r3, [pc, #20]	; (339c <compare_int_unlock+0x58>)
    3386:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    338a:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    338e:	4770      	bx	lr
    3390:	20000810 	.word	0x20000810
    3394:	40011000 	.word	0x40011000
    3398:	2000080c 	.word	0x2000080c
    339c:	e000e100 	.word	0xe000e100

000033a0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    33a0:	4b0d      	ldr	r3, [pc, #52]	; (33d8 <z_nrf_rtc_timer_read+0x38>)
    33a2:	6818      	ldr	r0, [r3, #0]
    33a4:	0a01      	lsrs	r1, r0, #8
    33a6:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    33a8:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    33ac:	4b0b      	ldr	r3, [pc, #44]	; (33dc <z_nrf_rtc_timer_read+0x3c>)
    33ae:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    33b2:	1818      	adds	r0, r3, r0
    33b4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    33b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    33bc:	d20a      	bcs.n	33d4 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    33be:	4b08      	ldr	r3, [pc, #32]	; (33e0 <z_nrf_rtc_timer_read+0x40>)
    33c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    33c4:	4290      	cmp	r0, r2
    33c6:	eb71 0303 	sbcs.w	r3, r1, r3
    33ca:	d203      	bcs.n	33d4 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    33cc:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    33d0:	f141 0100 	adc.w	r1, r1, #0
}
    33d4:	4770      	bx	lr
    33d6:	bf00      	nop
    33d8:	20000814 	.word	0x20000814
    33dc:	40011000 	.word	0x40011000
    33e0:	200005a8 	.word	0x200005a8

000033e4 <compare_set>:
{
    33e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33e8:	b085      	sub	sp, #20
    33ea:	4616      	mov	r6, r2
    33ec:	4698      	mov	r8, r3
    33ee:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    33f0:	f7ff ff44 	bl	327c <compare_int_lock>
    33f4:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    33f6:	f7ff ffd3 	bl	33a0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    33fa:	42b0      	cmp	r0, r6
    33fc:	eb71 0308 	sbcs.w	r3, r1, r8
    3400:	d278      	bcs.n	34f4 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    3402:	4b46      	ldr	r3, [pc, #280]	; (351c <compare_set+0x138>)
    3404:	1a30      	subs	r0, r6, r0
    3406:	eb68 0101 	sbc.w	r1, r8, r1
    340a:	4298      	cmp	r0, r3
    340c:	f171 0300 	sbcs.w	r3, r1, #0
    3410:	f080 8081 	bcs.w	3516 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    3414:	4b42      	ldr	r3, [pc, #264]	; (3520 <compare_set+0x13c>)
    3416:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    341a:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    341e:	45d8      	cmp	r8, fp
    3420:	bf08      	it	eq
    3422:	4556      	cmpeq	r6, sl
    3424:	d051      	beq.n	34ca <compare_set+0xe6>
    3426:	ea4f 0985 	mov.w	r9, r5, lsl #2
    342a:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    342e:	f105 0750 	add.w	r7, r5, #80	; 0x50
    3432:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    3436:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3438:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    343c:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3440:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    3442:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    3446:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    344a:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    344c:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3450:	4b34      	ldr	r3, [pc, #208]	; (3524 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3452:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3456:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    3458:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    345c:	1a40      	subs	r0, r0, r1
    345e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3462:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3466:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    3468:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    346c:	d107      	bne.n	347e <compare_set+0x9a>
    346e:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    3472:	2013      	movs	r0, #19
    3474:	f003 f80d 	bl	6492 <z_impl_k_busy_wait>
    3478:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    347c:	4b29      	ldr	r3, [pc, #164]	; (3524 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    347e:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    3482:	eba4 000c 	sub.w	r0, r4, ip
    3486:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    348a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    348e:	bf88      	it	hi
    3490:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3492:	2000      	movs	r0, #0
    3494:	6038      	str	r0, [r7, #0]
    3496:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    3498:	9801      	ldr	r0, [sp, #4]
    349a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    349e:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    34a2:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    34a6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    34aa:	4281      	cmp	r1, r0
    34ac:	d006      	beq.n	34bc <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    34ae:	1a20      	subs	r0, r4, r0
    34b0:	3802      	subs	r0, #2
    34b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    34b6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    34ba:	d819      	bhi.n	34f0 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    34bc:	1aa4      	subs	r4, r4, r2
    34be:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    34c2:	eb14 0a06 	adds.w	sl, r4, r6
    34c6:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    34ca:	4915      	ldr	r1, [pc, #84]	; (3520 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    34cc:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    34ce:	012b      	lsls	r3, r5, #4
    34d0:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    34d4:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    34d8:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    34da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    34dc:	6053      	str	r3, [r2, #4]
	return ret;
    34de:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    34e0:	4628      	mov	r0, r5
    34e2:	9900      	ldr	r1, [sp, #0]
    34e4:	f7ff ff2e 	bl	3344 <compare_int_unlock>
}
    34e8:	4620      	mov	r0, r4
    34ea:	b005      	add	sp, #20
    34ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    34f0:	4620      	mov	r0, r4
    34f2:	e7b1      	b.n	3458 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    34f4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    34f6:	4a0c      	ldr	r2, [pc, #48]	; (3528 <compare_set+0x144>)
    34f8:	f3bf 8f5b 	dmb	ish
    34fc:	40ab      	lsls	r3, r5
    34fe:	e852 1f00 	ldrex	r1, [r2]
    3502:	4319      	orrs	r1, r3
    3504:	e842 1000 	strex	r0, r1, [r2]
    3508:	2800      	cmp	r0, #0
    350a:	d1f8      	bne.n	34fe <compare_set+0x11a>
    350c:	f3bf 8f5b 	dmb	ish
    3510:	46b2      	mov	sl, r6
    3512:	46c3      	mov	fp, r8
    3514:	e7d9      	b.n	34ca <compare_set+0xe6>
			return -EINVAL;
    3516:	f06f 0415 	mvn.w	r4, #21
    351a:	e7e1      	b.n	34e0 <compare_set+0xfc>
    351c:	01000001 	.word	0x01000001
    3520:	200005b0 	.word	0x200005b0
    3524:	40011000 	.word	0x40011000
    3528:	2000080c 	.word	0x2000080c

0000352c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    352c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    352e:	4b19      	ldr	r3, [pc, #100]	; (3594 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    3530:	4d19      	ldr	r5, [pc, #100]	; (3598 <sys_clock_driver_init+0x6c>)
    3532:	2400      	movs	r4, #0
    3534:	f04f 30ff 	mov.w	r0, #4294967295
    3538:	f04f 31ff 	mov.w	r1, #4294967295
    353c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3540:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3544:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3548:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    354c:	4b13      	ldr	r3, [pc, #76]	; (359c <sys_clock_driver_init+0x70>)
    354e:	2602      	movs	r6, #2
    3550:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3554:	2101      	movs	r1, #1
    3556:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    355a:	2011      	movs	r0, #17
    355c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3560:	4622      	mov	r2, r4
    3562:	f7fe fc59 	bl	1e18 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3566:	2011      	movs	r0, #17
    3568:	f7fe fc38 	bl	1ddc <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    356c:	4a0c      	ldr	r2, [pc, #48]	; (35a0 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    356e:	2301      	movs	r3, #1
    3570:	60ab      	str	r3, [r5, #8]
    3572:	602b      	str	r3, [r5, #0]
    3574:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3576:	4b0b      	ldr	r3, [pc, #44]	; (35a4 <sys_clock_driver_init+0x78>)
    3578:	4a0b      	ldr	r2, [pc, #44]	; (35a8 <sys_clock_driver_init+0x7c>)
    357a:	9300      	str	r3, [sp, #0]
    357c:	9401      	str	r4, [sp, #4]
    357e:	2300      	movs	r3, #0
    3580:	4620      	mov	r0, r4
    3582:	f7ff ff2f 	bl	33e4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3586:	4630      	mov	r0, r6
    3588:	f7ff fad2 	bl	2b30 <z_nrf_clock_control_lf_on>

	return 0;
}
    358c:	4620      	mov	r0, r4
    358e:	b002      	add	sp, #8
    3590:	bd70      	pop	{r4, r5, r6, pc}
    3592:	bf00      	nop
    3594:	200005b0 	.word	0x200005b0
    3598:	40011000 	.word	0x40011000
    359c:	e000e100 	.word	0xe000e100
    35a0:	20000810 	.word	0x20000810
    35a4:	000032cd 	.word	0x000032cd
    35a8:	007fffff 	.word	0x007fffff

000035ac <rtc_nrf_isr>:
{
    35ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    35b0:	4c35      	ldr	r4, [pc, #212]	; (3688 <rtc_nrf_isr+0xdc>)
    35b2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    35b6:	079a      	lsls	r2, r3, #30
    35b8:	d50b      	bpl.n	35d2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    35ba:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    35be:	b143      	cbz	r3, 35d2 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    35c0:	4a32      	ldr	r2, [pc, #200]	; (368c <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    35c2:	2300      	movs	r3, #0
    35c4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    35c8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    35cc:	6813      	ldr	r3, [r2, #0]
    35ce:	3301      	adds	r3, #1
    35d0:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    35d2:	f04f 0320 	mov.w	r3, #32
    35d6:	f3ef 8211 	mrs	r2, BASEPRI
    35da:	f383 8812 	msr	BASEPRI_MAX, r3
    35de:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    35e2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    35e6:	03db      	lsls	r3, r3, #15
    35e8:	d512      	bpl.n	3610 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    35ea:	f3bf 8f5b 	dmb	ish
    35ee:	4b28      	ldr	r3, [pc, #160]	; (3690 <rtc_nrf_isr+0xe4>)
    35f0:	e853 1f00 	ldrex	r1, [r3]
    35f4:	f021 0001 	bic.w	r0, r1, #1
    35f8:	e843 0600 	strex	r6, r0, [r3]
    35fc:	2e00      	cmp	r6, #0
    35fe:	d1f7      	bne.n	35f0 <rtc_nrf_isr+0x44>
    3600:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3604:	2900      	cmp	r1, #0
    3606:	d136      	bne.n	3676 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3608:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    360c:	2b00      	cmp	r3, #0
    360e:	d132      	bne.n	3676 <rtc_nrf_isr+0xca>
{
    3610:	2300      	movs	r3, #0
	__asm__ volatile(
    3612:	f382 8811 	msr	BASEPRI, r2
    3616:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    361a:	b34b      	cbz	r3, 3670 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    361c:	f7ff fec0 	bl	33a0 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    3620:	f04f 0320 	mov.w	r3, #32
    3624:	f3ef 8c11 	mrs	ip, BASEPRI
    3628:	f383 8812 	msr	BASEPRI_MAX, r3
    362c:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3630:	4b18      	ldr	r3, [pc, #96]	; (3694 <rtc_nrf_isr+0xe8>)
    3632:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    3636:	42b0      	cmp	r0, r6
    3638:	eb71 0207 	sbcs.w	r2, r1, r7
    363c:	f04f 0200 	mov.w	r2, #0
    3640:	d320      	bcc.n	3684 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3642:	f04f 38ff 	mov.w	r8, #4294967295
    3646:	f04f 39ff 	mov.w	r9, #4294967295
			user_context = cc_data[chan].user_context;
    364a:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    364e:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    3652:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3658:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    365c:	f38c 8811 	msr	BASEPRI, ip
    3660:	f3bf 8f6f 	isb	sy
		if (handler) {
    3664:	b121      	cbz	r1, 3670 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    3666:	9500      	str	r5, [sp, #0]
    3668:	4632      	mov	r2, r6
    366a:	463b      	mov	r3, r7
    366c:	2000      	movs	r0, #0
    366e:	4788      	blx	r1
}
    3670:	b003      	add	sp, #12
    3672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3676:	2300      	movs	r3, #0
    3678:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    367c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3680:	2301      	movs	r3, #1
}
    3682:	e7c6      	b.n	3612 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3684:	4611      	mov	r1, r2
    3686:	e7e9      	b.n	365c <rtc_nrf_isr+0xb0>
    3688:	40011000 	.word	0x40011000
    368c:	20000814 	.word	0x20000814
    3690:	2000080c 	.word	0x2000080c
    3694:	200005b0 	.word	0x200005b0

00003698 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3698:	1c43      	adds	r3, r0, #1
{
    369a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    369c:	d021      	beq.n	36e2 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    369e:	2801      	cmp	r0, #1
    36a0:	dd21      	ble.n	36e6 <sys_clock_set_timeout+0x4e>
    36a2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    36a6:	da20      	bge.n	36ea <sys_clock_set_timeout+0x52>
    36a8:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    36aa:	f7ff fe79 	bl	33a0 <z_nrf_rtc_timer_read>
    36ae:	4b10      	ldr	r3, [pc, #64]	; (36f0 <sys_clock_set_timeout+0x58>)
    36b0:	e9d3 1300 	ldrd	r1, r3, [r3]
    36b4:	1a40      	subs	r0, r0, r1
		ticks = 0;
    36b6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    36ba:	bf28      	it	cs
    36bc:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    36be:	3001      	adds	r0, #1
    36c0:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    36c2:	480c      	ldr	r0, [pc, #48]	; (36f4 <sys_clock_set_timeout+0x5c>)
    36c4:	4282      	cmp	r2, r0
    36c6:	bf28      	it	cs
    36c8:	4602      	movcs	r2, r0
    36ca:	1852      	adds	r2, r2, r1
    36cc:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    36d0:	4909      	ldr	r1, [pc, #36]	; (36f8 <sys_clock_set_timeout+0x60>)
    36d2:	9001      	str	r0, [sp, #4]
    36d4:	9100      	str	r1, [sp, #0]
    36d6:	f143 0300 	adc.w	r3, r3, #0
    36da:	f7ff fe83 	bl	33e4 <compare_set>
}
    36de:	b002      	add	sp, #8
    36e0:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    36e2:	4804      	ldr	r0, [pc, #16]	; (36f4 <sys_clock_set_timeout+0x5c>)
    36e4:	e7e0      	b.n	36a8 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    36e6:	2400      	movs	r4, #0
    36e8:	e7df      	b.n	36aa <sys_clock_set_timeout+0x12>
    36ea:	4c02      	ldr	r4, [pc, #8]	; (36f4 <sys_clock_set_timeout+0x5c>)
    36ec:	e7dd      	b.n	36aa <sys_clock_set_timeout+0x12>
    36ee:	bf00      	nop
    36f0:	200005c0 	.word	0x200005c0
    36f4:	007fffff 	.word	0x007fffff
    36f8:	000032cd 	.word	0x000032cd

000036fc <sys_clock_elapsed>:
{
    36fc:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    36fe:	f7ff fe4f 	bl	33a0 <z_nrf_rtc_timer_read>
    3702:	4b02      	ldr	r3, [pc, #8]	; (370c <sys_clock_elapsed+0x10>)
    3704:	681b      	ldr	r3, [r3, #0]
}
    3706:	1ac0      	subs	r0, r0, r3
    3708:	bd08      	pop	{r3, pc}
    370a:	bf00      	nop
    370c:	200005c0 	.word	0x200005c0

00003710 <nrf_pin_configure.constprop.0>:
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    3710:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3714:	2b00      	cmp	r3, #0
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
    3716:	b530      	push	{r4, r5, lr}
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3718:	bf07      	ittee	eq
    371a:	4614      	moveq	r4, r2
    371c:	460d      	moveq	r5, r1
    371e:	2401      	movne	r4, #1
    3720:	2500      	movne	r5, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    3722:	f3c0 1281 	ubfx	r2, r0, #6, #2
    *p_pin = pin_number & 0x1F;
    3726:	f000 011f 	and.w	r1, r0, #31
        case 1: return NRF_P1;
    372a:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    372e:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3732:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
        case 1: return NRF_P1;
    3736:	4b06      	ldr	r3, [pc, #24]	; (3750 <nrf_pin_configure.constprop.0+0x40>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3738:	ea42 0205 	orr.w	r2, r2, r5
        case 1: return NRF_P1;
    373c:	bf08      	it	eq
    373e:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    3742:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3746:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    374a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    374e:	bd30      	pop	{r4, r5, pc}
    3750:	50000300 	.word	0x50000300

00003754 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    3754:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    3758:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    375a:	2801      	cmp	r0, #1
    375c:	4b04      	ldr	r3, [pc, #16]	; (3770 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    375e:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    3762:	bf18      	it	ne
    3764:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3768:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    376a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    376e:	4770      	bx	lr
    3770:	50000300 	.word	0x50000300

00003774 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    3774:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    3776:	f7fd fe99 	bl	14ac <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    377a:	4b07      	ldr	r3, [pc, #28]	; (3798 <k_sys_fatal_error_handler+0x24>)
    377c:	9305      	str	r3, [sp, #20]
    377e:	2302      	movs	r3, #2
    3780:	9304      	str	r3, [sp, #16]
    3782:	4806      	ldr	r0, [pc, #24]	; (379c <k_sys_fatal_error_handler+0x28>)
    3784:	2300      	movs	r3, #0
    3786:	aa04      	add	r2, sp, #16
    3788:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    378c:	f002 f9f3 	bl	5b76 <z_impl_z_log_msg2_static_create>
		sys_arch_reboot(0);
    3790:	2000      	movs	r0, #0
    3792:	f7ff f8bd 	bl	2910 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    3796:	bf00      	nop
    3798:	00006fb6 	.word	0x00006fb6
    379c:	00006754 	.word	0x00006754

000037a0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    37a0:	4a02      	ldr	r2, [pc, #8]	; (37ac <nvmc_wait+0xc>)
    37a2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    37a6:	2b00      	cmp	r3, #0
    37a8:	d0fb      	beq.n	37a2 <nvmc_wait+0x2>
}
    37aa:	4770      	bx	lr
    37ac:	4001e000 	.word	0x4001e000

000037b0 <SystemInit>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    37b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    37b4:	b510      	push	{r4, lr}
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    37b6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    37ba:	2a0d      	cmp	r2, #13
    37bc:	d155      	bne.n	386a <SystemInit+0xba>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    37be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    37c2:	2200      	movs	r2, #0
    37c4:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    37c8:	f8c1 2110 	str.w	r2, [r1, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    37cc:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    37d0:	4a48      	ldr	r2, [pc, #288]	; (38f4 <SystemInit+0x144>)
    37d2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
    37d6:	f8c2 0520 	str.w	r0, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    37da:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
    37de:	f8c2 0524 	str.w	r0, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    37e2:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    37e6:	f8c2 0528 	str.w	r0, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    37ea:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
    37ee:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    37f2:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
    37f6:	f8c2 0530 	str.w	r0, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    37fa:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
    37fe:	f8c2 0534 	str.w	r0, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    3802:	f8d3 041c 	ldr.w	r0, [r3, #1052]	; 0x41c
    3806:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    380a:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
    380e:	f8c2 0544 	str.w	r0, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    3812:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
    3816:	f8c2 0548 	str.w	r0, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    381a:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
    381e:	f8c2 054c 	str.w	r0, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    3822:	f8d3 042c 	ldr.w	r0, [r3, #1068]	; 0x42c
    3826:	f8c2 0550 	str.w	r0, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    382a:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
    382e:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    3832:	f8d3 0434 	ldr.w	r0, [r3, #1076]	; 0x434
    3836:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    383a:	f8d3 0438 	ldr.w	r0, [r3, #1080]	; 0x438
    383e:	f8c2 0564 	str.w	r0, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    3842:	f8d3 043c 	ldr.w	r0, [r3, #1084]	; 0x43c
    3846:	f8c2 0568 	str.w	r0, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    384a:	f8d3 0440 	ldr.w	r0, [r3, #1088]	; 0x440
    384e:	f8c2 056c 	str.w	r0, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    3852:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    3856:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    385a:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    385e:	07db      	lsls	r3, r3, #31
    3860:	d509      	bpl.n	3876 <SystemInit+0xc6>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    3862:	f06f 0301 	mvn.w	r3, #1
    3866:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    386a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    386e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    3872:	2b0d      	cmp	r3, #13
    3874:	d10c      	bne.n	3890 <SystemInit+0xe0>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3876:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            {
                switch(var2)
    387a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    387e:	b13b      	cbz	r3, 3890 <SystemInit+0xe0>
        #else
            if (nrf52_configuration_249())
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    3880:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3884:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    3888:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    388c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3890:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3894:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3898:	2a00      	cmp	r2, #0
    389a:	db03      	blt.n	38a4 <SystemInit+0xf4>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    389c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    38a0:	2b00      	cmp	r3, #0
    38a2:	da22      	bge.n	38ea <SystemInit+0x13a>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    38a4:	4914      	ldr	r1, [pc, #80]	; (38f8 <SystemInit+0x148>)
    38a6:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    38a8:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    38ac:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    38b0:	2412      	movs	r4, #18
    nvmc_wait();
    38b2:	f7ff ff75 	bl	37a0 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    38b6:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    38ba:	f7ff ff71 	bl	37a0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    38be:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    38c2:	f7ff ff6d 	bl	37a0 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    38c6:	2300      	movs	r3, #0
    38c8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    38cc:	f7ff ff68 	bl	37a0 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    38d0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    38d4:	4909      	ldr	r1, [pc, #36]	; (38fc <SystemInit+0x14c>)
    38d6:	4b0a      	ldr	r3, [pc, #40]	; (3900 <SystemInit+0x150>)
    38d8:	68ca      	ldr	r2, [r1, #12]
    38da:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    38de:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    38e0:	60cb      	str	r3, [r1, #12]
    38e2:	f3bf 8f4f 	dsb	sy
    __NOP();
    38e6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    38e8:	e7fd      	b.n	38e6 <SystemInit+0x136>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    38ea:	4b06      	ldr	r3, [pc, #24]	; (3904 <SystemInit+0x154>)
    38ec:	4a06      	ldr	r2, [pc, #24]	; (3908 <SystemInit+0x158>)
    38ee:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    38f0:	bd10      	pop	{r4, pc}
    38f2:	bf00      	nop
    38f4:	4000c000 	.word	0x4000c000
    38f8:	4001e000 	.word	0x4001e000
    38fc:	e000ed00 	.word	0xe000ed00
    3900:	05fa0004 	.word	0x05fa0004
    3904:	20000038 	.word	0x20000038
    3908:	03d09000 	.word	0x03d09000

0000390c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    390c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    390e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    3910:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    3912:	fab2 f382 	clz	r3, r2
    3916:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    391a:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    391c:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    391e:	d014      	beq.n	394a <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3920:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    3924:	fa05 f303 	lsl.w	r3, r5, r3
    3928:	ea22 0303 	bic.w	r3, r2, r3
    392c:	e850 6f00 	ldrex	r6, [r0]
    3930:	4296      	cmp	r6, r2
    3932:	d104      	bne.n	393e <nrfx_flag32_alloc+0x32>
    3934:	e840 3c00 	strex	ip, r3, [r0]
    3938:	f1bc 0f00 	cmp.w	ip, #0
    393c:	d1f6      	bne.n	392c <nrfx_flag32_alloc+0x20>
    393e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3942:	d1e5      	bne.n	3910 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    3944:	4802      	ldr	r0, [pc, #8]	; (3950 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    3946:	700c      	strb	r4, [r1, #0]
}
    3948:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    394a:	4802      	ldr	r0, [pc, #8]	; (3954 <nrfx_flag32_alloc+0x48>)
    394c:	e7fc      	b.n	3948 <nrfx_flag32_alloc+0x3c>
    394e:	bf00      	nop
    3950:	0bad0000 	.word	0x0bad0000
    3954:	0bad0002 	.word	0x0bad0002

00003958 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    3958:	6803      	ldr	r3, [r0, #0]
    395a:	40cb      	lsrs	r3, r1
    395c:	07db      	lsls	r3, r3, #31
{
    395e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    3960:	d415      	bmi.n	398e <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    3962:	2301      	movs	r3, #1
    3964:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    3968:	6803      	ldr	r3, [r0, #0]
    396a:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    396e:	ea41 0203 	orr.w	r2, r1, r3
    3972:	e850 4f00 	ldrex	r4, [r0]
    3976:	429c      	cmp	r4, r3
    3978:	d104      	bne.n	3984 <nrfx_flag32_free+0x2c>
    397a:	e840 2c00 	strex	ip, r2, [r0]
    397e:	f1bc 0f00 	cmp.w	ip, #0
    3982:	d1f6      	bne.n	3972 <nrfx_flag32_free+0x1a>
    3984:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3988:	d1ee      	bne.n	3968 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    398a:	4802      	ldr	r0, [pc, #8]	; (3994 <nrfx_flag32_free+0x3c>)
}
    398c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    398e:	4802      	ldr	r0, [pc, #8]	; (3998 <nrfx_flag32_free+0x40>)
    3990:	e7fc      	b.n	398c <nrfx_flag32_free+0x34>
    3992:	bf00      	nop
    3994:	0bad0000 	.word	0x0bad0000
    3998:	0bad0004 	.word	0x0bad0004

0000399c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    399c:	4b04      	ldr	r3, [pc, #16]	; (39b0 <nrfx_clock_init+0x14>)
    399e:	791a      	ldrb	r2, [r3, #4]
    39a0:	b922      	cbnz	r2, 39ac <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    39a2:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    39a4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    39a6:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    39a8:	4802      	ldr	r0, [pc, #8]	; (39b4 <nrfx_clock_init+0x18>)
    39aa:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    39ac:	4802      	ldr	r0, [pc, #8]	; (39b8 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    39ae:	4770      	bx	lr
    39b0:	20000818 	.word	0x20000818
    39b4:	0bad0000 	.word	0x0bad0000
    39b8:	0bad000c 	.word	0x0bad000c

000039bc <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    39bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    39c0:	b510      	push	{r4, lr}
    39c2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    39c6:	b152      	cbz	r2, 39de <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    39c8:	2000      	movs	r0, #0
    39ca:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    39ce:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    39d2:	2201      	movs	r2, #1
    39d4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    39d8:	4b10      	ldr	r3, [pc, #64]	; (3a1c <nrfx_power_clock_irq_handler+0x60>)
    39da:	681b      	ldr	r3, [r3, #0]
    39dc:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    39de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    39e2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    39e6:	b172      	cbz	r2, 3a06 <nrfx_power_clock_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    39e8:	2200      	movs	r2, #0
    39ea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    39ee:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    39f2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    39f6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    39fa:	0792      	lsls	r2, r2, #30
    39fc:	d104      	bne.n	3a08 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    39fe:	2201      	movs	r2, #1
    3a00:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a04:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3a06:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    3a08:	2202      	movs	r2, #2
    3a0a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3a0e:	4b03      	ldr	r3, [pc, #12]	; (3a1c <nrfx_power_clock_irq_handler+0x60>)
}
    3a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3a14:	681b      	ldr	r3, [r3, #0]
    3a16:	2001      	movs	r0, #1
    3a18:	4718      	bx	r3
    3a1a:	bf00      	nop
    3a1c:	20000818 	.word	0x20000818

00003a20 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    3a20:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    3a22:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    3a26:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    3a28:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    3a2a:	6002      	str	r2, [r0, #0]
}
    3a2c:	4802      	ldr	r0, [pc, #8]	; (3a38 <nrf_gpio_pin_port_decode+0x18>)
    3a2e:	bf18      	it	ne
    3a30:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    3a34:	4770      	bx	lr
    3a36:	bf00      	nop
    3a38:	50000300 	.word	0x50000300

00003a3c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3a3c:	4b03      	ldr	r3, [pc, #12]	; (3a4c <pin_in_use_by_te+0x10>)
    3a3e:	3008      	adds	r0, #8
    3a40:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3a44:	f3c0 1040 	ubfx	r0, r0, #5, #1
    3a48:	4770      	bx	lr
    3a4a:	bf00      	nop
    3a4c:	2000003c 	.word	0x2000003c

00003a50 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3a50:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3a52:	f100 0308 	add.w	r3, r0, #8
    3a56:	4c0c      	ldr	r4, [pc, #48]	; (3a88 <call_handler+0x38>)
    3a58:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    3a5c:	05da      	lsls	r2, r3, #23
{
    3a5e:	4605      	mov	r5, r0
    3a60:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3a62:	d507      	bpl.n	3a74 <call_handler+0x24>
    3a64:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    3a68:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    3a6c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    3a70:	6852      	ldr	r2, [r2, #4]
    3a72:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    3a74:	68a3      	ldr	r3, [r4, #8]
    3a76:	b12b      	cbz	r3, 3a84 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3a78:	68e2      	ldr	r2, [r4, #12]
    3a7a:	4631      	mov	r1, r6
    3a7c:	4628      	mov	r0, r5
    }
}
    3a7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3a82:	4718      	bx	r3
}
    3a84:	bd70      	pop	{r4, r5, r6, pc}
    3a86:	bf00      	nop
    3a88:	2000003c 	.word	0x2000003c

00003a8c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3a8c:	4a12      	ldr	r2, [pc, #72]	; (3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>)
    3a8e:	3008      	adds	r0, #8
{
    3a90:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3a92:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    3a96:	05d9      	lsls	r1, r3, #23
    3a98:	d51b      	bpl.n	3ad2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3a>
    3a9a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3a9e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3aa2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3aa6:	f102 0410 	add.w	r4, r2, #16
    3aaa:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3aac:	f834 3b02 	ldrh.w	r3, [r4], #2
    3ab0:	f413 7f80 	tst.w	r3, #256	; 0x100
    3ab4:	d003      	beq.n	3abe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x26>
    3ab6:	f3c3 2343 	ubfx	r3, r3, #9, #4
    3aba:	4299      	cmp	r1, r3
    3abc:	d009      	beq.n	3ad2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3abe:	3001      	adds	r0, #1
    3ac0:	282a      	cmp	r0, #42	; 0x2a
    3ac2:	d1f3      	bne.n	3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
        m_cb.handlers[handler_id].handler = NULL;
    3ac4:	2300      	movs	r3, #0
    3ac6:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3aca:	4804      	ldr	r0, [pc, #16]	; (3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>)
}
    3acc:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3ace:	f7ff bf43 	b.w	3958 <nrfx_flag32_free>
}
    3ad2:	bc10      	pop	{r4}
    3ad4:	4770      	bx	lr
    3ad6:	bf00      	nop
    3ad8:	2000003c 	.word	0x2000003c
    3adc:	200000a4 	.word	0x200000a4

00003ae0 <pin_handler_trigger_uninit>:
{
    3ae0:	b538      	push	{r3, r4, r5, lr}
    3ae2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    3ae4:	f7ff ffaa 	bl	3a3c <pin_in_use_by_te>
    3ae8:	4c09      	ldr	r4, [pc, #36]	; (3b10 <pin_handler_trigger_uninit+0x30>)
    3aea:	f102 0508 	add.w	r5, r2, #8
    3aee:	b140      	cbz	r0, 3b02 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3af0:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3af4:	4907      	ldr	r1, [pc, #28]	; (3b14 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    3af6:	0b5b      	lsrs	r3, r3, #13
    3af8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3afc:	2000      	movs	r0, #0
    3afe:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    3b02:	4610      	mov	r0, r2
    3b04:	f7ff ffc2 	bl	3a8c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3b08:	2300      	movs	r3, #0
    3b0a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    3b0e:	bd38      	pop	{r3, r4, r5, pc}
    3b10:	2000003c 	.word	0x2000003c
    3b14:	40006000 	.word	0x40006000

00003b18 <nrfx_gpiote_input_configure>:
{
    3b18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    3b1c:	4604      	mov	r4, r0
    3b1e:	4617      	mov	r7, r2
    3b20:	461d      	mov	r5, r3
    if (p_input_config)
    3b22:	b321      	cbz	r1, 3b6e <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3b24:	4e4e      	ldr	r6, [pc, #312]	; (3c60 <nrfx_gpiote_input_configure+0x148>)
    3b26:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3b2a:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    3b2e:	079b      	lsls	r3, r3, #30
    3b30:	d506      	bpl.n	3b40 <nrfx_gpiote_input_configure+0x28>
    3b32:	f7ff ff83 	bl	3a3c <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    3b36:	b118      	cbz	r0, 3b40 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    3b38:	484a      	ldr	r0, [pc, #296]	; (3c64 <nrfx_gpiote_input_configure+0x14c>)
}
    3b3a:	b004      	add	sp, #16
    3b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3b40:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3b42:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3b46:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    3b4a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3b4e:	f10d 020f 	add.w	r2, sp, #15
    3b52:	460b      	mov	r3, r1
    3b54:	4620      	mov	r0, r4
    3b56:	f10d 010e 	add.w	r1, sp, #14
    3b5a:	f002 fafd 	bl	6158 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3b5e:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    3b62:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3b66:	f043 0301 	orr.w	r3, r3, #1
    3b6a:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    3b6e:	b197      	cbz	r7, 3b96 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3b70:	4b3b      	ldr	r3, [pc, #236]	; (3c60 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3b72:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3b74:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3b76:	f104 0008 	add.w	r0, r4, #8
    3b7a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    3b7e:	078f      	lsls	r7, r1, #30
    3b80:	d50c      	bpl.n	3b9c <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    3b82:	2a00      	cmp	r2, #0
    3b84:	d1d8      	bne.n	3b38 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3b86:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    3b8a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3b8e:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    3b92:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    3b96:	bbcd      	cbnz	r5, 3c0c <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    3b98:	4833      	ldr	r0, [pc, #204]	; (3c68 <nrfx_gpiote_input_configure+0x150>)
    3b9a:	e7ce      	b.n	3b3a <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3b9c:	f021 0120 	bic.w	r1, r1, #32
    3ba0:	04c9      	lsls	r1, r1, #19
    3ba2:	0cc9      	lsrs	r1, r1, #19
    3ba4:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    3ba8:	2a00      	cmp	r2, #0
    3baa:	d0ec      	beq.n	3b86 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    3bac:	2e03      	cmp	r6, #3
    3bae:	d8c3      	bhi.n	3b38 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3bb0:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3bb2:	b92e      	cbnz	r6, 3bc0 <nrfx_gpiote_input_configure+0xa8>
    3bb4:	4a2d      	ldr	r2, [pc, #180]	; (3c6c <nrfx_gpiote_input_configure+0x154>)
    3bb6:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    3bba:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    3bbe:	e7e2      	b.n	3b86 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3bc0:	00ba      	lsls	r2, r7, #2
    3bc2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3bc6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3bca:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    3bce:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3bd2:	f02c 0c03 	bic.w	ip, ip, #3
    3bd6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3bda:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3bde:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    3be2:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    3be6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3bea:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    3bee:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    3bf2:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    3bf6:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    3bfa:	ea4c 0c0e 	orr.w	ip, ip, lr
    3bfe:	f041 0120 	orr.w	r1, r1, #32
    3c02:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    3c06:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    3c0a:	e7bc      	b.n	3b86 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3c0c:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    3c10:	4620      	mov	r0, r4
    3c12:	f7ff ff3b 	bl	3a8c <release_handler>
    if (!handler)
    3c16:	2e00      	cmp	r6, #0
    3c18:	d0be      	beq.n	3b98 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3c1a:	4d11      	ldr	r5, [pc, #68]	; (3c60 <nrfx_gpiote_input_configure+0x148>)
    3c1c:	682b      	ldr	r3, [r5, #0]
    3c1e:	429e      	cmp	r6, r3
    3c20:	d104      	bne.n	3c2c <nrfx_gpiote_input_configure+0x114>
    3c22:	686b      	ldr	r3, [r5, #4]
    3c24:	429f      	cmp	r7, r3
    3c26:	d101      	bne.n	3c2c <nrfx_gpiote_input_configure+0x114>
    3c28:	2200      	movs	r2, #0
    3c2a:	e00a      	b.n	3c42 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3c2c:	4810      	ldr	r0, [pc, #64]	; (3c70 <nrfx_gpiote_input_configure+0x158>)
    3c2e:	f10d 010f 	add.w	r1, sp, #15
    3c32:	f7ff fe6b 	bl	390c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3c36:	4b0c      	ldr	r3, [pc, #48]	; (3c68 <nrfx_gpiote_input_configure+0x150>)
    3c38:	4298      	cmp	r0, r3
    3c3a:	f47f af7e 	bne.w	3b3a <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    3c3e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    3c42:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    3c46:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3c4a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    3c4c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3c4e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    3c52:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    3c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3c5a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    3c5e:	e79b      	b.n	3b98 <nrfx_gpiote_input_configure+0x80>
    3c60:	2000003c 	.word	0x2000003c
    3c64:	0bad0004 	.word	0x0bad0004
    3c68:	0bad0000 	.word	0x0bad0000
    3c6c:	40006000 	.word	0x40006000
    3c70:	200000a4 	.word	0x200000a4

00003c74 <nrfx_gpiote_output_configure>:
{
    3c74:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c76:	4604      	mov	r4, r0
    3c78:	b085      	sub	sp, #20
    3c7a:	4615      	mov	r5, r2
    if (p_config)
    3c7c:	b319      	cbz	r1, 3cc6 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3c7e:	4e33      	ldr	r6, [pc, #204]	; (3d4c <nrfx_gpiote_output_configure+0xd8>)
    3c80:	f100 0708 	add.w	r7, r0, #8
    3c84:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3c88:	0793      	lsls	r3, r2, #30
    3c8a:	d403      	bmi.n	3c94 <nrfx_gpiote_output_configure+0x20>
    3c8c:	f7ff fed6 	bl	3a3c <pin_in_use_by_te>
    3c90:	2800      	cmp	r0, #0
    3c92:	d158      	bne.n	3d46 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3c94:	f012 0f1c 	tst.w	r2, #28
    3c98:	d002      	beq.n	3ca0 <nrfx_gpiote_output_configure+0x2c>
    3c9a:	784b      	ldrb	r3, [r1, #1]
    3c9c:	2b01      	cmp	r3, #1
    3c9e:	d052      	beq.n	3d46 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    3ca0:	2301      	movs	r3, #1
    3ca2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3ca6:	2300      	movs	r3, #0
    3ca8:	e9cd 1300 	strd	r1, r3, [sp]
    3cac:	1c4a      	adds	r2, r1, #1
    3cae:	1c8b      	adds	r3, r1, #2
    3cb0:	4620      	mov	r0, r4
    3cb2:	f10d 010f 	add.w	r1, sp, #15
    3cb6:	f002 fa4f 	bl	6158 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3cba:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    3cbe:	f043 0303 	orr.w	r3, r3, #3
    3cc2:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    3cc6:	b915      	cbnz	r5, 3cce <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    3cc8:	4821      	ldr	r0, [pc, #132]	; (3d50 <nrfx_gpiote_output_configure+0xdc>)
}
    3cca:	b005      	add	sp, #20
    3ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3cce:	4e1f      	ldr	r6, [pc, #124]	; (3d4c <nrfx_gpiote_output_configure+0xd8>)
    3cd0:	f104 0708 	add.w	r7, r4, #8
    3cd4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    3cd8:	0783      	lsls	r3, r0, #30
    3cda:	d534      	bpl.n	3d46 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    3cdc:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    3ce0:	4661      	mov	r1, ip
    3ce2:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3ce4:	f020 0020 	bic.w	r0, r0, #32
    3ce8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3cec:	04c0      	lsls	r0, r0, #19
    3cee:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    3cf2:	0cc0      	lsrs	r0, r0, #19
    3cf4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3cf8:	2300      	movs	r3, #0
    3cfa:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3cfe:	786a      	ldrb	r2, [r5, #1]
    3d00:	2a00      	cmp	r2, #0
    3d02:	d0e1      	beq.n	3cc8 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3d04:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3d08:	78ad      	ldrb	r5, [r5, #2]
    3d0a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    3d0e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3d12:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3d16:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    3d1a:	0223      	lsls	r3, r4, #8
    3d1c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3d20:	0412      	lsls	r2, r2, #16
    3d22:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3d26:	ea43 030e 	orr.w	r3, r3, lr
    3d2a:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3d2c:	052a      	lsls	r2, r5, #20
    3d2e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3d32:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3d36:	4313      	orrs	r3, r2
    3d38:	f040 0020 	orr.w	r0, r0, #32
    3d3c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3d40:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3d44:	e7c0      	b.n	3cc8 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    3d46:	4803      	ldr	r0, [pc, #12]	; (3d54 <nrfx_gpiote_output_configure+0xe0>)
    3d48:	e7bf      	b.n	3cca <nrfx_gpiote_output_configure+0x56>
    3d4a:	bf00      	nop
    3d4c:	2000003c 	.word	0x2000003c
    3d50:	0bad0000 	.word	0x0bad0000
    3d54:	0bad0004 	.word	0x0bad0004

00003d58 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3d58:	4b01      	ldr	r3, [pc, #4]	; (3d60 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    3d5a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    3d5e:	4770      	bx	lr
    3d60:	2000003c 	.word	0x2000003c

00003d64 <nrfx_gpiote_channel_get>:
{
    3d64:	b508      	push	{r3, lr}
    3d66:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    3d68:	f7ff fe68 	bl	3a3c <pin_in_use_by_te>
    3d6c:	b138      	cbz	r0, 3d7e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3d6e:	4b05      	ldr	r3, [pc, #20]	; (3d84 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    3d70:	4805      	ldr	r0, [pc, #20]	; (3d88 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3d72:	3208      	adds	r2, #8
    3d74:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    3d78:	0b5b      	lsrs	r3, r3, #13
    3d7a:	700b      	strb	r3, [r1, #0]
}
    3d7c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3d7e:	4803      	ldr	r0, [pc, #12]	; (3d8c <nrfx_gpiote_channel_get+0x28>)
    3d80:	e7fc      	b.n	3d7c <nrfx_gpiote_channel_get+0x18>
    3d82:	bf00      	nop
    3d84:	2000003c 	.word	0x2000003c
    3d88:	0bad0000 	.word	0x0bad0000
    3d8c:	0bad0004 	.word	0x0bad0004

00003d90 <nrfx_gpiote_init>:
{
    3d90:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3d92:	4c0f      	ldr	r4, [pc, #60]	; (3dd0 <nrfx_gpiote_init+0x40>)
    3d94:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
    3d98:	b9bd      	cbnz	r5, 3dca <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3d9a:	2254      	movs	r2, #84	; 0x54
    3d9c:	4629      	mov	r1, r5
    3d9e:	f104 0010 	add.w	r0, r4, #16
    3da2:	f001 ff64 	bl	5c6e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3da6:	2006      	movs	r0, #6
    3da8:	f7fe f818 	bl	1ddc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3dac:	4b09      	ldr	r3, [pc, #36]	; (3dd4 <nrfx_gpiote_init+0x44>)
    return err_code;
    3dae:	480a      	ldr	r0, [pc, #40]	; (3dd8 <nrfx_gpiote_init+0x48>)
    3db0:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    3db4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3db8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3dbc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3dc0:	2301      	movs	r3, #1
    3dc2:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3dc6:	66a3      	str	r3, [r4, #104]	; 0x68
}
    3dc8:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3dca:	4804      	ldr	r0, [pc, #16]	; (3ddc <nrfx_gpiote_init+0x4c>)
    3dcc:	e7fc      	b.n	3dc8 <nrfx_gpiote_init+0x38>
    3dce:	bf00      	nop
    3dd0:	2000003c 	.word	0x2000003c
    3dd4:	40006000 	.word	0x40006000
    3dd8:	0bad0000 	.word	0x0bad0000
    3ddc:	0bad0005 	.word	0x0bad0005

00003de0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3de0:	4b03      	ldr	r3, [pc, #12]	; (3df0 <nrfx_gpiote_is_init+0x10>)
    3de2:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
}
    3de6:	3800      	subs	r0, #0
    3de8:	bf18      	it	ne
    3dea:	2001      	movne	r0, #1
    3dec:	4770      	bx	lr
    3dee:	bf00      	nop
    3df0:	2000003c 	.word	0x2000003c

00003df4 <nrfx_gpiote_channel_free>:
{
    3df4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3df6:	4801      	ldr	r0, [pc, #4]	; (3dfc <nrfx_gpiote_channel_free+0x8>)
    3df8:	f7ff bdae 	b.w	3958 <nrfx_flag32_free>
    3dfc:	200000a0 	.word	0x200000a0

00003e00 <nrfx_gpiote_channel_alloc>:
{
    3e00:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3e02:	4801      	ldr	r0, [pc, #4]	; (3e08 <nrfx_gpiote_channel_alloc+0x8>)
    3e04:	f7ff bd82 	b.w	390c <nrfx_flag32_alloc>
    3e08:	200000a0 	.word	0x200000a0

00003e0c <nrfx_gpiote_trigger_enable>:
{
    3e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3e0e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3e10:	f7ff fe14 	bl	3a3c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3e14:	f104 0208 	add.w	r2, r4, #8
    3e18:	4b1e      	ldr	r3, [pc, #120]	; (3e94 <nrfx_gpiote_trigger_enable+0x88>)
    3e1a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3e1e:	b1e8      	cbz	r0, 3e5c <nrfx_gpiote_trigger_enable+0x50>
    3e20:	f013 0502 	ands.w	r5, r3, #2
    3e24:	d11a      	bne.n	3e5c <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3e26:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3e28:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    3e2a:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    3e2e:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    3e32:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3e36:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3e3a:	6005      	str	r5, [r0, #0]
    3e3c:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3e3e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3e42:	f040 0001 	orr.w	r0, r0, #1
    3e46:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    3e4a:	b129      	cbz	r1, 3e58 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3e4c:	2201      	movs	r2, #1
    3e4e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    3e52:	4a11      	ldr	r2, [pc, #68]	; (3e98 <nrfx_gpiote_trigger_enable+0x8c>)
    3e54:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3e58:	b003      	add	sp, #12
    3e5a:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3e5c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3e60:	2b04      	cmp	r3, #4
    3e62:	d012      	beq.n	3e8a <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3e64:	2b05      	cmp	r3, #5
    3e66:	d012      	beq.n	3e8e <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3e68:	a801      	add	r0, sp, #4
    3e6a:	9401      	str	r4, [sp, #4]
    3e6c:	f7ff fdd8 	bl	3a20 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3e70:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    3e72:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3e76:	40d9      	lsrs	r1, r3
    3e78:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3e7c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3e7e:	4620      	mov	r0, r4
}
    3e80:	b003      	add	sp, #12
    3e82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3e86:	f002 b9ae 	b.w	61e6 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3e8a:	2103      	movs	r1, #3
    3e8c:	e7f7      	b.n	3e7e <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3e8e:	2102      	movs	r1, #2
    3e90:	e7f5      	b.n	3e7e <nrfx_gpiote_trigger_enable+0x72>
    3e92:	bf00      	nop
    3e94:	2000003c 	.word	0x2000003c
    3e98:	40006000 	.word	0x40006000

00003e9c <nrfx_gpiote_trigger_disable>:
{
    3e9c:	b508      	push	{r3, lr}
    3e9e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3ea0:	f7ff fdcc 	bl	3a3c <pin_in_use_by_te>
    3ea4:	b1c0      	cbz	r0, 3ed8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3ea6:	f102 0108 	add.w	r1, r2, #8
    3eaa:	4b0e      	ldr	r3, [pc, #56]	; (3ee4 <nrfx_gpiote_trigger_disable+0x48>)
    3eac:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3eb0:	0799      	lsls	r1, r3, #30
    3eb2:	d411      	bmi.n	3ed8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3eb4:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3eb6:	2201      	movs	r2, #1
    3eb8:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    3eba:	009b      	lsls	r3, r3, #2
    3ebc:	490a      	ldr	r1, [pc, #40]	; (3ee8 <nrfx_gpiote_trigger_disable+0x4c>)
    3ebe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3ec2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3ec6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3eca:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3ece:	f022 0203 	bic.w	r2, r2, #3
    3ed2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    3ed6:	bd08      	pop	{r3, pc}
    3ed8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3edc:	2100      	movs	r1, #0
    3ede:	4610      	mov	r0, r2
    3ee0:	f002 b981 	b.w	61e6 <nrf_gpio_cfg_sense_set>
    3ee4:	2000003c 	.word	0x2000003c
    3ee8:	40006000 	.word	0x40006000

00003eec <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3eec:	4b0e      	ldr	r3, [pc, #56]	; (3f28 <nrfx_gpiote_pin_uninit+0x3c>)
    3eee:	f100 0208 	add.w	r2, r0, #8
{
    3ef2:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3ef4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    3ef8:	07db      	lsls	r3, r3, #31
{
    3efa:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3efc:	d511      	bpl.n	3f22 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    3efe:	f7ff ffcd 	bl	3e9c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3f02:	4620      	mov	r0, r4
    3f04:	f7ff fdec 	bl	3ae0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3f08:	a801      	add	r0, sp, #4
    3f0a:	9401      	str	r4, [sp, #4]
    3f0c:	f7ff fd88 	bl	3a20 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3f10:	9b01      	ldr	r3, [sp, #4]
    3f12:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3f16:	2202      	movs	r2, #2
    3f18:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    3f1c:	4803      	ldr	r0, [pc, #12]	; (3f2c <nrfx_gpiote_pin_uninit+0x40>)
}
    3f1e:	b002      	add	sp, #8
    3f20:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3f22:	4803      	ldr	r0, [pc, #12]	; (3f30 <nrfx_gpiote_pin_uninit+0x44>)
    3f24:	e7fb      	b.n	3f1e <nrfx_gpiote_pin_uninit+0x32>
    3f26:	bf00      	nop
    3f28:	2000003c 	.word	0x2000003c
    3f2c:	0bad0000 	.word	0x0bad0000
    3f30:	0bad0004 	.word	0x0bad0004

00003f34 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    3f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f38:	4b64      	ldr	r3, [pc, #400]	; (40cc <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    3f3a:	4865      	ldr	r0, [pc, #404]	; (40d0 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3f3c:	4965      	ldr	r1, [pc, #404]	; (40d4 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    3f3e:	2600      	movs	r6, #0
{
    3f40:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3f42:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3f44:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3f46:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3f48:	b135      	cbz	r5, 3f58 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    3f4a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    3f4e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3f50:	bf1e      	ittt	ne
    3f52:	601c      	strne	r4, [r3, #0]
    3f54:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    3f56:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3f58:	3304      	adds	r3, #4
    3f5a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    3f5c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3f60:	d1f1      	bne.n	3f46 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3f62:	f8df 816c 	ldr.w	r8, [pc, #364]	; 40d0 <nrfx_gpiote_irq_handler+0x19c>
    3f66:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3f6a:	2b00      	cmp	r3, #0
    3f6c:	f000 8091 	beq.w	4092 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    3f70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3f74:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    3f78:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    3f7a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    3f7e:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    3f82:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    3f84:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3f88:	2700      	movs	r7, #0
            while (latch[i])
    3f8a:	f10d 0910 	add.w	r9, sp, #16
    3f8e:	017b      	lsls	r3, r7, #5
    3f90:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    3f92:	f04f 0a01 	mov.w	sl, #1
    3f96:	e049      	b.n	402c <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
    3f98:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3f9a:	4a4f      	ldr	r2, [pc, #316]	; (40d8 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    3f9c:	fa94 f4a4 	rbit	r4, r4
    3fa0:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    3fa4:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3fa6:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3faa:	08e0      	lsrs	r0, r4, #3
    3fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    3fb0:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    3fb2:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3fb6:	fa0a fc02 	lsl.w	ip, sl, r2
    3fba:	f819 2000 	ldrb.w	r2, [r9, r0]
    3fbe:	ea22 020c 	bic.w	r2, r2, ip
    3fc2:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3fc6:	a803      	add	r0, sp, #12
    3fc8:	f3c3 0582 	ubfx	r5, r3, #2, #3
    3fcc:	0899      	lsrs	r1, r3, #2
    3fce:	f7ff fd27 	bl	3a20 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3fd2:	9a03      	ldr	r2, [sp, #12]
    3fd4:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
    3fd8:	074b      	lsls	r3, r1, #29
    3fda:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3fde:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    3fe0:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    3fe4:	d529      	bpl.n	403a <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
    3fe6:	4620      	mov	r0, r4
    3fe8:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3fea:	b2d5      	uxtb	r5, r2
    3fec:	f7ff fd30 	bl	3a50 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3ff0:	a803      	add	r0, sp, #12
    3ff2:	9403      	str	r4, [sp, #12]
    3ff4:	f7ff fd14 	bl	3a20 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3ff8:	9b03      	ldr	r3, [sp, #12]
    3ffa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3ffe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4002:	f3c3 4301 	ubfx	r3, r3, #16, #2
    4006:	429d      	cmp	r5, r3
    4008:	d107      	bne.n	401a <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    400a:	2100      	movs	r1, #0
    400c:	4620      	mov	r0, r4
    400e:	f002 f8ea 	bl	61e6 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    4012:	4629      	mov	r1, r5
    4014:	4620      	mov	r0, r4
    4016:	f002 f8e6 	bl	61e6 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    401a:	a803      	add	r0, sp, #12
    401c:	9403      	str	r4, [sp, #12]
    401e:	f7ff fcff 	bl	3a20 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    4022:	9b03      	ldr	r3, [sp, #12]
    4024:	fa0a f303 	lsl.w	r3, sl, r3
    4028:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    402c:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    4030:	2c00      	cmp	r4, #0
    4032:	d1b1      	bne.n	3f98 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4034:	b9cf      	cbnz	r7, 406a <nrfx_gpiote_irq_handler+0x136>
    4036:	2701      	movs	r7, #1
    4038:	e7a9      	b.n	3f8e <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    403a:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    403c:	bf0c      	ite	eq
    403e:	2103      	moveq	r1, #3
    4040:	2102      	movne	r1, #2
    4042:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4044:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4046:	f002 f8ce 	bl	61e6 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    404a:	2d03      	cmp	r5, #3
    404c:	d004      	beq.n	4058 <nrfx_gpiote_irq_handler+0x124>
    404e:	9a01      	ldr	r2, [sp, #4]
    4050:	2a02      	cmp	r2, #2
    4052:	d106      	bne.n	4062 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4054:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4056:	d1e0      	bne.n	401a <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
    4058:	4659      	mov	r1, fp
    405a:	4620      	mov	r0, r4
    405c:	f7ff fcf8 	bl	3a50 <call_handler>
    4060:	e7db      	b.n	401a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4062:	2a03      	cmp	r2, #3
    4064:	d1d9      	bne.n	401a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4066:	2d02      	cmp	r5, #2
    4068:	e7f5      	b.n	4056 <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    406a:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    406e:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    4072:	491a      	ldr	r1, [pc, #104]	; (40dc <nrfx_gpiote_irq_handler+0x1a8>)
    4074:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4078:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    407c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    407e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4082:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    4086:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    4088:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    408c:	4313      	orrs	r3, r2
    408e:	f47f af7b 	bne.w	3f88 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    4092:	2401      	movs	r4, #1
    while (mask)
    4094:	b916      	cbnz	r6, 409c <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    4096:	b007      	add	sp, #28
    4098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    409c:	fa96 f3a6 	rbit	r3, r6
    40a0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    40a4:	fa04 f203 	lsl.w	r2, r4, r3
    40a8:	009b      	lsls	r3, r3, #2
    40aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    40ae:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    40b2:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    40b6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    40ba:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    40be:	f3c0 2005 	ubfx	r0, r0, #8, #6
    40c2:	f3c1 4101 	ubfx	r1, r1, #16, #2
    40c6:	f7ff fcc3 	bl	3a50 <call_handler>
    40ca:	e7e3      	b.n	4094 <nrfx_gpiote_irq_handler+0x160>
    40cc:	40006100 	.word	0x40006100
    40d0:	40006000 	.word	0x40006000
    40d4:	40006120 	.word	0x40006120
    40d8:	2000003c 	.word	0x2000003c
    40dc:	50000300 	.word	0x50000300

000040e0 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    40e0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    40e2:	4801      	ldr	r0, [pc, #4]	; (40e8 <nrfx_ppi_channel_alloc+0x8>)
    40e4:	f7ff bc12 	b.w	390c <nrfx_flag32_alloc>
    40e8:	200000ac 	.word	0x200000ac

000040ec <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    40ec:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    40ee:	4c11      	ldr	r4, [pc, #68]	; (4134 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    40f0:	4a11      	ldr	r2, [pc, #68]	; (4138 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    40f2:	4912      	ldr	r1, [pc, #72]	; (413c <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    40f4:	2303      	movs	r3, #3
    40f6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    40f8:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    40fa:	4b11      	ldr	r3, [pc, #68]	; (4140 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    40fc:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    40fe:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    4100:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4104:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    4106:	2300      	movs	r3, #0
    4108:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    410a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    410c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    410e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    4110:	4a0c      	ldr	r2, [pc, #48]	; (4144 <_DoInit+0x58>)
    4112:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    4114:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    4116:	2210      	movs	r2, #16
    4118:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    411a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    411c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    411e:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    4120:	f001 fd80 	bl	5c24 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    4124:	4908      	ldr	r1, [pc, #32]	; (4148 <_DoInit+0x5c>)
    4126:	4620      	mov	r0, r4
    4128:	f001 fd7c 	bl	5c24 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    412c:	2320      	movs	r3, #32
    412e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    4130:	bd10      	pop	{r4, pc}
    4132:	bf00      	nop
    4134:	20000820 	.word	0x20000820
    4138:	00006fd3 	.word	0x00006fd3
    413c:	00006fdc 	.word	0x00006fdc
    4140:	20000925 	.word	0x20000925
    4144:	20000915 	.word	0x20000915
    4148:	00006fe0 	.word	0x00006fe0

0000414c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    414c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    4150:	4f23      	ldr	r7, [pc, #140]	; (41e0 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    4152:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4156:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    4158:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    415c:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    415e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    4160:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    4162:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4164:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    4166:	d834      	bhi.n	41d2 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    4168:	f8d2 a020 	ldr.w	sl, [r2, #32]
    416c:	ebaa 0905 	sub.w	r9, sl, r5
    4170:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    4174:	4294      	cmp	r4, r2
    4176:	d811      	bhi.n	419c <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4178:	f04f 0918 	mov.w	r9, #24
    417c:	fb06 9309 	mla	r3, r6, r9, r9
    4180:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    4182:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4184:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    4186:	4641      	mov	r1, r8
    4188:	4428      	add	r0, r5
    418a:	f001 fd65 	bl	5c58 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    418e:	fb09 7606 	mla	r6, r9, r6, r7
    4192:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    4194:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    4196:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    4198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    419c:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    419e:	429c      	cmp	r4, r3
    41a0:	d81b      	bhi.n	41da <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    41a2:	fb00 bb0b 	mla	fp, r0, fp, fp
    41a6:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    41a8:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    41aa:	f8db 0004 	ldr.w	r0, [fp, #4]
    41ae:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    41b0:	4428      	add	r0, r5
    41b2:	f001 fd51 	bl	5c58 <memcpy>
      if (NumBytes) {
    41b6:	ebb4 040a 	subs.w	r4, r4, sl
    41ba:	d006      	beq.n	41ca <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    41bc:	f8db 0004 	ldr.w	r0, [fp, #4]
    41c0:	4622      	mov	r2, r4
    41c2:	eb08 0109 	add.w	r1, r8, r9
    41c6:	f001 fd47 	bl	5c58 <memcpy>
      pRing->WrOff = NumBytes;
    41ca:	2018      	movs	r0, #24
    41cc:	fb00 7606 	mla	r6, r0, r6, r7
    41d0:	e7e0      	b.n	4194 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    41d2:	3b01      	subs	r3, #1
    41d4:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    41d6:	42a3      	cmp	r3, r4
    41d8:	d2ce      	bcs.n	4178 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    41da:	2000      	movs	r0, #0
    41dc:	e7dc      	b.n	4198 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    41de:	bf00      	nop
    41e0:	20000820 	.word	0x20000820

000041e4 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    41e4:	4b03      	ldr	r3, [pc, #12]	; (41f4 <SEGGER_RTT_HasDataUp+0x10>)
    41e6:	2218      	movs	r2, #24
    41e8:	fb02 3300 	mla	r3, r2, r0, r3
    41ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    41ee:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    41f0:	1a80      	subs	r0, r0, r2
    41f2:	4770      	bx	lr
    41f4:	20000820 	.word	0x20000820

000041f8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    41f8:	4b0e      	ldr	r3, [pc, #56]	; (4234 <z_sys_init_run_level+0x3c>)
{
    41fa:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    41fc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4200:	3001      	adds	r0, #1
    4202:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4206:	42a6      	cmp	r6, r4
    4208:	d800      	bhi.n	420c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    420a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    420c:	e9d4 3500 	ldrd	r3, r5, [r4]
    4210:	4628      	mov	r0, r5
    4212:	4798      	blx	r3
		if (dev != NULL) {
    4214:	b165      	cbz	r5, 4230 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    4216:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    4218:	b130      	cbz	r0, 4228 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    421a:	2800      	cmp	r0, #0
    421c:	bfb8      	it	lt
    421e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4220:	28ff      	cmp	r0, #255	; 0xff
    4222:	bfa8      	it	ge
    4224:	20ff      	movge	r0, #255	; 0xff
    4226:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4228:	785a      	ldrb	r2, [r3, #1]
    422a:	f042 0201 	orr.w	r2, r2, #1
    422e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4230:	3408      	adds	r4, #8
    4232:	e7e8      	b.n	4206 <z_sys_init_run_level+0xe>
    4234:	00006970 	.word	0x00006970

00004238 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    423c:	b086      	sub	sp, #24
    423e:	4605      	mov	r5, r0
    4240:	af00      	add	r7, sp, #0
    4242:	460e      	mov	r6, r1
	__asm__ volatile(
    4244:	f04f 0320 	mov.w	r3, #32
    4248:	f3ef 8811 	mrs	r8, BASEPRI
    424c:	f383 8812 	msr	BASEPRI_MAX, r3
    4250:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    4254:	f000 fe24 	bl	4ea0 <z_impl_z_current_get>
    4258:	2d04      	cmp	r5, #4
    425a:	bf96      	itet	ls
    425c:	4b2c      	ldrls	r3, [pc, #176]	; (4310 <z_fatal_error+0xd8>)
    425e:	4b2d      	ldrhi	r3, [pc, #180]	; (4314 <z_fatal_error+0xdc>)
    4260:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    4264:	492c      	ldr	r1, [pc, #176]	; (4318 <z_fatal_error+0xe0>)
    4266:	46e9      	mov	r9, sp
    4268:	b08a      	sub	sp, #40	; 0x28
    426a:	466a      	mov	r2, sp
    426c:	f04f 0a00 	mov.w	sl, #0
    4270:	61d3      	str	r3, [r2, #28]
    4272:	2303      	movs	r3, #3
    4274:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    4278:	4b28      	ldr	r3, [pc, #160]	; (431c <z_fatal_error+0xe4>)
    427a:	f8c2 a020 	str.w	sl, [r2, #32]
    427e:	e9c2 1505 	strd	r1, r5, [r2, #20]
    4282:	4604      	mov	r4, r0
    4284:	f842 3f10 	str.w	r3, [r2, #16]!
    4288:	4825      	ldr	r0, [pc, #148]	; (4320 <z_fatal_error+0xe8>)
    428a:	4653      	mov	r3, sl
    428c:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
    4290:	f001 fc71 	bl	5b76 <z_impl_z_log_msg2_static_create>
    4294:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    4296:	b17e      	cbz	r6, 42b8 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    4298:	69f3      	ldr	r3, [r6, #28]
    429a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    429e:	b15b      	cbz	r3, 42b8 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    42a0:	4b20      	ldr	r3, [pc, #128]	; (4324 <z_fatal_error+0xec>)
    42a2:	617b      	str	r3, [r7, #20]
    42a4:	2302      	movs	r3, #2
    42a6:	613b      	str	r3, [r7, #16]
    42a8:	481d      	ldr	r0, [pc, #116]	; (4320 <z_fatal_error+0xe8>)
    42aa:	4653      	mov	r3, sl
    42ac:	f107 0210 	add.w	r2, r7, #16
    42b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    42b4:	f001 fc5f 	bl	5b76 <z_impl_z_log_msg2_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    42b8:	b12c      	cbz	r4, 42c6 <z_fatal_error+0x8e>
    42ba:	4620      	mov	r0, r4
    42bc:	f001 ffc1 	bl	6242 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    42c0:	b108      	cbz	r0, 42c6 <z_fatal_error+0x8e>
    42c2:	7803      	ldrb	r3, [r0, #0]
    42c4:	b903      	cbnz	r3, 42c8 <z_fatal_error+0x90>
		thread_name = "unknown";
    42c6:	4818      	ldr	r0, [pc, #96]	; (4328 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    42c8:	4b18      	ldr	r3, [pc, #96]	; (432c <z_fatal_error+0xf4>)
    42ca:	46e9      	mov	r9, sp
    42cc:	b08a      	sub	sp, #40	; 0x28
    42ce:	466a      	mov	r2, sp
    42d0:	e9c2 3405 	strd	r3, r4, [r2, #20]
    42d4:	2303      	movs	r3, #3
    42d6:	f882 3020 	strb.w	r3, [r2, #32]
    42da:	4b15      	ldr	r3, [pc, #84]	; (4330 <z_fatal_error+0xf8>)
    42dc:	61d0      	str	r0, [r2, #28]
    42de:	f842 3f10 	str.w	r3, [r2, #16]!
    42e2:	2300      	movs	r3, #0
    42e4:	480e      	ldr	r0, [pc, #56]	; (4320 <z_fatal_error+0xe8>)
    42e6:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    42ea:	f001 fc44 	bl	5b76 <z_impl_z_log_msg2_static_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    42ee:	4631      	mov	r1, r6
    42f0:	46cd      	mov	sp, r9
    42f2:	4628      	mov	r0, r5
    42f4:	f7ff fa3e 	bl	3774 <k_sys_fatal_error_handler>
	__asm__ volatile(
    42f8:	f388 8811 	msr	BASEPRI, r8
    42fc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4300:	4620      	mov	r0, r4
    4302:	f7fe f9ed 	bl	26e0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4306:	3718      	adds	r7, #24
    4308:	46bd      	mov	sp, r7
    430a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    430e:	bf00      	nop
    4310:	00006988 	.word	0x00006988
    4314:	00006fe7 	.word	0x00006fe7
    4318:	00006ffd 	.word	0x00006ffd
    431c:	01000005 	.word	0x01000005
    4320:	0000676c 	.word	0x0000676c
    4324:	00007025 	.word	0x00007025
    4328:	00006ff5 	.word	0x00006ff5
    432c:	00007046 	.word	0x00007046
    4330:	01000004 	.word	0x01000004

00004334 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    4334:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    4336:	4b0a      	ldr	r3, [pc, #40]	; (4360 <bg_thread_main+0x2c>)
    4338:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    433a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    433c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    433e:	f7ff ff5b 	bl	41f8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4342:	f000 ffef 	bl	5324 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4346:	2003      	movs	r0, #3
    4348:	f7ff ff56 	bl	41f8 <z_sys_init_run_level>

	z_init_static_threads();
    434c:	f000 f93c 	bl	45c8 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    4350:	f7fc f870 	bl	434 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4354:	4a03      	ldr	r2, [pc, #12]	; (4364 <bg_thread_main+0x30>)
    4356:	7b13      	ldrb	r3, [r2, #12]
    4358:	f023 0301 	bic.w	r3, r3, #1
    435c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    435e:	bd08      	pop	{r3, pc}
    4360:	20000d25 	.word	0x20000d25
    4364:	20000648 	.word	0x20000648

00004368 <z_bss_zero>:
{
    4368:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    436a:	4803      	ldr	r0, [pc, #12]	; (4378 <z_bss_zero+0x10>)
    436c:	4a03      	ldr	r2, [pc, #12]	; (437c <z_bss_zero+0x14>)
    436e:	2100      	movs	r1, #0
    4370:	1a12      	subs	r2, r2, r0
    4372:	f001 ff59 	bl	6228 <z_early_memset>
}
    4376:	bd08      	pop	{r3, pc}
    4378:	200000f0 	.word	0x200000f0
    437c:	20000d28 	.word	0x20000d28

00004380 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    4380:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    4382:	2300      	movs	r3, #0
{
    4384:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    4386:	2201      	movs	r2, #1
    4388:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    438c:	4e13      	ldr	r6, [pc, #76]	; (43dc <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    438e:	4d14      	ldr	r5, [pc, #80]	; (43e0 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    4390:	9301      	str	r3, [sp, #4]
    4392:	220f      	movs	r2, #15
    4394:	e9cd 3202 	strd	r3, r2, [sp, #8]
    4398:	4912      	ldr	r1, [pc, #72]	; (43e4 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    439a:	2318      	movs	r3, #24
    439c:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    43a0:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    43a4:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    43a6:	f44f 70b0 	mov.w	r0, #352	; 0x160
    43aa:	fb00 1104 	mla	r1, r0, r4, r1
    43ae:	4b0e      	ldr	r3, [pc, #56]	; (43e8 <z_init_cpu+0x68>)
    43b0:	9500      	str	r5, [sp, #0]
    43b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
    43b6:	4630      	mov	r0, r6
    43b8:	f000 f8a8 	bl	450c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    43bc:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    43be:	480b      	ldr	r0, [pc, #44]	; (43ec <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    43c0:	752c      	strb	r4, [r5, #20]
    43c2:	f023 0304 	bic.w	r3, r3, #4
    43c6:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    43c8:	f44f 6302 	mov.w	r3, #2080	; 0x820
    43cc:	fb03 0404 	mla	r4, r3, r4, r0
    43d0:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    43d2:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    43d4:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    43d6:	b006      	add	sp, #24
    43d8:	bd70      	pop	{r4, r5, r6, pc}
    43da:	bf00      	nop
    43dc:	200005c8 	.word	0x200005c8
    43e0:	200008c8 	.word	0x200008c8
    43e4:	20001480 	.word	0x20001480
    43e8:	00004681 	.word	0x00004681
    43ec:	200015e0 	.word	0x200015e0

000043f0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    43f0:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    43f2:	4b2e      	ldr	r3, [pc, #184]	; (44ac <z_cstart+0xbc>)
    43f4:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    43f6:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    43fa:	4d2d      	ldr	r5, [pc, #180]	; (44b0 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    43fc:	4e2d      	ldr	r6, [pc, #180]	; (44b4 <z_cstart+0xc4>)
    43fe:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4400:	4f2d      	ldr	r7, [pc, #180]	; (44b8 <z_cstart+0xc8>)
    4402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4406:	2400      	movs	r4, #0
    4408:	616b      	str	r3, [r5, #20]
    440a:	23e0      	movs	r3, #224	; 0xe0
    440c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4410:	77ec      	strb	r4, [r5, #31]
    4412:	762c      	strb	r4, [r5, #24]
    4414:	766c      	strb	r4, [r5, #25]
    4416:	76ac      	strb	r4, [r5, #26]
    4418:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    441c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    441e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4422:	626b      	str	r3, [r5, #36]	; 0x24
    4424:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4428:	f7fe f8ce 	bl	25c8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    442c:	f7fd fc52 	bl	1cd4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4430:	f04f 33ff 	mov.w	r3, #4294967295
    4434:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4436:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4438:	f7fe fa20 	bl	287c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    443c:	f7fe f966 	bl	270c <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    4440:	f7fc ff3e 	bl	12c0 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    4444:	f240 1301 	movw	r3, #257	; 0x101
    4448:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    444c:	ab06      	add	r3, sp, #24
    444e:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    4450:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    4454:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4456:	f001 fedc 	bl	6212 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    445a:	4620      	mov	r0, r4
    445c:	f7ff fecc 	bl	41f8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4460:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    4462:	4d16      	ldr	r5, [pc, #88]	; (44bc <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4464:	f7ff fec8 	bl	41f8 <z_sys_init_run_level>
	z_sched_init();
    4468:	f000 fc6c 	bl	4d44 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    446c:	4b14      	ldr	r3, [pc, #80]	; (44c0 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
    446e:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4470:	9305      	str	r3, [sp, #20]
    4472:	2301      	movs	r3, #1
    4474:	4913      	ldr	r1, [pc, #76]	; (44c4 <z_cstart+0xd4>)
    4476:	9400      	str	r4, [sp, #0]
    4478:	e9cd 4303 	strd	r4, r3, [sp, #12]
    447c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4480:	463b      	mov	r3, r7
    4482:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4486:	4628      	mov	r0, r5
    4488:	f000 f840 	bl	450c <z_setup_new_thread>
    448c:	7b6a      	ldrb	r2, [r5, #13]
    448e:	4606      	mov	r6, r0
    4490:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    4494:	4628      	mov	r0, r5
    4496:	736a      	strb	r2, [r5, #13]
    4498:	f001 ff2e 	bl	62f8 <z_ready_thread>
	z_init_cpu(0);
    449c:	4620      	mov	r0, r4
    449e:	f7ff ff6f 	bl	4380 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    44a2:	463a      	mov	r2, r7
    44a4:	4631      	mov	r1, r6
    44a6:	4628      	mov	r0, r5
    44a8:	f7fd fd74 	bl	1f94 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    44ac:	20001e00 	.word	0x20001e00
    44b0:	e000ed00 	.word	0xe000ed00
    44b4:	200008c8 	.word	0x200008c8
    44b8:	00004335 	.word	0x00004335
    44bc:	20000648 	.word	0x20000648
    44c0:	000070a8 	.word	0x000070a8
    44c4:	20001060 	.word	0x20001060

000044c8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    44c8:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    44ca:	4b0e      	ldr	r3, [pc, #56]	; (4504 <init_mem_slab_module+0x3c>)
    44cc:	4c0e      	ldr	r4, [pc, #56]	; (4508 <init_mem_slab_module+0x40>)
    44ce:	42a3      	cmp	r3, r4
    44d0:	d301      	bcc.n	44d6 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    44d2:	2000      	movs	r0, #0
	return rc;
}
    44d4:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    44d6:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    44da:	ea41 0200 	orr.w	r2, r1, r0
    44de:	f012 0203 	ands.w	r2, r2, #3
    44e2:	d10b      	bne.n	44fc <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    44e4:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    44e6:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    44e8:	42aa      	cmp	r2, r5
    44ea:	d101      	bne.n	44f0 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    44ec:	331c      	adds	r3, #28
    44ee:	e7ee      	b.n	44ce <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    44f0:	695e      	ldr	r6, [r3, #20]
    44f2:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    44f4:	3201      	adds	r2, #1
		slab->free_list = p;
    44f6:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    44f8:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    44fa:	e7f5      	b.n	44e8 <init_mem_slab_module+0x20>
	return rc;
    44fc:	f06f 0015 	mvn.w	r0, #21
    4500:	e7e8      	b.n	44d4 <init_mem_slab_module+0xc>
    4502:	bf00      	nop
    4504:	200000cc 	.word	0x200000cc
    4508:	200000cc 	.word	0x200000cc

0000450c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    450c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    4510:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4512:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    4514:	2604      	movs	r6, #4
    4516:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    4518:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    451a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    451c:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    4520:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4522:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    4524:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4528:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    452a:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    452c:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    4530:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    4532:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    4536:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    453a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    453c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    453e:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4540:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4544:	9202      	str	r2, [sp, #8]
    4546:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4548:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    454a:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    454c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    454e:	9200      	str	r2, [sp, #0]
    4550:	4642      	mov	r2, r8
{
    4552:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4554:	f7fd fcec 	bl	1f30 <arch_new_thread>
	if (!_current) {
    4558:	4b04      	ldr	r3, [pc, #16]	; (456c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    455a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    455c:	689b      	ldr	r3, [r3, #8]
    455e:	b103      	cbz	r3, 4562 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    4560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    4562:	6723      	str	r3, [r4, #112]	; 0x70
}
    4564:	4640      	mov	r0, r8
    4566:	b004      	add	sp, #16
    4568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    456c:	200008c8 	.word	0x200008c8

00004570 <z_impl_k_thread_create>:
{
    4570:	b5f0      	push	{r4, r5, r6, r7, lr}
    4572:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4574:	2700      	movs	r7, #0
    4576:	9705      	str	r7, [sp, #20]
    4578:	9f10      	ldr	r7, [sp, #64]	; 0x40
    457a:	9704      	str	r7, [sp, #16]
    457c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    457e:	9703      	str	r7, [sp, #12]
    4580:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    4582:	9702      	str	r7, [sp, #8]
{
    4584:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4588:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    458a:	9701      	str	r7, [sp, #4]
    458c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    458e:	9700      	str	r7, [sp, #0]
{
    4590:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4592:	f7ff ffbb 	bl	450c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    4596:	f1b5 3fff 	cmp.w	r5, #4294967295
    459a:	bf08      	it	eq
    459c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    45a0:	d005      	beq.n	45ae <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    45a2:	ea55 0306 	orrs.w	r3, r5, r6
    45a6:	d105      	bne.n	45b4 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    45a8:	4620      	mov	r0, r4
    45aa:	f000 fac5 	bl	4b38 <z_sched_start>
}
    45ae:	4620      	mov	r0, r4
    45b0:	b007      	add	sp, #28
    45b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    45b4:	4903      	ldr	r1, [pc, #12]	; (45c4 <z_impl_k_thread_create+0x54>)
    45b6:	4632      	mov	r2, r6
    45b8:	462b      	mov	r3, r5
    45ba:	f104 0018 	add.w	r0, r4, #24
    45be:	f000 fd2b 	bl	5018 <z_add_timeout>
    45c2:	e7f4      	b.n	45ae <z_impl_k_thread_create+0x3e>
    45c4:	00006319 	.word	0x00006319

000045c8 <z_init_static_threads>:
{
    45c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    45cc:	4c29      	ldr	r4, [pc, #164]	; (4674 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    45ce:	4d2a      	ldr	r5, [pc, #168]	; (4678 <z_init_static_threads+0xb0>)
{
    45d0:	b087      	sub	sp, #28
    45d2:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    45d4:	42ae      	cmp	r6, r5
    45d6:	f104 0430 	add.w	r4, r4, #48	; 0x30
    45da:	d30f      	bcc.n	45fc <z_init_static_threads+0x34>
	k_sched_lock();
    45dc:	f000 f9c6 	bl	496c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    45e0:	4c24      	ldr	r4, [pc, #144]	; (4674 <z_init_static_threads+0xac>)
    45e2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 467c <z_init_static_threads+0xb4>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    45e6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    45ea:	f240 37e7 	movw	r7, #999	; 0x3e7
    45ee:	42ac      	cmp	r4, r5
    45f0:	d320      	bcc.n	4634 <z_init_static_threads+0x6c>
}
    45f2:	b007      	add	sp, #28
    45f4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    45f8:	f000 bb88 	b.w	4d0c <k_sched_unlock>
		z_setup_new_thread(
    45fc:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4600:	9305      	str	r3, [sp, #20]
    4602:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4606:	9304      	str	r3, [sp, #16]
    4608:	f854 3c14 	ldr.w	r3, [r4, #-20]
    460c:	9303      	str	r3, [sp, #12]
    460e:	f854 3c18 	ldr.w	r3, [r4, #-24]
    4612:	9302      	str	r3, [sp, #8]
    4614:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4618:	9301      	str	r3, [sp, #4]
    461a:	f854 3c20 	ldr.w	r3, [r4, #-32]
    461e:	9300      	str	r3, [sp, #0]
    4620:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    4624:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    4628:	f7ff ff70 	bl	450c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    462c:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4630:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    4632:	e7ce      	b.n	45d2 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    4634:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4636:	1c5a      	adds	r2, r3, #1
    4638:	d00d      	beq.n	4656 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    463a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    463e:	2100      	movs	r1, #0
    4640:	4638      	mov	r0, r7
    4642:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4646:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    464a:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    464e:	d104      	bne.n	465a <z_init_static_threads+0x92>
	z_sched_start(thread);
    4650:	4640      	mov	r0, r8
    4652:	f000 fa71 	bl	4b38 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    4656:	3430      	adds	r4, #48	; 0x30
    4658:	e7c9      	b.n	45ee <z_init_static_threads+0x26>
    465a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    465e:	2300      	movs	r3, #0
    4660:	f7fb fd4e 	bl	100 <__aeabi_uldivmod>
    4664:	4602      	mov	r2, r0
    4666:	460b      	mov	r3, r1
    4668:	f108 0018 	add.w	r0, r8, #24
    466c:	4649      	mov	r1, r9
    466e:	f000 fcd3 	bl	5018 <z_add_timeout>
    4672:	e7f0      	b.n	4656 <z_init_static_threads+0x8e>
    4674:	200000cc 	.word	0x200000cc
    4678:	200000cc 	.word	0x200000cc
    467c:	00006319 	.word	0x00006319

00004680 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    4680:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    4682:	4c0b      	ldr	r4, [pc, #44]	; (46b0 <idle+0x30>)
	return !z_sys_post_kernel;
    4684:	4d0b      	ldr	r5, [pc, #44]	; (46b4 <idle+0x34>)
	__asm__ volatile(
    4686:	f04f 0220 	mov.w	r2, #32
    468a:	f3ef 8311 	mrs	r3, BASEPRI
    468e:	f382 8812 	msr	BASEPRI_MAX, r2
    4692:	f3bf 8f6f 	isb	sy
    4696:	f001 fece 	bl	6436 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    469a:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    469c:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    469e:	b913      	cbnz	r3, 46a6 <idle+0x26>
	arch_cpu_idle();
    46a0:	f7fd fb1e 	bl	1ce0 <arch_cpu_idle>
}
    46a4:	e7ef      	b.n	4686 <idle+0x6>
    46a6:	f7fd fa3b 	bl	1b20 <pm_system_suspend>
    46aa:	2800      	cmp	r0, #0
    46ac:	d1eb      	bne.n	4686 <idle+0x6>
    46ae:	e7f7      	b.n	46a0 <idle+0x20>
    46b0:	200008c8 	.word	0x200008c8
    46b4:	20000d25 	.word	0x20000d25

000046b8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    46b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    46bc:	4604      	mov	r4, r0
    46be:	4617      	mov	r7, r2
    46c0:	461e      	mov	r6, r3
    46c2:	f04f 0320 	mov.w	r3, #32
    46c6:	f3ef 8811 	mrs	r8, BASEPRI
    46ca:	f383 8812 	msr	BASEPRI_MAX, r3
    46ce:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    46d2:	68c3      	ldr	r3, [r0, #12]
    46d4:	4a32      	ldr	r2, [pc, #200]	; (47a0 <z_impl_k_mutex_lock+0xe8>)
    46d6:	b16b      	cbz	r3, 46f4 <z_impl_k_mutex_lock+0x3c>
    46d8:	6880      	ldr	r0, [r0, #8]
    46da:	6891      	ldr	r1, [r2, #8]
    46dc:	4288      	cmp	r0, r1
    46de:	d019      	beq.n	4714 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    46e0:	ea57 0306 	orrs.w	r3, r7, r6
    46e4:	d118      	bne.n	4718 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    46e6:	f388 8811 	msr	BASEPRI, r8
    46ea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    46ee:	f06f 000f 	mvn.w	r0, #15
    46f2:	e00c      	b.n	470e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    46f4:	6891      	ldr	r1, [r2, #8]
    46f6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    46fa:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    46fc:	3301      	adds	r3, #1
    46fe:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    4700:	6893      	ldr	r3, [r2, #8]
    4702:	60a3      	str	r3, [r4, #8]
    4704:	f388 8811 	msr	BASEPRI, r8
    4708:	f3bf 8f6f 	isb	sy
		return 0;
    470c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    470e:	b002      	add	sp, #8
    4710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    4714:	6921      	ldr	r1, [r4, #16]
    4716:	e7f0      	b.n	46fa <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4718:	f991 100e 	ldrsb.w	r1, [r1, #14]
    471c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    4720:	4299      	cmp	r1, r3
    4722:	bfa8      	it	ge
    4724:	4619      	movge	r1, r3
    4726:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    472a:	4291      	cmp	r1, r2
    472c:	bfb8      	it	lt
    472e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4730:	428b      	cmp	r3, r1
    4732:	dd2e      	ble.n	4792 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    4734:	f001 fd8e 	bl	6254 <adjust_owner_prio.isra.0>
    4738:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    473a:	e9cd 7600 	strd	r7, r6, [sp]
    473e:	4819      	ldr	r0, [pc, #100]	; (47a4 <z_impl_k_mutex_lock+0xec>)
    4740:	4622      	mov	r2, r4
    4742:	4641      	mov	r1, r8
    4744:	f000 fa54 	bl	4bf0 <z_pend_curr>
	if (got_mutex == 0) {
    4748:	2800      	cmp	r0, #0
    474a:	d0e0      	beq.n	470e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    474c:	f04f 0320 	mov.w	r3, #32
    4750:	f3ef 8611 	mrs	r6, BASEPRI
    4754:	f383 8812 	msr	BASEPRI_MAX, r3
    4758:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    475c:	6823      	ldr	r3, [r4, #0]
    475e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4760:	429c      	cmp	r4, r3
    4762:	d00a      	beq.n	477a <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4764:	b14b      	cbz	r3, 477a <z_impl_k_mutex_lock+0xc2>
    4766:	f993 300e 	ldrsb.w	r3, [r3, #14]
    476a:	4299      	cmp	r1, r3
    476c:	bfa8      	it	ge
    476e:	4619      	movge	r1, r3
    4770:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    4774:	4299      	cmp	r1, r3
    4776:	bfb8      	it	lt
    4778:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    477a:	68a0      	ldr	r0, [r4, #8]
    477c:	f001 fd6a 	bl	6254 <adjust_owner_prio.isra.0>
    4780:	b900      	cbnz	r0, 4784 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    4782:	b145      	cbz	r5, 4796 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    4784:	4807      	ldr	r0, [pc, #28]	; (47a4 <z_impl_k_mutex_lock+0xec>)
    4786:	4631      	mov	r1, r6
    4788:	f000 f8de 	bl	4948 <z_reschedule>
	return -EAGAIN;
    478c:	f06f 000a 	mvn.w	r0, #10
    4790:	e7bd      	b.n	470e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    4792:	2500      	movs	r5, #0
    4794:	e7d1      	b.n	473a <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    4796:	f386 8811 	msr	BASEPRI, r6
    479a:	f3bf 8f6f 	isb	sy
    479e:	e7f5      	b.n	478c <z_impl_k_mutex_lock+0xd4>
    47a0:	200008c8 	.word	0x200008c8
    47a4:	20000d26 	.word	0x20000d26

000047a8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    47a8:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    47aa:	6883      	ldr	r3, [r0, #8]
{
    47ac:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    47ae:	2b00      	cmp	r3, #0
    47b0:	d032      	beq.n	4818 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    47b2:	4a1c      	ldr	r2, [pc, #112]	; (4824 <z_impl_k_mutex_unlock+0x7c>)
    47b4:	6892      	ldr	r2, [r2, #8]
    47b6:	4293      	cmp	r3, r2
    47b8:	d131      	bne.n	481e <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    47ba:	7bda      	ldrb	r2, [r3, #15]
    47bc:	3a01      	subs	r2, #1
    47be:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    47c0:	68c3      	ldr	r3, [r0, #12]
    47c2:	2b01      	cmp	r3, #1
    47c4:	d905      	bls.n	47d2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    47c6:	3b01      	subs	r3, #1
    47c8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    47ca:	f000 fa9f 	bl	4d0c <k_sched_unlock>

	return 0;
    47ce:	2000      	movs	r0, #0
}
    47d0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    47d2:	f04f 0320 	mov.w	r3, #32
    47d6:	f3ef 8511 	mrs	r5, BASEPRI
    47da:	f383 8812 	msr	BASEPRI_MAX, r3
    47de:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    47e2:	6901      	ldr	r1, [r0, #16]
    47e4:	6880      	ldr	r0, [r0, #8]
    47e6:	f001 fd35 	bl	6254 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    47ea:	4620      	mov	r0, r4
    47ec:	f001 fdf5 	bl	63da <z_unpend_first_thread>
	mutex->owner = new_owner;
    47f0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    47f2:	b158      	cbz	r0, 480c <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    47f4:	f990 200e 	ldrsb.w	r2, [r0, #14]
    47f8:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    47fa:	2200      	movs	r2, #0
    47fc:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    47fe:	f001 fd7b 	bl	62f8 <z_ready_thread>
		z_reschedule(&lock, key);
    4802:	4809      	ldr	r0, [pc, #36]	; (4828 <z_impl_k_mutex_unlock+0x80>)
    4804:	4629      	mov	r1, r5
    4806:	f000 f89f 	bl	4948 <z_reschedule>
    480a:	e7de      	b.n	47ca <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    480c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    480e:	f385 8811 	msr	BASEPRI, r5
    4812:	f3bf 8f6f 	isb	sy
    4816:	e7d8      	b.n	47ca <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    4818:	f06f 0015 	mvn.w	r0, #21
    481c:	e7d8      	b.n	47d0 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    481e:	f04f 30ff 	mov.w	r0, #4294967295
    4822:	e7d5      	b.n	47d0 <z_impl_k_mutex_unlock+0x28>
    4824:	200008c8 	.word	0x200008c8
    4828:	20000d26 	.word	0x20000d26

0000482c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    482c:	b538      	push	{r3, r4, r5, lr}
    482e:	4604      	mov	r4, r0
	__asm__ volatile(
    4830:	f04f 0320 	mov.w	r3, #32
    4834:	f3ef 8511 	mrs	r5, BASEPRI
    4838:	f383 8812 	msr	BASEPRI_MAX, r3
    483c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    4840:	f001 fdcb 	bl	63da <z_unpend_first_thread>

	if (thread != NULL) {
    4844:	b148      	cbz	r0, 485a <z_impl_k_sem_give+0x2e>
    4846:	2200      	movs	r2, #0
    4848:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    484a:	f001 fd55 	bl	62f8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    484e:	4629      	mov	r1, r5
    4850:	4805      	ldr	r0, [pc, #20]	; (4868 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    4852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    4856:	f000 b877 	b.w	4948 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    485a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    485e:	429a      	cmp	r2, r3
    4860:	bf18      	it	ne
    4862:	3301      	addne	r3, #1
    4864:	60a3      	str	r3, [r4, #8]
}
    4866:	e7f2      	b.n	484e <z_impl_k_sem_give+0x22>
    4868:	20000d26 	.word	0x20000d26

0000486c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    486c:	b513      	push	{r0, r1, r4, lr}
    486e:	f04f 0420 	mov.w	r4, #32
    4872:	f3ef 8111 	mrs	r1, BASEPRI
    4876:	f384 8812 	msr	BASEPRI_MAX, r4
    487a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    487e:	6884      	ldr	r4, [r0, #8]
    4880:	b144      	cbz	r4, 4894 <z_impl_k_sem_take+0x28>
		sem->count--;
    4882:	3c01      	subs	r4, #1
    4884:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    4886:	f381 8811 	msr	BASEPRI, r1
    488a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    488e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    4890:	b002      	add	sp, #8
    4892:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4894:	ea52 0403 	orrs.w	r4, r2, r3
    4898:	d106      	bne.n	48a8 <z_impl_k_sem_take+0x3c>
    489a:	f381 8811 	msr	BASEPRI, r1
    489e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    48a2:	f06f 000f 	mvn.w	r0, #15
    48a6:	e7f3      	b.n	4890 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    48a8:	e9cd 2300 	strd	r2, r3, [sp]
    48ac:	4602      	mov	r2, r0
    48ae:	4802      	ldr	r0, [pc, #8]	; (48b8 <z_impl_k_sem_take+0x4c>)
    48b0:	f000 f99e 	bl	4bf0 <z_pend_curr>
	return ret;
    48b4:	e7ec      	b.n	4890 <z_impl_k_sem_take+0x24>
    48b6:	bf00      	nop
    48b8:	20000d26 	.word	0x20000d26

000048bc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    48bc:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    48be:	4d07      	ldr	r5, [pc, #28]	; (48dc <z_reset_time_slice+0x20>)
    48c0:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    48c2:	b154      	cbz	r4, 48da <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    48c4:	f7fe ff1a 	bl	36fc <sys_clock_elapsed>
    48c8:	4b05      	ldr	r3, [pc, #20]	; (48e0 <z_reset_time_slice+0x24>)
    48ca:	4404      	add	r4, r0
    48cc:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    48ce:	6828      	ldr	r0, [r5, #0]
    48d0:	2100      	movs	r1, #0
	}
}
    48d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    48d6:	f001 bdbe 	b.w	6456 <z_set_timeout_expiry>
}
    48da:	bd38      	pop	{r3, r4, r5, pc}
    48dc:	200008f8 	.word	0x200008f8
    48e0:	200008c8 	.word	0x200008c8

000048e4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    48e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48e6:	4604      	mov	r4, r0
    48e8:	460d      	mov	r5, r1
	__asm__ volatile(
    48ea:	f04f 0320 	mov.w	r3, #32
    48ee:	f3ef 8711 	mrs	r7, BASEPRI
    48f2:	f383 8812 	msr	BASEPRI_MAX, r3
    48f6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    48fa:	4e10      	ldr	r6, [pc, #64]	; (493c <k_sched_time_slice_set+0x58>)
    48fc:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    48fe:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    4902:	f240 30e7 	movw	r0, #999	; 0x3e7
    4906:	6131      	str	r1, [r6, #16]
    4908:	2300      	movs	r3, #0
    490a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    490e:	fbe4 010c 	umlal	r0, r1, r4, ip
    4912:	f7fb fbf5 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4916:	2c00      	cmp	r4, #0
    4918:	4b09      	ldr	r3, [pc, #36]	; (4940 <k_sched_time_slice_set+0x5c>)
    491a:	dc0a      	bgt.n	4932 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    491c:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    491e:	4b09      	ldr	r3, [pc, #36]	; (4944 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    4920:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    4922:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    4924:	f7ff ffca 	bl	48bc <z_reset_time_slice>
	__asm__ volatile(
    4928:	f387 8811 	msr	BASEPRI, r7
    492c:	f3bf 8f6f 	isb	sy
	}
}
    4930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    4932:	2802      	cmp	r0, #2
    4934:	bfb8      	it	lt
    4936:	2002      	movlt	r0, #2
    4938:	e7f0      	b.n	491c <k_sched_time_slice_set+0x38>
    493a:	bf00      	nop
    493c:	200008c8 	.word	0x200008c8
    4940:	200008f8 	.word	0x200008f8
    4944:	200008f4 	.word	0x200008f4

00004948 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4948:	b949      	cbnz	r1, 495e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    494a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    494e:	b930      	cbnz	r0, 495e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    4950:	4b05      	ldr	r3, [pc, #20]	; (4968 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    4952:	69da      	ldr	r2, [r3, #28]
    4954:	689b      	ldr	r3, [r3, #8]
    4956:	429a      	cmp	r2, r3
    4958:	d001      	beq.n	495e <z_reschedule+0x16>
	ret = arch_swap(key);
    495a:	f7fd ba95 	b.w	1e88 <arch_swap>
    495e:	f381 8811 	msr	BASEPRI, r1
    4962:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    4966:	4770      	bx	lr
    4968:	200008c8 	.word	0x200008c8

0000496c <k_sched_lock>:
	__asm__ volatile(
    496c:	f04f 0320 	mov.w	r3, #32
    4970:	f3ef 8111 	mrs	r1, BASEPRI
    4974:	f383 8812 	msr	BASEPRI_MAX, r3
    4978:	f3bf 8f6f 	isb	sy
    497c:	4b04      	ldr	r3, [pc, #16]	; (4990 <k_sched_lock+0x24>)
    497e:	689a      	ldr	r2, [r3, #8]
    4980:	7bd3      	ldrb	r3, [r2, #15]
    4982:	3b01      	subs	r3, #1
    4984:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    4986:	f381 8811 	msr	BASEPRI, r1
    498a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    498e:	4770      	bx	lr
    4990:	200008c8 	.word	0x200008c8

00004994 <update_cache>:
{
    4994:	b538      	push	{r3, r4, r5, lr}
    4996:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    4998:	480c      	ldr	r0, [pc, #48]	; (49cc <update_cache+0x38>)
    499a:	4d0d      	ldr	r5, [pc, #52]	; (49d0 <update_cache+0x3c>)
    499c:	f001 fca6 	bl	62ec <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    49a0:	4604      	mov	r4, r0
    49a2:	b900      	cbnz	r0, 49a6 <update_cache+0x12>
    49a4:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    49a6:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    49a8:	b94a      	cbnz	r2, 49be <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    49aa:	7b5a      	ldrb	r2, [r3, #13]
    49ac:	06d2      	lsls	r2, r2, #27
    49ae:	d106      	bne.n	49be <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    49b0:	69a2      	ldr	r2, [r4, #24]
    49b2:	b922      	cbnz	r2, 49be <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    49b4:	89da      	ldrh	r2, [r3, #14]
    49b6:	2a7f      	cmp	r2, #127	; 0x7f
    49b8:	d901      	bls.n	49be <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    49ba:	61eb      	str	r3, [r5, #28]
}
    49bc:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    49be:	429c      	cmp	r4, r3
    49c0:	d002      	beq.n	49c8 <update_cache+0x34>
			z_reset_time_slice(thread);
    49c2:	4620      	mov	r0, r4
    49c4:	f7ff ff7a 	bl	48bc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    49c8:	61ec      	str	r4, [r5, #28]
}
    49ca:	e7f7      	b.n	49bc <update_cache+0x28>
    49cc:	200008e8 	.word	0x200008e8
    49d0:	200008c8 	.word	0x200008c8

000049d4 <move_thread_to_end_of_prio_q>:
{
    49d4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    49d6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    49da:	7b43      	ldrb	r3, [r0, #13]
    49dc:	2a00      	cmp	r2, #0
{
    49de:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    49e0:	da04      	bge.n	49ec <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    49e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    49e6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    49e8:	f001 fc48 	bl	627c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    49ec:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    49ee:	4a15      	ldr	r2, [pc, #84]	; (4a44 <move_thread_to_end_of_prio_q+0x70>)
    49f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    49f4:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    49f6:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    49fa:	f102 0520 	add.w	r5, r2, #32
    49fe:	42ab      	cmp	r3, r5
    4a00:	d01b      	beq.n	4a3a <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4a02:	b1d3      	cbz	r3, 4a3a <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    4a04:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    4a08:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    4a0c:	4286      	cmp	r6, r0
    4a0e:	d00f      	beq.n	4a30 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    4a10:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4a12:	2800      	cmp	r0, #0
    4a14:	dd0c      	ble.n	4a30 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    4a16:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    4a18:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    4a1c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    4a1e:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    4a20:	6890      	ldr	r0, [r2, #8]
    4a22:	1a43      	subs	r3, r0, r1
    4a24:	4258      	negs	r0, r3
}
    4a26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    4a2a:	4158      	adcs	r0, r3
    4a2c:	f7ff bfb2 	b.w	4994 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4a30:	42a3      	cmp	r3, r4
    4a32:	d002      	beq.n	4a3a <move_thread_to_end_of_prio_q+0x66>
    4a34:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4a36:	2b00      	cmp	r3, #0
    4a38:	d1e6      	bne.n	4a08 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    4a3a:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    4a3e:	6021      	str	r1, [r4, #0]
	list->tail = node;
    4a40:	6251      	str	r1, [r2, #36]	; 0x24
}
    4a42:	e7ed      	b.n	4a20 <move_thread_to_end_of_prio_q+0x4c>
    4a44:	200008c8 	.word	0x200008c8

00004a48 <z_time_slice>:
{
    4a48:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4a4a:	f04f 0320 	mov.w	r3, #32
    4a4e:	f3ef 8511 	mrs	r5, BASEPRI
    4a52:	f383 8812 	msr	BASEPRI_MAX, r3
    4a56:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    4a5a:	4b17      	ldr	r3, [pc, #92]	; (4ab8 <z_time_slice+0x70>)
    4a5c:	4a17      	ldr	r2, [pc, #92]	; (4abc <z_time_slice+0x74>)
    4a5e:	689c      	ldr	r4, [r3, #8]
    4a60:	6811      	ldr	r1, [r2, #0]
    4a62:	428c      	cmp	r4, r1
    4a64:	d107      	bne.n	4a76 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    4a66:	4620      	mov	r0, r4
    4a68:	f7ff ff28 	bl	48bc <z_reset_time_slice>
	__asm__ volatile(
    4a6c:	f385 8811 	msr	BASEPRI, r5
    4a70:	f3bf 8f6f 	isb	sy
}
    4a74:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    4a76:	2100      	movs	r1, #0
    4a78:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    4a7a:	4a11      	ldr	r2, [pc, #68]	; (4ac0 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    4a7c:	6812      	ldr	r2, [r2, #0]
    4a7e:	b1c2      	cbz	r2, 4ab2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    4a80:	89e2      	ldrh	r2, [r4, #14]
    4a82:	2a7f      	cmp	r2, #127	; 0x7f
    4a84:	d815      	bhi.n	4ab2 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    4a86:	7b62      	ldrb	r2, [r4, #13]
    4a88:	06d2      	lsls	r2, r2, #27
    4a8a:	d112      	bne.n	4ab2 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4a8c:	4a0d      	ldr	r2, [pc, #52]	; (4ac4 <z_time_slice+0x7c>)
    4a8e:	f994 100e 	ldrsb.w	r1, [r4, #14]
    4a92:	6812      	ldr	r2, [r2, #0]
    4a94:	4291      	cmp	r1, r2
    4a96:	db0c      	blt.n	4ab2 <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    4a98:	4a0b      	ldr	r2, [pc, #44]	; (4ac8 <z_time_slice+0x80>)
    4a9a:	4294      	cmp	r4, r2
    4a9c:	d009      	beq.n	4ab2 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    4a9e:	691a      	ldr	r2, [r3, #16]
    4aa0:	4282      	cmp	r2, r0
    4aa2:	dc03      	bgt.n	4aac <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    4aa4:	4620      	mov	r0, r4
    4aa6:	f7ff ff95 	bl	49d4 <move_thread_to_end_of_prio_q>
    4aaa:	e7dc      	b.n	4a66 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    4aac:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    4aae:	611a      	str	r2, [r3, #16]
    4ab0:	e7dc      	b.n	4a6c <z_time_slice+0x24>
    4ab2:	2200      	movs	r2, #0
    4ab4:	e7fb      	b.n	4aae <z_time_slice+0x66>
    4ab6:	bf00      	nop
    4ab8:	200008c8 	.word	0x200008c8
    4abc:	200008f0 	.word	0x200008f0
    4ac0:	200008f8 	.word	0x200008f8
    4ac4:	200008f4 	.word	0x200008f4
    4ac8:	200005c8 	.word	0x200005c8

00004acc <ready_thread>:
{
    4acc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4ace:	f990 200d 	ldrsb.w	r2, [r0, #13]
    4ad2:	7b43      	ldrb	r3, [r0, #13]
    4ad4:	2a00      	cmp	r2, #0
    4ad6:	db2a      	blt.n	4b2e <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4ad8:	06da      	lsls	r2, r3, #27
    4ada:	d128      	bne.n	4b2e <ready_thread+0x62>
    4adc:	6982      	ldr	r2, [r0, #24]
    4ade:	bb32      	cbnz	r2, 4b2e <ready_thread+0x62>
	return list->head == list;
    4ae0:	4a14      	ldr	r2, [pc, #80]	; (4b34 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    4ae2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4ae6:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    4ae8:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4aec:	f102 0520 	add.w	r5, r2, #32
    4af0:	42ab      	cmp	r3, r5
    4af2:	d017      	beq.n	4b24 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4af4:	b1b3      	cbz	r3, 4b24 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    4af6:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    4afa:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    4afe:	428e      	cmp	r6, r1
    4b00:	d00b      	beq.n	4b1a <ready_thread+0x4e>
		return b2 - b1;
    4b02:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4b04:	2900      	cmp	r1, #0
    4b06:	dd08      	ble.n	4b1a <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    4b08:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4b0a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    4b0e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    4b10:	6058      	str	r0, [r3, #4]
}
    4b12:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    4b14:	2000      	movs	r0, #0
    4b16:	f7ff bf3d 	b.w	4994 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4b1a:	42a3      	cmp	r3, r4
    4b1c:	d002      	beq.n	4b24 <ready_thread+0x58>
    4b1e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4b20:	2b00      	cmp	r3, #0
    4b22:	d1ea      	bne.n	4afa <ready_thread+0x2e>
	node->prev = tail;
    4b24:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    4b28:	6020      	str	r0, [r4, #0]
	list->tail = node;
    4b2a:	6250      	str	r0, [r2, #36]	; 0x24
}
    4b2c:	e7f1      	b.n	4b12 <ready_thread+0x46>
}
    4b2e:	bc70      	pop	{r4, r5, r6}
    4b30:	4770      	bx	lr
    4b32:	bf00      	nop
    4b34:	200008c8 	.word	0x200008c8

00004b38 <z_sched_start>:
{
    4b38:	b510      	push	{r4, lr}
	__asm__ volatile(
    4b3a:	f04f 0220 	mov.w	r2, #32
    4b3e:	f3ef 8411 	mrs	r4, BASEPRI
    4b42:	f382 8812 	msr	BASEPRI_MAX, r2
    4b46:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    4b4a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    4b4c:	0751      	lsls	r1, r2, #29
    4b4e:	d404      	bmi.n	4b5a <z_sched_start+0x22>
	__asm__ volatile(
    4b50:	f384 8811 	msr	BASEPRI, r4
    4b54:	f3bf 8f6f 	isb	sy
}
    4b58:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4b5a:	f022 0204 	bic.w	r2, r2, #4
    4b5e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    4b60:	f7ff ffb4 	bl	4acc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4b64:	4621      	mov	r1, r4
    4b66:	4802      	ldr	r0, [pc, #8]	; (4b70 <z_sched_start+0x38>)
}
    4b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    4b6c:	f7ff beec 	b.w	4948 <z_reschedule>
    4b70:	20000d26 	.word	0x20000d26

00004b74 <unready_thread>:
{
    4b74:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    4b76:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    4b7a:	7b43      	ldrb	r3, [r0, #13]
    4b7c:	2a00      	cmp	r2, #0
{
    4b7e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4b80:	da04      	bge.n	4b8c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4b86:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4b88:	f001 fb78 	bl	627c <sys_dlist_remove>
	update_cache(thread == _current);
    4b8c:	4b04      	ldr	r3, [pc, #16]	; (4ba0 <unready_thread+0x2c>)
    4b8e:	6898      	ldr	r0, [r3, #8]
    4b90:	1a43      	subs	r3, r0, r1
    4b92:	4258      	negs	r0, r3
    4b94:	4158      	adcs	r0, r3
}
    4b96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    4b9a:	f7ff befb 	b.w	4994 <update_cache>
    4b9e:	bf00      	nop
    4ba0:	200008c8 	.word	0x200008c8

00004ba4 <pend>:
{
    4ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ba8:	4606      	mov	r6, r0
    4baa:	4615      	mov	r5, r2
    4bac:	461c      	mov	r4, r3
	__asm__ volatile(
    4bae:	f04f 0320 	mov.w	r3, #32
    4bb2:	f3ef 8711 	mrs	r7, BASEPRI
    4bb6:	f383 8812 	msr	BASEPRI_MAX, r3
    4bba:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    4bbe:	f001 fbcd 	bl	635c <add_to_waitq_locked>
	__asm__ volatile(
    4bc2:	f387 8811 	msr	BASEPRI, r7
    4bc6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4bca:	f1b4 3fff 	cmp.w	r4, #4294967295
    4bce:	bf08      	it	eq
    4bd0:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    4bd4:	d008      	beq.n	4be8 <pend+0x44>
    4bd6:	462a      	mov	r2, r5
    4bd8:	4623      	mov	r3, r4
    4bda:	f106 0018 	add.w	r0, r6, #24
    4bde:	4903      	ldr	r1, [pc, #12]	; (4bec <pend+0x48>)
}
    4be0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4be4:	f000 ba18 	b.w	5018 <z_add_timeout>
    4be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4bec:	00006319 	.word	0x00006319

00004bf0 <z_pend_curr>:
{
    4bf0:	b510      	push	{r4, lr}
	pending_current = _current;
    4bf2:	4b07      	ldr	r3, [pc, #28]	; (4c10 <z_pend_curr+0x20>)
    4bf4:	6898      	ldr	r0, [r3, #8]
    4bf6:	4b07      	ldr	r3, [pc, #28]	; (4c14 <z_pend_curr+0x24>)
{
    4bf8:	460c      	mov	r4, r1
	pending_current = _current;
    4bfa:	6018      	str	r0, [r3, #0]
{
    4bfc:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    4bfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4c02:	f7ff ffcf 	bl	4ba4 <pend>
    4c06:	4620      	mov	r0, r4
}
    4c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4c0c:	f7fd b93c 	b.w	1e88 <arch_swap>
    4c10:	200008c8 	.word	0x200008c8
    4c14:	200008f0 	.word	0x200008f0

00004c18 <z_set_prio>:
{
    4c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c1a:	4604      	mov	r4, r0
	__asm__ volatile(
    4c1c:	f04f 0320 	mov.w	r3, #32
    4c20:	f3ef 8611 	mrs	r6, BASEPRI
    4c24:	f383 8812 	msr	BASEPRI_MAX, r3
    4c28:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    4c2c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4c2e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    4c30:	b249      	sxtb	r1, r1
    4c32:	d133      	bne.n	4c9c <z_set_prio+0x84>
		if (need_sched) {
    4c34:	6982      	ldr	r2, [r0, #24]
    4c36:	bb8a      	cbnz	r2, 4c9c <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4c3c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4c3e:	f001 fb1d 	bl	627c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4c42:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    4c44:	4a17      	ldr	r2, [pc, #92]	; (4ca4 <z_set_prio+0x8c>)
				thread->base.prio = prio;
    4c46:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    4c48:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4c4c:	7343      	strb	r3, [r0, #13]
    4c4e:	4610      	mov	r0, r2
    4c50:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4c54:	4283      	cmp	r3, r0
    4c56:	d01b      	beq.n	4c90 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4c58:	b1d3      	cbz	r3, 4c90 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    4c5a:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    4c5c:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    4c60:	42a9      	cmp	r1, r5
    4c62:	d010      	beq.n	4c86 <z_set_prio+0x6e>
		return b2 - b1;
    4c64:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    4c66:	2d00      	cmp	r5, #0
    4c68:	dd0d      	ble.n	4c86 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    4c6a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4c6c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4c70:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4c72:	605c      	str	r4, [r3, #4]
			update_cache(1);
    4c74:	2001      	movs	r0, #1
    4c76:	f7ff fe8d 	bl	4994 <update_cache>
    4c7a:	2001      	movs	r0, #1
	__asm__ volatile(
    4c7c:	f386 8811 	msr	BASEPRI, r6
    4c80:	f3bf 8f6f 	isb	sy
}
    4c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    4c86:	42bb      	cmp	r3, r7
    4c88:	d002      	beq.n	4c90 <z_set_prio+0x78>
    4c8a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4c8c:	2b00      	cmp	r3, #0
    4c8e:	d1e5      	bne.n	4c5c <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    4c90:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    4c92:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    4c96:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4c98:	6254      	str	r4, [r2, #36]	; 0x24
}
    4c9a:	e7eb      	b.n	4c74 <z_set_prio+0x5c>
			thread->base.prio = prio;
    4c9c:	73a1      	strb	r1, [r4, #14]
    4c9e:	2000      	movs	r0, #0
    4ca0:	e7ec      	b.n	4c7c <z_set_prio+0x64>
    4ca2:	bf00      	nop
    4ca4:	200008c8 	.word	0x200008c8

00004ca8 <z_impl_k_thread_suspend>:
{
    4ca8:	b570      	push	{r4, r5, r6, lr}
    4caa:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4cac:	3018      	adds	r0, #24
    4cae:	f001 fbac 	bl	640a <z_abort_timeout>
	__asm__ volatile(
    4cb2:	f04f 0320 	mov.w	r3, #32
    4cb6:	f3ef 8611 	mrs	r6, BASEPRI
    4cba:	f383 8812 	msr	BASEPRI_MAX, r3
    4cbe:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    4cc2:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    4cc6:	7b63      	ldrb	r3, [r4, #13]
    4cc8:	2a00      	cmp	r2, #0
    4cca:	da05      	bge.n	4cd8 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4cd0:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4cd2:	4620      	mov	r0, r4
    4cd4:	f001 fad2 	bl	627c <sys_dlist_remove>
		update_cache(thread == _current);
    4cd8:	4d0b      	ldr	r5, [pc, #44]	; (4d08 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4cda:	7b63      	ldrb	r3, [r4, #13]
    4cdc:	68a8      	ldr	r0, [r5, #8]
    4cde:	f043 0310 	orr.w	r3, r3, #16
    4ce2:	7363      	strb	r3, [r4, #13]
    4ce4:	1b03      	subs	r3, r0, r4
    4ce6:	4258      	negs	r0, r3
    4ce8:	4158      	adcs	r0, r3
    4cea:	f7ff fe53 	bl	4994 <update_cache>
	__asm__ volatile(
    4cee:	f386 8811 	msr	BASEPRI, r6
    4cf2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    4cf6:	68ab      	ldr	r3, [r5, #8]
    4cf8:	42a3      	cmp	r3, r4
    4cfa:	d103      	bne.n	4d04 <z_impl_k_thread_suspend+0x5c>
}
    4cfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    4d00:	f001 baea 	b.w	62d8 <z_reschedule_unlocked>
}
    4d04:	bd70      	pop	{r4, r5, r6, pc}
    4d06:	bf00      	nop
    4d08:	200008c8 	.word	0x200008c8

00004d0c <k_sched_unlock>:
{
    4d0c:	b510      	push	{r4, lr}
	__asm__ volatile(
    4d0e:	f04f 0320 	mov.w	r3, #32
    4d12:	f3ef 8411 	mrs	r4, BASEPRI
    4d16:	f383 8812 	msr	BASEPRI_MAX, r3
    4d1a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    4d1e:	4b08      	ldr	r3, [pc, #32]	; (4d40 <k_sched_unlock+0x34>)
    4d20:	689a      	ldr	r2, [r3, #8]
    4d22:	7bd3      	ldrb	r3, [r2, #15]
    4d24:	3301      	adds	r3, #1
    4d26:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4d28:	2000      	movs	r0, #0
    4d2a:	f7ff fe33 	bl	4994 <update_cache>
	__asm__ volatile(
    4d2e:	f384 8811 	msr	BASEPRI, r4
    4d32:	f3bf 8f6f 	isb	sy
}
    4d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    4d3a:	f001 bacd 	b.w	62d8 <z_reschedule_unlocked>
    4d3e:	bf00      	nop
    4d40:	200008c8 	.word	0x200008c8

00004d44 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    4d44:	4b04      	ldr	r3, [pc, #16]	; (4d58 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4d46:	2100      	movs	r1, #0
    4d48:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    4d4c:	e9c3 2208 	strd	r2, r2, [r3, #32]
    4d50:	4608      	mov	r0, r1
    4d52:	f7ff bdc7 	b.w	48e4 <k_sched_time_slice_set>
    4d56:	bf00      	nop
    4d58:	200008c8 	.word	0x200008c8

00004d5c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    4d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    4d5e:	f04f 0320 	mov.w	r3, #32
    4d62:	f3ef 8511 	mrs	r5, BASEPRI
    4d66:	f383 8812 	msr	BASEPRI_MAX, r3
    4d6a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    4d6e:	491a      	ldr	r1, [pc, #104]	; (4dd8 <z_impl_k_yield+0x7c>)
    4d70:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4d72:	7b43      	ldrb	r3, [r0, #13]
    4d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4d78:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4d7a:	f001 fa7f 	bl	627c <sys_dlist_remove>
	}
	queue_thread(_current);
    4d7e:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4d80:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    4d82:	4608      	mov	r0, r1
    4d84:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4d88:	735a      	strb	r2, [r3, #13]
    4d8a:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d8e:	4282      	cmp	r2, r0
    4d90:	d01c      	beq.n	4dcc <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4d92:	b1da      	cbz	r2, 4dcc <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    4d94:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    4d96:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    4d9a:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    4d9e:	42a6      	cmp	r6, r4
    4da0:	d00f      	beq.n	4dc2 <z_impl_k_yield+0x66>
		return b2 - b1;
    4da2:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4da4:	2c00      	cmp	r4, #0
    4da6:	dd0c      	ble.n	4dc2 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    4da8:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    4daa:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    4dae:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    4db0:	6053      	str	r3, [r2, #4]
	update_cache(1);
    4db2:	2001      	movs	r0, #1
    4db4:	f7ff fdee 	bl	4994 <update_cache>
    4db8:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    4dba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4dbe:	f7fd b863 	b.w	1e88 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    4dc2:	42ba      	cmp	r2, r7
    4dc4:	d002      	beq.n	4dcc <z_impl_k_yield+0x70>
    4dc6:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4dc8:	2a00      	cmp	r2, #0
    4dca:	d1e6      	bne.n	4d9a <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    4dcc:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    4dce:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    4dd2:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4dd4:	624b      	str	r3, [r1, #36]	; 0x24
}
    4dd6:	e7ec      	b.n	4db2 <z_impl_k_yield+0x56>
    4dd8:	200008c8 	.word	0x200008c8

00004ddc <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    4ddc:	ea50 0301 	orrs.w	r3, r0, r1
{
    4de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4de4:	4605      	mov	r5, r0
    4de6:	460e      	mov	r6, r1
	if (ticks == 0) {
    4de8:	d103      	bne.n	4df2 <z_tick_sleep+0x16>
	z_impl_k_yield();
    4dea:	f7ff ffb7 	bl	4d5c <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    4dee:	2000      	movs	r0, #0
    4df0:	e033      	b.n	4e5a <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    4df2:	f06f 0401 	mvn.w	r4, #1
    4df6:	1a24      	subs	r4, r4, r0
    4df8:	f04f 33ff 	mov.w	r3, #4294967295
    4dfc:	eb63 0301 	sbc.w	r3, r3, r1
    4e00:	2c01      	cmp	r4, #1
    4e02:	f173 0300 	sbcs.w	r3, r3, #0
    4e06:	da02      	bge.n	4e0e <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    4e08:	f001 fb3f 	bl	648a <sys_clock_tick_get_32>
    4e0c:	1944      	adds	r4, r0, r5
    4e0e:	f04f 0320 	mov.w	r3, #32
    4e12:	f3ef 8811 	mrs	r8, BASEPRI
    4e16:	f383 8812 	msr	BASEPRI_MAX, r3
    4e1a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    4e1e:	4f10      	ldr	r7, [pc, #64]	; (4e60 <z_tick_sleep+0x84>)
    4e20:	4b10      	ldr	r3, [pc, #64]	; (4e64 <z_tick_sleep+0x88>)
    4e22:	68b8      	ldr	r0, [r7, #8]
    4e24:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    4e26:	f7ff fea5 	bl	4b74 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    4e2a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4e2c:	490e      	ldr	r1, [pc, #56]	; (4e68 <z_tick_sleep+0x8c>)
    4e2e:	462a      	mov	r2, r5
    4e30:	4633      	mov	r3, r6
    4e32:	3018      	adds	r0, #24
    4e34:	f000 f8f0 	bl	5018 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4e38:	68ba      	ldr	r2, [r7, #8]
    4e3a:	7b53      	ldrb	r3, [r2, #13]
    4e3c:	f043 0310 	orr.w	r3, r3, #16
    4e40:	7353      	strb	r3, [r2, #13]
    4e42:	4640      	mov	r0, r8
    4e44:	f7fd f820 	bl	1e88 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    4e48:	f001 fb1f 	bl	648a <sys_clock_tick_get_32>
    4e4c:	1a20      	subs	r0, r4, r0
    4e4e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    4e52:	2801      	cmp	r0, #1
    4e54:	f173 0300 	sbcs.w	r3, r3, #0
    4e58:	dbc9      	blt.n	4dee <z_tick_sleep+0x12>
}
    4e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4e5e:	bf00      	nop
    4e60:	200008c8 	.word	0x200008c8
    4e64:	200008f0 	.word	0x200008f0
    4e68:	00006319 	.word	0x00006319

00004e6c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4e6c:	f1b1 3fff 	cmp.w	r1, #4294967295
    4e70:	bf08      	it	eq
    4e72:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    4e76:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4e78:	d106      	bne.n	4e88 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    4e7a:	4b08      	ldr	r3, [pc, #32]	; (4e9c <z_impl_k_sleep+0x30>)
    4e7c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4e7e:	f7ff ff13 	bl	4ca8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    4e82:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    4e86:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    4e88:	f7ff ffa8 	bl	4ddc <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    4e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4e90:	fb80 0303 	smull	r0, r3, r0, r3
    4e94:	0bc0      	lsrs	r0, r0, #15
    4e96:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    4e9a:	e7f4      	b.n	4e86 <z_impl_k_sleep+0x1a>
    4e9c:	200008c8 	.word	0x200008c8

00004ea0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4ea0:	4b01      	ldr	r3, [pc, #4]	; (4ea8 <z_impl_z_current_get+0x8>)
    4ea2:	6898      	ldr	r0, [r3, #8]
    4ea4:	4770      	bx	lr
    4ea6:	bf00      	nop
    4ea8:	200008c8 	.word	0x200008c8

00004eac <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    4eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4eb0:	4604      	mov	r4, r0
    4eb2:	f04f 0320 	mov.w	r3, #32
    4eb6:	f3ef 8611 	mrs	r6, BASEPRI
    4eba:	f383 8812 	msr	BASEPRI_MAX, r3
    4ebe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    4ec2:	7b43      	ldrb	r3, [r0, #13]
    4ec4:	071a      	lsls	r2, r3, #28
    4ec6:	d505      	bpl.n	4ed4 <z_thread_abort+0x28>
	__asm__ volatile(
    4ec8:	f386 8811 	msr	BASEPRI, r6
    4ecc:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4ed4:	f023 0220 	bic.w	r2, r3, #32
    4ed8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    4edc:	09d2      	lsrs	r2, r2, #7
    4ede:	d120      	bne.n	4f22 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4ee0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    4ee2:	68a3      	ldr	r3, [r4, #8]
    4ee4:	b113      	cbz	r3, 4eec <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    4ee6:	4620      	mov	r0, r4
    4ee8:	f001 f9d0 	bl	628c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    4eec:	f104 0018 	add.w	r0, r4, #24
    4ef0:	f001 fa8b 	bl	640a <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4ef4:	f104 0758 	add.w	r7, r4, #88	; 0x58
    4ef8:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    4efc:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4efe:	42bd      	cmp	r5, r7
    4f00:	d000      	beq.n	4f04 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    4f02:	b9b5      	cbnz	r5, 4f32 <z_thread_abort+0x86>
		update_cache(1);
    4f04:	2001      	movs	r0, #1
    4f06:	f7ff fd45 	bl	4994 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    4f0a:	4b10      	ldr	r3, [pc, #64]	; (4f4c <z_thread_abort+0xa0>)
    4f0c:	689b      	ldr	r3, [r3, #8]
    4f0e:	42a3      	cmp	r3, r4
    4f10:	d1da      	bne.n	4ec8 <z_thread_abort+0x1c>
    4f12:	f3ef 8305 	mrs	r3, IPSR
    4f16:	2b00      	cmp	r3, #0
    4f18:	d1d6      	bne.n	4ec8 <z_thread_abort+0x1c>
    4f1a:	4630      	mov	r0, r6
    4f1c:	f7fc ffb4 	bl	1e88 <arch_swap>
	return ret;
    4f20:	e7d2      	b.n	4ec8 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4f22:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    4f26:	f043 0308 	orr.w	r3, r3, #8
    4f2a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4f2c:	f001 f9a6 	bl	627c <sys_dlist_remove>
}
    4f30:	e7d7      	b.n	4ee2 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    4f32:	4628      	mov	r0, r5
    4f34:	f001 f9aa 	bl	628c <unpend_thread_no_timeout>
    4f38:	f105 0018 	add.w	r0, r5, #24
    4f3c:	f001 fa65 	bl	640a <z_abort_timeout>
    4f40:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    4f44:	4628      	mov	r0, r5
    4f46:	f7ff fdc1 	bl	4acc <ready_thread>
    4f4a:	e7d7      	b.n	4efc <z_thread_abort+0x50>
    4f4c:	200008c8 	.word	0x200008c8

00004f50 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    4f50:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    4f52:	4806      	ldr	r0, [pc, #24]	; (4f6c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    4f54:	4a06      	ldr	r2, [pc, #24]	; (4f70 <z_data_copy+0x20>)
    4f56:	4907      	ldr	r1, [pc, #28]	; (4f74 <z_data_copy+0x24>)
    4f58:	1a12      	subs	r2, r2, r0
    4f5a:	f001 f967 	bl	622c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4f5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    4f62:	4a05      	ldr	r2, [pc, #20]	; (4f78 <z_data_copy+0x28>)
    4f64:	4905      	ldr	r1, [pc, #20]	; (4f7c <z_data_copy+0x2c>)
    4f66:	4806      	ldr	r0, [pc, #24]	; (4f80 <z_data_copy+0x30>)
    4f68:	f001 b960 	b.w	622c <z_early_memcpy>
    4f6c:	20000000 	.word	0x20000000
    4f70:	200000f0 	.word	0x200000f0
    4f74:	000070e8 	.word	0x000070e8
    4f78:	00000000 	.word	0x00000000
    4f7c:	000070e8 	.word	0x000070e8
    4f80:	20000000 	.word	0x20000000

00004f84 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4f84:	4b03      	ldr	r3, [pc, #12]	; (4f94 <elapsed+0x10>)
    4f86:	681b      	ldr	r3, [r3, #0]
    4f88:	b90b      	cbnz	r3, 4f8e <elapsed+0xa>
    4f8a:	f7fe bbb7 	b.w	36fc <sys_clock_elapsed>
}
    4f8e:	2000      	movs	r0, #0
    4f90:	4770      	bx	lr
    4f92:	bf00      	nop
    4f94:	200008fc 	.word	0x200008fc

00004f98 <next_timeout>:
	return list->head == list;
    4f98:	4b10      	ldr	r3, [pc, #64]	; (4fdc <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    4f9a:	b510      	push	{r4, lr}
    4f9c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4f9e:	429c      	cmp	r4, r3
    4fa0:	bf08      	it	eq
    4fa2:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    4fa4:	f7ff ffee 	bl	4f84 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    4fa8:	b1a4      	cbz	r4, 4fd4 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    4faa:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    4fae:	1a1b      	subs	r3, r3, r0
    4fb0:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    4fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    4fb8:	f170 0200 	sbcs.w	r2, r0, #0
    4fbc:	da0a      	bge.n	4fd4 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    4fbe:	2800      	cmp	r0, #0
    4fc0:	bfac      	ite	ge
    4fc2:	4618      	movge	r0, r3
    4fc4:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    4fc6:	4b06      	ldr	r3, [pc, #24]	; (4fe0 <next_timeout+0x48>)
    4fc8:	691b      	ldr	r3, [r3, #16]
    4fca:	b113      	cbz	r3, 4fd2 <next_timeout+0x3a>
    4fcc:	4298      	cmp	r0, r3
    4fce:	bfa8      	it	ge
    4fd0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    4fd2:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    4fd4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4fd8:	e7f5      	b.n	4fc6 <next_timeout+0x2e>
    4fda:	bf00      	nop
    4fdc:	200000b0 	.word	0x200000b0
    4fe0:	200008c8 	.word	0x200008c8

00004fe4 <remove_timeout>:
{
    4fe4:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    4fe6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4fe8:	b168      	cbz	r0, 5006 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    4fea:	4a0a      	ldr	r2, [pc, #40]	; (5014 <remove_timeout+0x30>)
    4fec:	6852      	ldr	r2, [r2, #4]
    4fee:	4290      	cmp	r0, r2
    4ff0:	d009      	beq.n	5006 <remove_timeout+0x22>
	if (next(t) != NULL) {
    4ff2:	b143      	cbz	r3, 5006 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    4ff4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    4ff8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    4ffc:	1912      	adds	r2, r2, r4
    4ffe:	eb41 0105 	adc.w	r1, r1, r5
    5002:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    5006:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    5008:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    500a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    500c:	2300      	movs	r3, #0
	node->prev = NULL;
    500e:	e9c0 3300 	strd	r3, r3, [r0]
}
    5012:	bd30      	pop	{r4, r5, pc}
    5014:	200000b0 	.word	0x200000b0

00005018 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5018:	f1b3 3fff 	cmp.w	r3, #4294967295
    501c:	bf08      	it	eq
    501e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    5022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5024:	4604      	mov	r4, r0
    5026:	461f      	mov	r7, r3
    5028:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    502a:	d067      	beq.n	50fc <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    502c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    502e:	f04f 0320 	mov.w	r3, #32
    5032:	f3ef 8611 	mrs	r6, BASEPRI
    5036:	f383 8812 	msr	BASEPRI_MAX, r3
    503a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    503e:	f06f 0201 	mvn.w	r2, #1
    5042:	1b53      	subs	r3, r2, r5
    5044:	f04f 3cff 	mov.w	ip, #4294967295
    5048:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    504c:	2b00      	cmp	r3, #0
    504e:	db1b      	blt.n	5088 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    5050:	4b2b      	ldr	r3, [pc, #172]	; (5100 <z_add_timeout+0xe8>)
    5052:	e9d3 1300 	ldrd	r1, r3, [r3]
    5056:	1a52      	subs	r2, r2, r1
    5058:	eb6c 0303 	sbc.w	r3, ip, r3
    505c:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    505e:	eb63 0307 	sbc.w	r3, r3, r7
    5062:	2d01      	cmp	r5, #1
    5064:	f173 0200 	sbcs.w	r2, r3, #0
    5068:	bfbc      	itt	lt
    506a:	2501      	movlt	r5, #1
    506c:	2300      	movlt	r3, #0
    506e:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    5072:	4824      	ldr	r0, [pc, #144]	; (5104 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    5074:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5078:	4283      	cmp	r3, r0
    507a:	d118      	bne.n	50ae <z_add_timeout+0x96>
	node->prev = tail;
    507c:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    5080:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    5084:	6044      	str	r4, [r0, #4]
}
    5086:	e026      	b.n	50d6 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    5088:	f7ff ff7c 	bl	4f84 <elapsed>
    508c:	3501      	adds	r5, #1
    508e:	f147 0700 	adc.w	r7, r7, #0
    5092:	182d      	adds	r5, r5, r0
    5094:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    5098:	e9c4 5704 	strd	r5, r7, [r4, #16]
    509c:	e7e9      	b.n	5072 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    509e:	1a52      	subs	r2, r2, r1
    50a0:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    50a4:	459c      	cmp	ip, r3
    50a6:	e9c4 2504 	strd	r2, r5, [r4, #16]
    50aa:	d0e7      	beq.n	507c <z_add_timeout+0x64>
    50ac:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    50ae:	2b00      	cmp	r3, #0
    50b0:	d0e4      	beq.n	507c <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    50b2:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    50b6:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    50ba:	428a      	cmp	r2, r1
    50bc:	eb75 0e07 	sbcs.w	lr, r5, r7
    50c0:	daed      	bge.n	509e <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    50c2:	1a8a      	subs	r2, r1, r2
    50c4:	eb67 0505 	sbc.w	r5, r7, r5
    50c8:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    50cc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    50ce:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    50d2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    50d4:	605c      	str	r4, [r3, #4]
	return list->head == list;
    50d6:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    50d8:	4283      	cmp	r3, r0
    50da:	d00b      	beq.n	50f4 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    50dc:	429c      	cmp	r4, r3
    50de:	d109      	bne.n	50f4 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    50e0:	f7ff ff5a 	bl	4f98 <next_timeout>

			if (next_time == 0 ||
    50e4:	b118      	cbz	r0, 50ee <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    50e6:	4b08      	ldr	r3, [pc, #32]	; (5108 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    50e8:	691b      	ldr	r3, [r3, #16]
    50ea:	4283      	cmp	r3, r0
    50ec:	d002      	beq.n	50f4 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    50ee:	2100      	movs	r1, #0
    50f0:	f7fe fad2 	bl	3698 <sys_clock_set_timeout>
	__asm__ volatile(
    50f4:	f386 8811 	msr	BASEPRI, r6
    50f8:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    50fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50fe:	bf00      	nop
    5100:	200006c8 	.word	0x200006c8
    5104:	200000b0 	.word	0x200000b0
    5108:	200008c8 	.word	0x200008c8

0000510c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    510c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5110:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    5112:	f7ff fc99 	bl	4a48 <z_time_slice>
	__asm__ volatile(
    5116:	f04f 0320 	mov.w	r3, #32
    511a:	f3ef 8411 	mrs	r4, BASEPRI
    511e:	f383 8812 	msr	BASEPRI_MAX, r3
    5122:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    5126:	4e24      	ldr	r6, [pc, #144]	; (51b8 <sys_clock_announce+0xac>)
	return list->head == list;
    5128:	f8df 8090 	ldr.w	r8, [pc, #144]	; 51bc <sys_clock_announce+0xb0>
    512c:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    512e:	4d24      	ldr	r5, [pc, #144]	; (51c0 <sys_clock_announce+0xb4>)
    5130:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5134:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5136:	4540      	cmp	r0, r8
		curr_tick += dt;
    5138:	e9d5 1e00 	ldrd	r1, lr, [r5]
    513c:	ea4f 77e2 	mov.w	r7, r2, asr #31
    5140:	d00b      	beq.n	515a <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5142:	b150      	cbz	r0, 515a <sys_clock_announce+0x4e>
    5144:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    5148:	429a      	cmp	r2, r3
    514a:	eb77 090c 	sbcs.w	r9, r7, ip
    514e:	da16      	bge.n	517e <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    5150:	1a9b      	subs	r3, r3, r2
    5152:	eb6c 0c07 	sbc.w	ip, ip, r7
    5156:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    515a:	1852      	adds	r2, r2, r1
    515c:	eb4e 0707 	adc.w	r7, lr, r7
    5160:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    5164:	2500      	movs	r5, #0
    5166:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    5168:	f7ff ff16 	bl	4f98 <next_timeout>
    516c:	4629      	mov	r1, r5
    516e:	f7fe fa93 	bl	3698 <sys_clock_set_timeout>
	__asm__ volatile(
    5172:	f384 8811 	msr	BASEPRI, r4
    5176:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    517a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    517e:	1859      	adds	r1, r3, r1
    5180:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    5184:	1ad3      	subs	r3, r2, r3
    5186:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    5188:	2200      	movs	r2, #0
    518a:	2300      	movs	r3, #0
    518c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    5190:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    5194:	f7ff ff26 	bl	4fe4 <remove_timeout>
    5198:	f384 8811 	msr	BASEPRI, r4
    519c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    51a0:	6883      	ldr	r3, [r0, #8]
    51a2:	4798      	blx	r3
	__asm__ volatile(
    51a4:	f04f 0320 	mov.w	r3, #32
    51a8:	f3ef 8411 	mrs	r4, BASEPRI
    51ac:	f383 8812 	msr	BASEPRI_MAX, r3
    51b0:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    51b4:	e7bc      	b.n	5130 <sys_clock_announce+0x24>
    51b6:	bf00      	nop
    51b8:	200008fc 	.word	0x200008fc
    51bc:	200000b0 	.word	0x200000b0
    51c0:	200006c8 	.word	0x200006c8

000051c4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    51c4:	b510      	push	{r4, lr}
    51c6:	f04f 0320 	mov.w	r3, #32
    51ca:	f3ef 8411 	mrs	r4, BASEPRI
    51ce:	f383 8812 	msr	BASEPRI_MAX, r3
    51d2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    51d6:	f7fe fa91 	bl	36fc <sys_clock_elapsed>
    51da:	4a05      	ldr	r2, [pc, #20]	; (51f0 <sys_clock_tick_get+0x2c>)
    51dc:	e9d2 3100 	ldrd	r3, r1, [r2]
    51e0:	18c0      	adds	r0, r0, r3
    51e2:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    51e6:	f384 8811 	msr	BASEPRI, r4
    51ea:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    51ee:	bd10      	pop	{r4, pc}
    51f0:	200006c8 	.word	0x200006c8

000051f4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    51f4:	b570      	push	{r4, r5, r6, lr}
    51f6:	4604      	mov	r4, r0
	__asm__ volatile(
    51f8:	f04f 0320 	mov.w	r3, #32
    51fc:	f3ef 8511 	mrs	r5, BASEPRI
    5200:	f383 8812 	msr	BASEPRI_MAX, r3
    5204:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    5208:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    520c:	3301      	adds	r3, #1
    520e:	f142 0200 	adc.w	r2, r2, #0
    5212:	2b02      	cmp	r3, #2
    5214:	f172 0300 	sbcs.w	r3, r2, #0
    5218:	d304      	bcc.n	5224 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    521a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    521e:	4917      	ldr	r1, [pc, #92]	; (527c <z_timer_expiration_handler+0x88>)
    5220:	f7ff fefa 	bl	5018 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    5224:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5226:	3301      	adds	r3, #1
    5228:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    522a:	6a23      	ldr	r3, [r4, #32]
    522c:	b173      	cbz	r3, 524c <z_timer_expiration_handler+0x58>
	__asm__ volatile(
    522e:	f385 8811 	msr	BASEPRI, r5
    5232:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    5236:	6a23      	ldr	r3, [r4, #32]
    5238:	4620      	mov	r0, r4
    523a:	4798      	blx	r3
	__asm__ volatile(
    523c:	f04f 0320 	mov.w	r3, #32
    5240:	f3ef 8511 	mrs	r5, BASEPRI
    5244:	f383 8812 	msr	BASEPRI_MAX, r3
    5248:	f3bf 8f6f 	isb	sy
	return list->head == list;
    524c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5250:	42a6      	cmp	r6, r4
    5252:	d000      	beq.n	5256 <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    5254:	b926      	cbnz	r6, 5260 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
    5256:	f385 8811 	msr	BASEPRI, r5
    525a:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    525e:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    5260:	4630      	mov	r0, r6
    5262:	f001 f81d 	bl	62a0 <z_unpend_thread_no_timeout>
    5266:	2300      	movs	r3, #0
    5268:	67b3      	str	r3, [r6, #120]	; 0x78
    526a:	f385 8811 	msr	BASEPRI, r5
    526e:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    5272:	4630      	mov	r0, r6
}
    5274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    5278:	f001 b83e 	b.w	62f8 <z_ready_thread>
    527c:	000051f5 	.word	0x000051f5

00005280 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    5280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5284:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    5286:	f1b3 3fff 	cmp.w	r3, #4294967295
    528a:	bf08      	it	eq
    528c:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
    5290:	4606      	mov	r6, r0
    5292:	461c      	mov	r4, r3
    5294:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
    5298:	4689      	mov	r9, r1
    529a:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    529c:	d03e      	beq.n	531c <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    529e:	f1b0 3fff 	cmp.w	r0, #4294967295
    52a2:	bf08      	it	eq
    52a4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    52a8:	4615      	mov	r5, r2
    52aa:	4607      	mov	r7, r0
    52ac:	d014      	beq.n	52d8 <z_impl_k_timer_start+0x58>
    52ae:	ea50 0302 	orrs.w	r3, r0, r2
    52b2:	d011      	beq.n	52d8 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
    52b4:	f06f 0301 	mvn.w	r3, #1
    52b8:	1a9b      	subs	r3, r3, r2
    52ba:	f04f 33ff 	mov.w	r3, #4294967295
    52be:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    52c2:	2b00      	cmp	r3, #0
    52c4:	da08      	bge.n	52d8 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
    52c6:	2a02      	cmp	r2, #2
    52c8:	f170 0300 	sbcs.w	r3, r0, #0
    52cc:	bfbc      	itt	lt
    52ce:	2502      	movlt	r5, #2
    52d0:	2700      	movlt	r7, #0
    52d2:	3d01      	subs	r5, #1
    52d4:	f147 37ff 	adc.w	r7, r7, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    52d8:	f06f 0301 	mvn.w	r3, #1
    52dc:	1a5b      	subs	r3, r3, r1
    52de:	f04f 33ff 	mov.w	r3, #4294967295
    52e2:	eb63 0304 	sbc.w	r3, r3, r4
    52e6:	2b00      	cmp	r3, #0
    52e8:	da09      	bge.n	52fe <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
    52ea:	2901      	cmp	r1, #1
    52ec:	f174 0300 	sbcs.w	r3, r4, #0
    52f0:	bfbc      	itt	lt
    52f2:	2101      	movlt	r1, #1
    52f4:	2400      	movlt	r4, #0
    52f6:	f111 39ff 	adds.w	r9, r1, #4294967295
    52fa:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    52fe:	4630      	mov	r0, r6
    5300:	f001 f883 	bl	640a <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    5304:	2300      	movs	r3, #0
    5306:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
    5308:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    530c:	464a      	mov	r2, r9
    530e:	4643      	mov	r3, r8
    5310:	4630      	mov	r0, r6
    5312:	4903      	ldr	r1, [pc, #12]	; (5320 <z_impl_k_timer_start+0xa0>)
		     duration);
}
    5314:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5318:	f7ff be7e 	b.w	5018 <z_add_timeout>
}
    531c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5320:	000051f5 	.word	0x000051f5

00005324 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    5324:	4a02      	ldr	r2, [pc, #8]	; (5330 <boot_banner+0xc>)
    5326:	4903      	ldr	r1, [pc, #12]	; (5334 <boot_banner+0x10>)
    5328:	4803      	ldr	r0, [pc, #12]	; (5338 <boot_banner+0x14>)
    532a:	f000 b886 	b.w	543a <printk>
    532e:	bf00      	nop
    5330:	00006a67 	.word	0x00006a67
    5334:	000070b0 	.word	0x000070b0
    5338:	000070bf 	.word	0x000070bf

0000533c <gpio_pin_configure_dt>:
{
    533c:	b4f0      	push	{r4, r5, r6, r7}
    533e:	4602      	mov	r2, r0
	return gpio_pin_configure(spec->port,
    5340:	6800      	ldr	r0, [r0, #0]
				  spec->dt_flags | extra_flags);
    5342:	88d3      	ldrh	r3, [r2, #6]
	return gpio_pin_configure(spec->port,
    5344:	7916      	ldrb	r6, [r2, #4]
    5346:	430b      	orrs	r3, r1
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    5348:	02dc      	lsls	r4, r3, #11
	const struct gpio_driver_api *api =
    534a:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
    534c:	6901      	ldr	r1, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    534e:	d506      	bpl.n	535e <gpio_pin_configure_dt+0x22>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    5350:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
    5354:	d003      	beq.n	535e <gpio_pin_configure_dt+0x22>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    5356:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    5358:	bf48      	it	mi
    535a:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    535e:	680c      	ldr	r4, [r1, #0]
    5360:	2501      	movs	r5, #1
    5362:	40b5      	lsls	r5, r6
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    5364:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    5368:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    536a:	bf4c      	ite	mi
    536c:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    536e:	43ac      	bicpl	r4, r5
    5370:	600c      	str	r4, [r1, #0]
	return api->pin_configure(port, pin, flags);
    5372:	683b      	ldr	r3, [r7, #0]
    5374:	4631      	mov	r1, r6
}
    5376:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
    5378:	4718      	bx	r3

0000537a <cbpprintf_external>:
{
    537a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    537e:	4607      	mov	r7, r0
    5380:	460e      	mov	r6, r1
    5382:	4690      	mov	r8, r2
	if (buf == NULL) {
    5384:	461d      	mov	r5, r3
    5386:	b30b      	cbz	r3, 53cc <cbpprintf_external+0x52>
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    5388:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = buf[2];
    538a:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
    538c:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = buf[3];
    5390:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    5392:	441c      	add	r4, r3
    5394:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    5398:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
    539a:	f04f 0900 	mov.w	r9, #0
    539e:	45d1      	cmp	r9, sl
    53a0:	d308      	bcc.n	53b4 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    53a2:	686a      	ldr	r2, [r5, #4]
    53a4:	f105 0308 	add.w	r3, r5, #8
    53a8:	4641      	mov	r1, r8
    53aa:	4638      	mov	r0, r7
    53ac:	46b4      	mov	ip, r6
}
    53ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    53b2:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    53b4:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    53b8:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    53bc:	4620      	mov	r0, r4
    53be:	f000 fc3b 	bl	5c38 <strlen>
    53c2:	3001      	adds	r0, #1
    53c4:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    53c6:	f109 0901 	add.w	r9, r9, #1
    53ca:	e7e8      	b.n	539e <cbpprintf_external+0x24>
}
    53cc:	f06f 0015 	mvn.w	r0, #21
    53d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000053d4 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    53d4:	4603      	mov	r3, r0
    53d6:	b158      	cbz	r0, 53f0 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    53d8:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    53da:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    53de:	2a01      	cmp	r2, #1
    53e0:	d003      	beq.n	53ea <sys_notify_validate+0x16>
    53e2:	2a03      	cmp	r2, #3
    53e4:	d104      	bne.n	53f0 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    53e6:	6802      	ldr	r2, [r0, #0]
    53e8:	b112      	cbz	r2, 53f0 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    53ea:	2000      	movs	r0, #0
    53ec:	6098      	str	r0, [r3, #8]
    53ee:	4770      	bx	lr
		return -EINVAL;
    53f0:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    53f4:	4770      	bx	lr

000053f6 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    53f6:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    53f8:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    53fa:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    53fe:	2a03      	cmp	r2, #3
    5400:	f04f 0200 	mov.w	r2, #0
{
    5404:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5406:	bf0c      	ite	eq
    5408:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    540a:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    540c:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    540e:	4770      	bx	lr

00005410 <arch_printk_char_out>:
}
    5410:	2000      	movs	r0, #0
    5412:	4770      	bx	lr

00005414 <str_out>:
{
    5414:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    5416:	688a      	ldr	r2, [r1, #8]
    5418:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    541a:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    541c:	b114      	cbz	r4, 5424 <str_out+0x10>
    541e:	684b      	ldr	r3, [r1, #4]
    5420:	4293      	cmp	r3, r2
    5422:	dc01      	bgt.n	5428 <str_out+0x14>
		ctx->count++;
    5424:	608d      	str	r5, [r1, #8]
}
    5426:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    5428:	3b01      	subs	r3, #1
    542a:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    542c:	bf08      	it	eq
    542e:	2200      	moveq	r2, #0
    5430:	608d      	str	r5, [r1, #8]
    5432:	bf0c      	ite	eq
    5434:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    5436:	54a0      	strbne	r0, [r4, r2]
    5438:	e7f5      	b.n	5426 <str_out+0x12>

0000543a <printk>:
{
    543a:	b40f      	push	{r0, r1, r2, r3}
    543c:	b507      	push	{r0, r1, r2, lr}
    543e:	a904      	add	r1, sp, #16
    5440:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    5444:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    5446:	f7fb f9b1 	bl	7ac <vprintk>
}
    544a:	b003      	add	sp, #12
    544c:	f85d eb04 	ldr.w	lr, [sp], #4
    5450:	b004      	add	sp, #16
    5452:	4770      	bx	lr

00005454 <snprintk>:
{
    5454:	b40c      	push	{r2, r3}
    5456:	b507      	push	{r0, r1, r2, lr}
    5458:	ab04      	add	r3, sp, #16
    545a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    545e:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    5460:	f7fb f9b2 	bl	7c8 <vsnprintk>
}
    5464:	b003      	add	sp, #12
    5466:	f85d eb04 	ldr.w	lr, [sp], #4
    546a:	b002      	add	sp, #8
    546c:	4770      	bx	lr

0000546e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    546e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    5470:	f013 0307 	ands.w	r3, r3, #7
    5474:	d105      	bne.n	5482 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    5476:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    5478:	2b00      	cmp	r3, #0
    547a:	bf0c      	ite	eq
    547c:	2000      	moveq	r0, #0
    547e:	2003      	movne	r0, #3
    5480:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    5482:	2b02      	cmp	r3, #2
    5484:	d105      	bne.n	5492 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    5486:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    5488:	2b00      	cmp	r3, #0
    548a:	bf14      	ite	ne
    548c:	2000      	movne	r0, #0
    548e:	2004      	moveq	r0, #4
    5490:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    5492:	2b01      	cmp	r3, #1
    5494:	d105      	bne.n	54a2 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    5496:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    5498:	2b00      	cmp	r3, #0
    549a:	bf0c      	ite	eq
    549c:	2000      	moveq	r0, #0
    549e:	2005      	movne	r0, #5
    54a0:	4770      	bx	lr
	int evt = EVT_NOP;
    54a2:	2000      	movs	r0, #0
}
    54a4:	4770      	bx	lr

000054a6 <notify_one>:
{
    54a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    54aa:	460d      	mov	r5, r1
    54ac:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    54ae:	4619      	mov	r1, r3
    54b0:	1d28      	adds	r0, r5, #4
{
    54b2:	4690      	mov	r8, r2
    54b4:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    54b6:	f7ff ff9e 	bl	53f6 <sys_notify_finalize>
	if (cb) {
    54ba:	4604      	mov	r4, r0
    54bc:	b138      	cbz	r0, 54ce <notify_one+0x28>
		cb(mgr, cli, state, res);
    54be:	4633      	mov	r3, r6
    54c0:	4642      	mov	r2, r8
    54c2:	4629      	mov	r1, r5
    54c4:	4638      	mov	r0, r7
    54c6:	46a4      	mov	ip, r4
}
    54c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    54cc:	4760      	bx	ip
}
    54ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000054d2 <transition_complete>:
{
    54d2:	b410      	push	{r4}
	__asm__ volatile(
    54d4:	f04f 0420 	mov.w	r4, #32
    54d8:	f3ef 8211 	mrs	r2, BASEPRI
    54dc:	f384 8812 	msr	BASEPRI_MAX, r4
    54e0:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    54e4:	6141      	str	r1, [r0, #20]
}
    54e6:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    54e8:	2101      	movs	r1, #1
    54ea:	f7fb b981 	b.w	7f0 <process_event>

000054ee <validate_args>:
{
    54ee:	b510      	push	{r4, lr}
    54f0:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    54f2:	b140      	cbz	r0, 5506 <validate_args+0x18>
    54f4:	b139      	cbz	r1, 5506 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    54f6:	1d08      	adds	r0, r1, #4
    54f8:	f7ff ff6c 	bl	53d4 <sys_notify_validate>
	if ((rv == 0)
    54fc:	b928      	cbnz	r0, 550a <validate_args+0x1c>
	    && ((cli->notify.flags
    54fe:	68a3      	ldr	r3, [r4, #8]
    5500:	f033 0303 	bics.w	r3, r3, #3
    5504:	d001      	beq.n	550a <validate_args+0x1c>
		rv = -EINVAL;
    5506:	f06f 0015 	mvn.w	r0, #21
}
    550a:	bd10      	pop	{r4, pc}

0000550c <onoff_manager_init>:
{
    550c:	b538      	push	{r3, r4, r5, lr}
    550e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    5510:	4605      	mov	r5, r0
    5512:	b158      	cbz	r0, 552c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    5514:	b151      	cbz	r1, 552c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    5516:	680b      	ldr	r3, [r1, #0]
    5518:	b143      	cbz	r3, 552c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    551a:	684b      	ldr	r3, [r1, #4]
    551c:	b133      	cbz	r3, 552c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    551e:	221c      	movs	r2, #28
    5520:	2100      	movs	r1, #0
    5522:	f000 fba4 	bl	5c6e <memset>
    5526:	612c      	str	r4, [r5, #16]
	return 0;
    5528:	2000      	movs	r0, #0
}
    552a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    552c:	f06f 0015 	mvn.w	r0, #21
    5530:	e7fb      	b.n	552a <onoff_manager_init+0x1e>

00005532 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    5532:	b570      	push	{r4, r5, r6, lr}
    5534:	4604      	mov	r4, r0
    5536:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    5538:	f7ff ffd9 	bl	54ee <validate_args>

	if (rv < 0) {
    553c:	1e05      	subs	r5, r0, #0
    553e:	db31      	blt.n	55a4 <onoff_request+0x72>
    5540:	f04f 0320 	mov.w	r3, #32
    5544:	f3ef 8111 	mrs	r1, BASEPRI
    5548:	f383 8812 	msr	BASEPRI_MAX, r3
    554c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    5550:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5552:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    5554:	f64f 75ff 	movw	r5, #65535	; 0xffff
    5558:	42ab      	cmp	r3, r5
    555a:	f000 0207 	and.w	r2, r0, #7
    555e:	d02e      	beq.n	55be <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    5560:	2a02      	cmp	r2, #2
    5562:	d10e      	bne.n	5582 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    5564:	3301      	adds	r3, #1
    5566:	8363      	strh	r3, [r4, #26]
	rv = state;
    5568:	4615      	mov	r5, r2
		notify = true;
    556a:	2301      	movs	r3, #1
	__asm__ volatile(
    556c:	f381 8811 	msr	BASEPRI, r1
    5570:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    5574:	b1b3      	cbz	r3, 55a4 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    5576:	2300      	movs	r3, #0
    5578:	4631      	mov	r1, r6
    557a:	4620      	mov	r0, r4
    557c:	f7ff ff93 	bl	54a6 <notify_one>
    5580:	e010      	b.n	55a4 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    5582:	0783      	lsls	r3, r0, #30
    5584:	d001      	beq.n	558a <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    5586:	2a06      	cmp	r2, #6
    5588:	d10e      	bne.n	55a8 <onoff_request+0x76>
	parent->next = child;
    558a:	2300      	movs	r3, #0
    558c:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    558e:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    5590:	b993      	cbnz	r3, 55b8 <onoff_request+0x86>
	list->head = node;
    5592:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    5596:	4615      	mov	r5, r2
    5598:	b962      	cbnz	r2, 55b4 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    559a:	460a      	mov	r2, r1
    559c:	4620      	mov	r0, r4
    559e:	2102      	movs	r1, #2
    55a0:	f7fb f926 	bl	7f0 <process_event>
		}
	}

	return rv;
}
    55a4:	4628      	mov	r0, r5
    55a6:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    55a8:	2a05      	cmp	r2, #5
    55aa:	bf0c      	ite	eq
    55ac:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    55b0:	f06f 0504 	mvnne.w	r5, #4
    55b4:	2300      	movs	r3, #0
    55b6:	e7d9      	b.n	556c <onoff_request+0x3a>
	parent->next = child;
    55b8:	601e      	str	r6, [r3, #0]
	list->tail = node;
    55ba:	6066      	str	r6, [r4, #4]
}
    55bc:	e7eb      	b.n	5596 <onoff_request+0x64>
		rv = -EAGAIN;
    55be:	f06f 050a 	mvn.w	r5, #10
    55c2:	e7f7      	b.n	55b4 <onoff_request+0x82>

000055c4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    55c4:	4604      	mov	r4, r0
    55c6:	b508      	push	{r3, lr}
    55c8:	4608      	mov	r0, r1
    55ca:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    55cc:	461a      	mov	r2, r3
    55ce:	47a0      	blx	r4
	return z_impl_z_current_get();
    55d0:	f7ff fc66 	bl	4ea0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    55d4:	f7fd f884 	bl	26e0 <z_impl_k_thread_abort>

000055d8 <encode_uint>:
{
    55d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    55dc:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    55de:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    55e0:	2b6f      	cmp	r3, #111	; 0x6f
{
    55e2:	4680      	mov	r8, r0
    55e4:	460f      	mov	r7, r1
    55e6:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    55e8:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    55ec:	d029      	beq.n	5642 <encode_uint+0x6a>
    55ee:	d824      	bhi.n	563a <encode_uint+0x62>
		return 16;
    55f0:	2b58      	cmp	r3, #88	; 0x58
    55f2:	bf14      	ite	ne
    55f4:	260a      	movne	r6, #10
    55f6:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    55f8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    55fc:	4632      	mov	r2, r6
    55fe:	2300      	movs	r3, #0
    5600:	4640      	mov	r0, r8
    5602:	4639      	mov	r1, r7
    5604:	f7fa fd7c 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5608:	2a09      	cmp	r2, #9
    560a:	b2d4      	uxtb	r4, r2
    560c:	d81e      	bhi.n	564c <encode_uint+0x74>
    560e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    5610:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5612:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    5614:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5618:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    561c:	d301      	bcc.n	5622 <encode_uint+0x4a>
    561e:	45d1      	cmp	r9, sl
    5620:	d811      	bhi.n	5646 <encode_uint+0x6e>
	if (conv->flag_hash) {
    5622:	782b      	ldrb	r3, [r5, #0]
    5624:	069b      	lsls	r3, r3, #26
    5626:	d505      	bpl.n	5634 <encode_uint+0x5c>
		if (radix == 8) {
    5628:	2e08      	cmp	r6, #8
    562a:	d115      	bne.n	5658 <encode_uint+0x80>
			conv->altform_0 = true;
    562c:	78ab      	ldrb	r3, [r5, #2]
    562e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    5632:	70ab      	strb	r3, [r5, #2]
}
    5634:	4648      	mov	r0, r9
    5636:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    563a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    563e:	2b70      	cmp	r3, #112	; 0x70
    5640:	e7d7      	b.n	55f2 <encode_uint+0x1a>
	switch (specifier) {
    5642:	2608      	movs	r6, #8
    5644:	e7d8      	b.n	55f8 <encode_uint+0x20>
		value /= radix;
    5646:	4680      	mov	r8, r0
    5648:	460f      	mov	r7, r1
    564a:	e7d7      	b.n	55fc <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    564c:	f1bb 0f19 	cmp.w	fp, #25
    5650:	bf94      	ite	ls
    5652:	3437      	addls	r4, #55	; 0x37
    5654:	3457      	addhi	r4, #87	; 0x57
    5656:	e7db      	b.n	5610 <encode_uint+0x38>
		} else if (radix == 16) {
    5658:	2e10      	cmp	r6, #16
    565a:	d1eb      	bne.n	5634 <encode_uint+0x5c>
			conv->altform_0c = true;
    565c:	78ab      	ldrb	r3, [r5, #2]
    565e:	f043 0310 	orr.w	r3, r3, #16
    5662:	e7e6      	b.n	5632 <encode_uint+0x5a>

00005664 <outs>:
{
    5664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5668:	4607      	mov	r7, r0
    566a:	4688      	mov	r8, r1
    566c:	4615      	mov	r5, r2
    566e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5670:	4614      	mov	r4, r2
    5672:	42b4      	cmp	r4, r6
    5674:	eba4 0005 	sub.w	r0, r4, r5
    5678:	d302      	bcc.n	5680 <outs+0x1c>
    567a:	b93e      	cbnz	r6, 568c <outs+0x28>
    567c:	7823      	ldrb	r3, [r4, #0]
    567e:	b12b      	cbz	r3, 568c <outs+0x28>
		int rc = out((int)*sp++, ctx);
    5680:	f814 0b01 	ldrb.w	r0, [r4], #1
    5684:	4641      	mov	r1, r8
    5686:	47b8      	blx	r7
		if (rc < 0) {
    5688:	2800      	cmp	r0, #0
    568a:	daf2      	bge.n	5672 <outs+0xe>
}
    568c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005690 <free_space>:
	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    5690:	4602      	mov	r2, r0
    5692:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    5694:	68c0      	ldr	r0, [r0, #12]
    5696:	6814      	ldr	r4, [r2, #0]
    5698:	42a0      	cmp	r0, r4
    569a:	d904      	bls.n	56a6 <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    569c:	3801      	subs	r0, #1
    569e:	1b00      	subs	r0, r0, r4
    56a0:	6008      	str	r0, [r1, #0]

		return false;
    56a2:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
    56a4:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    56a6:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
    56a8:	b918      	cbnz	r0, 56b2 <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    56aa:	3b01      	subs	r3, #1
    56ac:	1b1b      	subs	r3, r3, r4
    56ae:	600b      	str	r3, [r1, #0]
		return false;
    56b0:	e7f8      	b.n	56a4 <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
    56b2:	1b1b      	subs	r3, r3, r4
    56b4:	600b      	str	r3, [r1, #0]
	return true;
    56b6:	2001      	movs	r0, #1
    56b8:	e7f4      	b.n	56a4 <free_space+0x14>

000056ba <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    56ba:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    56bc:	a901      	add	r1, sp, #4
{
    56be:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    56c0:	f7ff ffe6 	bl	5690 <free_space>
    56c4:	b120      	cbz	r0, 56d0 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    56c6:	9b01      	ldr	r3, [sp, #4]
    56c8:	68e2      	ldr	r2, [r4, #12]
    56ca:	3b01      	subs	r3, #1
    56cc:	4413      	add	r3, r2
    56ce:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    56d0:	9801      	ldr	r0, [sp, #4]
    56d2:	6a23      	ldr	r3, [r4, #32]
    56d4:	43c0      	mvns	r0, r0
}
    56d6:	4418      	add	r0, r3
    56d8:	b002      	add	sp, #8
    56da:	bd10      	pop	{r4, pc}

000056dc <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
    56dc:	b510      	push	{r4, lr}
    56de:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    56e0:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    56e2:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    56e4:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    56e6:	07d2      	lsls	r2, r2, #31
    56e8:	d502      	bpl.n	56f0 <idx_inc+0x14>
		return i & (buffer->size - 1);
    56ea:	3b01      	subs	r3, #1
    56ec:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    56ee:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    56f0:	4298      	cmp	r0, r3
    56f2:	bf28      	it	cs
    56f4:	1ac0      	subcs	r0, r0, r3
    56f6:	e7fa      	b.n	56ee <idx_inc+0x12>

000056f8 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    56f8:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    56fa:	69c2      	ldr	r2, [r0, #28]
{
    56fc:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
    56fe:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    5700:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    5702:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    5706:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    570a:	462a      	mov	r2, r5
    570c:	6801      	ldr	r1, [r0, #0]
{
    570e:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    5710:	f7ff ffe4 	bl	56dc <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    5714:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    5716:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    5718:	462a      	mov	r2, r5
    571a:	4620      	mov	r0, r4
    571c:	f7ff ffde 	bl	56dc <idx_inc>
    5720:	6060      	str	r0, [r4, #4]
}
    5722:	bd38      	pop	{r3, r4, r5, pc}

00005724 <max_utilization_update>:
{
    5724:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    5726:	6903      	ldr	r3, [r0, #16]
    5728:	075b      	lsls	r3, r3, #29
{
    572a:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    572c:	d506      	bpl.n	573c <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    572e:	6a45      	ldr	r5, [r0, #36]	; 0x24
    5730:	f7ff ffc3 	bl	56ba <get_usage>
    5734:	4285      	cmp	r5, r0
    5736:	d902      	bls.n	573e <max_utilization_update+0x1a>
    5738:	6a60      	ldr	r0, [r4, #36]	; 0x24
    573a:	6260      	str	r0, [r4, #36]	; 0x24
}
    573c:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    573e:	4620      	mov	r0, r4
    5740:	f7ff ffbb 	bl	56ba <get_usage>
    5744:	e7f9      	b.n	573a <max_utilization_update+0x16>

00005746 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
    5746:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    574a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    574e:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
    5752:	461f      	mov	r7, r3
	*user_packet = false;
    5754:	2300      	movs	r3, #0
    5756:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
    5758:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    575c:	f003 0303 	and.w	r3, r3, #3
    5760:	2b02      	cmp	r3, #2
{
    5762:	4604      	mov	r4, r0
    5764:	468b      	mov	fp, r1
    5766:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    5768:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    576c:	d103      	bne.n	5776 <drop_item_locked+0x30>
		return item->skip.len;
    576e:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    5772:	08ad      	lsrs	r5, r5, #2
    5774:	d12e      	bne.n	57d4 <drop_item_locked+0x8e>
    5776:	69a3      	ldr	r3, [r4, #24]
    5778:	4630      	mov	r0, r6
    577a:	4798      	blx	r3
    577c:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
    577e:	f1b8 0f00 	cmp.w	r8, #0
    5782:	d036      	beq.n	57f2 <drop_item_locked+0xac>
		if (item->hdr.busy) {
    5784:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    5788:	079b      	lsls	r3, r3, #30
    578a:	d52f      	bpl.n	57ec <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
    578c:	f10b 0101 	add.w	r1, fp, #1
    5790:	4620      	mov	r0, r4
    5792:	f7ff ffb1 	bl	56f8 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    5796:	6861      	ldr	r1, [r4, #4]
    5798:	462a      	mov	r2, r5
    579a:	4620      	mov	r0, r4
    579c:	f7ff ff9e 	bl	56dc <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    57a0:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    57a2:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    57a4:	462a      	mov	r2, r5
    57a6:	4620      	mov	r0, r4
    57a8:	f7ff ff98 	bl	56dc <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    57ac:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    57ae:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    57b0:	68e1      	ldr	r1, [r4, #12]
    57b2:	4620      	mov	r0, r4
    57b4:	f7ff ff92 	bl	56dc <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    57b8:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
    57ba:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
    57be:	f002 0203 	and.w	r2, r2, #3
    57c2:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    57c4:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    57c8:	d10c      	bne.n	57e4 <drop_item_locked+0x9e>
		return item->skip.len;
    57ca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
    57ce:	089b      	lsrs	r3, r3, #2
    57d0:	d008      	beq.n	57e4 <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
    57d2:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    57d4:	68e1      	ldr	r1, [r4, #12]
    57d6:	462a      	mov	r2, r5
    57d8:	4620      	mov	r0, r4
    57da:	f7ff ff7f 	bl	56dc <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    57de:	e9c4 0002 	strd	r0, r0, [r4, #8]
    57e2:	e007      	b.n	57f4 <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
    57e4:	69a3      	ldr	r3, [r4, #24]
    57e6:	4630      	mov	r0, r6
    57e8:	4798      	blx	r3
    57ea:	4405      	add	r5, r0
			*user_packet = true;
    57ec:	2301      	movs	r3, #1
    57ee:	703b      	strb	r3, [r7, #0]
    57f0:	e7f0      	b.n	57d4 <drop_item_locked+0x8e>
		item = NULL;
    57f2:	4646      	mov	r6, r8
	}

	return item;
}
    57f4:	4630      	mov	r0, r6
    57f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000057fa <mpsc_pbuf_init>:
{
    57fa:	b538      	push	{r3, r4, r5, lr}
    57fc:	460d      	mov	r5, r1
    57fe:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    5800:	221c      	movs	r2, #28
    5802:	2100      	movs	r1, #0
    5804:	f000 fa33 	bl	5c6e <memset>
	buffer->get_wlen = cfg->get_wlen;
    5808:	68eb      	ldr	r3, [r5, #12]
    580a:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    580c:	68ab      	ldr	r3, [r5, #8]
	buffer->size = cfg->size;
    580e:	686a      	ldr	r2, [r5, #4]
	buffer->notify_drop = cfg->notify_drop;
    5810:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    5812:	682b      	ldr	r3, [r5, #0]
    5814:	61e3      	str	r3, [r4, #28]
	buffer->max_usage = 0;
    5816:	2300      	movs	r3, #0
    5818:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->size = cfg->size;
    581a:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
    581c:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    581e:	b122      	cbz	r2, 582a <mpsc_pbuf_init+0x30>
    5820:	1e51      	subs	r1, r2, #1
    5822:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    5824:	bf08      	it	eq
    5826:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
    582a:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    582c:	2201      	movs	r2, #1
    582e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    5832:	2100      	movs	r1, #0
}
    5834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5838:	f000 bd14 	b.w	6264 <z_impl_k_sem_init>

0000583c <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    583c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5840:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    5842:	6a03      	ldr	r3, [r0, #32]
    5844:	3b01      	subs	r3, #1
    5846:	428b      	cmp	r3, r1
{
    5848:	b085      	sub	sp, #20
    584a:	4604      	mov	r4, r0
    584c:	460f      	mov	r7, r1
    584e:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
    5850:	d364      	bcc.n	591c <mpsc_pbuf_alloc+0xe0>
	union mpsc_pbuf_generic *dropped_item = NULL;
    5852:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
    5854:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
    5856:	f100 0b28 	add.w	fp, r0, #40	; 0x28
	__asm__ volatile(
    585a:	f04f 0320 	mov.w	r3, #32
    585e:	f3ef 8611 	mrs	r6, BASEPRI
    5862:	f383 8812 	msr	BASEPRI_MAX, r3
    5866:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
    586a:	a903      	add	r1, sp, #12
    586c:	4620      	mov	r0, r4
    586e:	f7ff ff0f 	bl	5690 <free_space>
		if (free_wlen >= wlen) {
    5872:	9903      	ldr	r1, [sp, #12]
    5874:	42b9      	cmp	r1, r7
    5876:	d321      	bcc.n	58bc <mpsc_pbuf_alloc+0x80>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    5878:	6821      	ldr	r1, [r4, #0]
			item =
    587a:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    587c:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
    5880:	f022 0203 	bic.w	r2, r2, #3
    5884:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    5888:	4620      	mov	r0, r4
    588a:	463a      	mov	r2, r7
			item =
    588c:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
    5890:	f7ff ff24 	bl	56dc <idx_inc>
		cont = false;
    5894:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    5896:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
    5898:	f386 8811 	msr	BASEPRI, r6
    589c:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    58a0:	2b00      	cmp	r3, #0
    58a2:	d03d      	beq.n	5920 <mpsc_pbuf_alloc+0xe4>
    58a4:	2d00      	cmp	r5, #0
    58a6:	d0d8      	beq.n	585a <mpsc_pbuf_alloc+0x1e>
    58a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    58ac:	2b00      	cmp	r3, #0
    58ae:	d0d4      	beq.n	585a <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
    58b0:	4629      	mov	r1, r5
    58b2:	6963      	ldr	r3, [r4, #20]
    58b4:	4620      	mov	r0, r4
    58b6:	4798      	blx	r3
			dropped_item = NULL;
    58b8:	2500      	movs	r5, #0
    58ba:	e7ce      	b.n	585a <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
    58bc:	b128      	cbz	r0, 58ca <mpsc_pbuf_alloc+0x8e>
    58be:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
    58c0:	4620      	mov	r0, r4
    58c2:	f7ff ff19 	bl	56f8 <add_skip_item>
			cont = true;
    58c6:	9b01      	ldr	r3, [sp, #4]
    58c8:	e7e6      	b.n	5898 <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    58ca:	ea58 0309 	orrs.w	r3, r8, r9
    58ce:	d017      	beq.n	5900 <mpsc_pbuf_alloc+0xc4>
			   !k_is_in_isr()) {
    58d0:	f000 fcae 	bl	6230 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    58d4:	b9a0      	cbnz	r0, 5900 <mpsc_pbuf_alloc+0xc4>
    58d6:	f386 8811 	msr	BASEPRI, r6
    58da:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    58de:	4642      	mov	r2, r8
    58e0:	464b      	mov	r3, r9
    58e2:	4658      	mov	r0, fp
    58e4:	f7fe ffc2 	bl	486c <z_impl_k_sem_take>
	__asm__ volatile(
    58e8:	f04f 0320 	mov.w	r3, #32
    58ec:	f3ef 8611 	mrs	r6, BASEPRI
    58f0:	f383 8812 	msr	BASEPRI_MAX, r3
    58f4:	f3bf 8f6f 	isb	sy
			if (err == 0) {
    58f8:	fab0 f380 	clz	r3, r0
    58fc:	095b      	lsrs	r3, r3, #5
    58fe:	e7cb      	b.n	5898 <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    5900:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    5902:	9903      	ldr	r1, [sp, #12]
    5904:	f10d 030b 	add.w	r3, sp, #11
    5908:	f3c2 0240 	ubfx	r2, r2, #1, #1
    590c:	4620      	mov	r0, r4
    590e:	f7ff ff1a 	bl	5746 <drop_item_locked>
			cont = dropped_item != NULL;
    5912:	1e03      	subs	r3, r0, #0
    5914:	4605      	mov	r5, r0
    5916:	bf18      	it	ne
    5918:	2301      	movne	r3, #1
    591a:	e7bd      	b.n	5898 <mpsc_pbuf_alloc+0x5c>
		return NULL;
    591c:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    5920:	4650      	mov	r0, sl
    5922:	b005      	add	sp, #20
    5924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005928 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    5928:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    592a:	6983      	ldr	r3, [r0, #24]
{
    592c:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    592e:	4608      	mov	r0, r1
{
    5930:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    5932:	4798      	blx	r3
    5934:	4602      	mov	r2, r0
    5936:	f04f 0320 	mov.w	r3, #32
    593a:	f3ef 8611 	mrs	r6, BASEPRI
    593e:	f383 8812 	msr	BASEPRI_MAX, r3
    5942:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    5946:	782b      	ldrb	r3, [r5, #0]
    5948:	f043 0301 	orr.w	r3, r3, #1
    594c:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    594e:	6861      	ldr	r1, [r4, #4]
    5950:	4620      	mov	r0, r4
    5952:	f7ff fec3 	bl	56dc <idx_inc>
    5956:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    5958:	4620      	mov	r0, r4
    595a:	f7ff fee3 	bl	5724 <max_utilization_update>
	__asm__ volatile(
    595e:	f386 8811 	msr	BASEPRI, r6
    5962:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    5966:	bd70      	pop	{r4, r5, r6, pc}

00005968 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    5968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    596c:	4604      	mov	r4, r0
	__asm__ volatile(
    596e:	f04f 0320 	mov.w	r3, #32
    5972:	f3ef 8611 	mrs	r6, BASEPRI
    5976:	f383 8812 	msr	BASEPRI_MAX, r3
    597a:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    597e:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
    5982:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    5984:	bf88      	it	hi
    5986:	6a23      	ldrhi	r3, [r4, #32]
    5988:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    598a:	b1f3      	cbz	r3, 59ca <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
    598c:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
    598e:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
    5992:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
    5996:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
    599a:	d016      	beq.n	59ca <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
    599c:	2b02      	cmp	r3, #2
    599e:	d103      	bne.n	59a8 <mpsc_pbuf_claim+0x40>
		return item->skip.len;
    59a0:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    59a4:	08ad      	lsrs	r5, r5, #2
    59a6:	d115      	bne.n	59d4 <mpsc_pbuf_claim+0x6c>
    59a8:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
    59aa:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
    59ac:	d50f      	bpl.n	59ce <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
    59ae:	f042 0202 	orr.w	r2, r2, #2
    59b2:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
    59b6:	4640      	mov	r0, r8
    59b8:	4798      	blx	r3
    59ba:	4639      	mov	r1, r7
    59bc:	4602      	mov	r2, r0
    59be:	4620      	mov	r0, r4
    59c0:	f7ff fe8c 	bl	56dc <idx_inc>
		cont = false;
    59c4:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
    59c6:	60a0      	str	r0, [r4, #8]
    59c8:	e011      	b.n	59ee <mpsc_pbuf_claim+0x86>
			item = NULL;
    59ca:	4698      	mov	r8, r3
    59cc:	e00f      	b.n	59ee <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
    59ce:	4640      	mov	r0, r8
    59d0:	4798      	blx	r3
    59d2:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    59d4:	68a1      	ldr	r1, [r4, #8]
    59d6:	462a      	mov	r2, r5
    59d8:	4620      	mov	r0, r4
    59da:	f7ff fe7f 	bl	56dc <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
    59de:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    59e0:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    59e2:	462a      	mov	r2, r5
    59e4:	4620      	mov	r0, r4
    59e6:	f7ff fe79 	bl	56dc <idx_inc>
				cont = true;
    59ea:	2301      	movs	r3, #1
				buffer->rd_idx =
    59ec:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    59ee:	f386 8811 	msr	BASEPRI, r6
    59f2:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    59f6:	2b00      	cmp	r3, #0
    59f8:	d1b9      	bne.n	596e <mpsc_pbuf_claim+0x6>

	return item;
}
    59fa:	4640      	mov	r0, r8
    59fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005a00 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    5a00:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    5a02:	6983      	ldr	r3, [r0, #24]
{
    5a04:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    5a06:	4608      	mov	r0, r1
{
    5a08:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    5a0a:	4798      	blx	r3
    5a0c:	4602      	mov	r2, r0
	__asm__ volatile(
    5a0e:	f04f 0320 	mov.w	r3, #32
    5a12:	f3ef 8611 	mrs	r6, BASEPRI
    5a16:	f383 8812 	msr	BASEPRI_MAX, r3
    5a1a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    5a1e:	782b      	ldrb	r3, [r5, #0]
    5a20:	f36f 0300 	bfc	r3, #0, #1
    5a24:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    5a26:	6923      	ldr	r3, [r4, #16]
    5a28:	079b      	lsls	r3, r3, #30
    5a2a:	d505      	bpl.n	5a38 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    5a2c:	68e1      	ldr	r1, [r4, #12]
    5a2e:	69e3      	ldr	r3, [r4, #28]
    5a30:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    5a34:	429d      	cmp	r5, r3
    5a36:	d112      	bne.n	5a5e <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
    5a38:	782b      	ldrb	r3, [r5, #0]
    5a3a:	f36f 0341 	bfc	r3, #1, #1
    5a3e:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    5a40:	68e1      	ldr	r1, [r4, #12]
    5a42:	4620      	mov	r0, r4
    5a44:	f7ff fe4a 	bl	56dc <idx_inc>
    5a48:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    5a4a:	f386 8811 	msr	BASEPRI, r6
    5a4e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    5a52:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    5a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5a5a:	f7fe bee7 	b.w	482c <z_impl_k_sem_give>
		witem->skip.len = wlen;
    5a5e:	682b      	ldr	r3, [r5, #0]
    5a60:	f360 039f 	bfi	r3, r0, #2, #30
    5a64:	602b      	str	r3, [r5, #0]
    5a66:	e7f0      	b.n	5a4a <mpsc_pbuf_free+0x4a>

00005a68 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    5a68:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    5a6c:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
    5a6e:	bf8a      	itet	hi
    5a70:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    5a72:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    5a74:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    5a76:	1e18      	subs	r0, r3, #0
    5a78:	bf18      	it	ne
    5a7a:	2001      	movne	r0, #1
    5a7c:	4770      	bx	lr

00005a7e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    5a7e:	4770      	bx	lr

00005a80 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    5a80:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    5a82:	075b      	lsls	r3, r3, #29
    5a84:	d40b      	bmi.n	5a9e <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    5a86:	6803      	ldr	r3, [r0, #0]
    5a88:	8840      	ldrh	r0, [r0, #2]
    5a8a:	f3c3 2349 	ubfx	r3, r3, #9, #10
    5a8e:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    5a92:	4418      	add	r0, r3
    5a94:	3017      	adds	r0, #23
    5a96:	f020 0007 	bic.w	r0, r0, #7
    5a9a:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
    5a9c:	4770      	bx	lr
	return 0;
    5a9e:	2000      	movs	r0, #0
}
    5aa0:	4770      	bx	lr

00005aa2 <default_get_timestamp>:
    5aa2:	f000 ba6f 	b.w	5f84 <sys_clock_cycle_get_32>

00005aa6 <dummy_timestamp>:
    5aa6:	2000      	movs	r0, #0
    5aa8:	4770      	bx	lr

00005aaa <notify_drop>:
	z_log_dropped(true);
    5aaa:	2001      	movs	r0, #1
    5aac:	f7fb bbb6 	b.w	121c <z_log_dropped>

00005ab0 <get_msg>:
{
    5ab0:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
    5ab2:	f7fb fc27 	bl	1304 <z_log_msg2_claim>
}
    5ab6:	bd08      	pop	{r3, pc}

00005ab8 <z_log_get_tag>:
}
    5ab8:	2000      	movs	r0, #0
    5aba:	4770      	bx	lr

00005abc <buffer_write>:
{
    5abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5abe:	4606      	mov	r6, r0
    5ac0:	460d      	mov	r5, r1
    5ac2:	4614      	mov	r4, r2
    5ac4:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    5ac6:	4621      	mov	r1, r4
    5ac8:	4628      	mov	r0, r5
    5aca:	463a      	mov	r2, r7
    5acc:	47b0      	blx	r6
	} while (len != 0);
    5ace:	1a24      	subs	r4, r4, r0
		buf += processed;
    5ad0:	4405      	add	r5, r0
	} while (len != 0);
    5ad2:	d1f8      	bne.n	5ac6 <buffer_write+0xa>
}
    5ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005ad6 <log_output_flush>:
		     output->control_block->offset,
    5ad6:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    5ad8:	6881      	ldr	r1, [r0, #8]
{
    5ada:	b510      	push	{r4, lr}
    5adc:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    5ade:	e9d2 2300 	ldrd	r2, r3, [r2]
    5ae2:	6800      	ldr	r0, [r0, #0]
    5ae4:	f7ff ffea 	bl	5abc <buffer_write>
	output->control_block->offset = 0;
    5ae8:	6863      	ldr	r3, [r4, #4]
    5aea:	2200      	movs	r2, #0
    5aec:	601a      	str	r2, [r3, #0]
}
    5aee:	bd10      	pop	{r4, pc}

00005af0 <out_func>:
{
    5af0:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    5af2:	684b      	ldr	r3, [r1, #4]
    5af4:	681a      	ldr	r2, [r3, #0]
    5af6:	68cb      	ldr	r3, [r1, #12]
    5af8:	429a      	cmp	r2, r3
{
    5afa:	4605      	mov	r5, r0
    5afc:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    5afe:	d102      	bne.n	5b06 <out_func+0x16>
		log_output_flush(out_ctx);
    5b00:	4608      	mov	r0, r1
    5b02:	f7ff ffe8 	bl	5ad6 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    5b06:	6863      	ldr	r3, [r4, #4]
    5b08:	f3bf 8f5b 	dmb	ish
    5b0c:	e853 2f00 	ldrex	r2, [r3]
    5b10:	1c51      	adds	r1, r2, #1
    5b12:	e843 1000 	strex	r0, r1, [r3]
    5b16:	2800      	cmp	r0, #0
    5b18:	d1f8      	bne.n	5b0c <out_func+0x1c>
    5b1a:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    5b1e:	68a3      	ldr	r3, [r4, #8]
    5b20:	549d      	strb	r5, [r3, r2]
}
    5b22:	2000      	movs	r0, #0
    5b24:	bd38      	pop	{r3, r4, r5, pc}

00005b26 <cr_out_func>:
{
    5b26:	b538      	push	{r3, r4, r5, lr}
    5b28:	4605      	mov	r5, r0
    5b2a:	460c      	mov	r4, r1
	out_func(c, ctx);
    5b2c:	f7ff ffe0 	bl	5af0 <out_func>
	if (c == '\n') {
    5b30:	2d0a      	cmp	r5, #10
    5b32:	d103      	bne.n	5b3c <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    5b34:	4621      	mov	r1, r4
    5b36:	200d      	movs	r0, #13
    5b38:	f7ff ffda 	bl	5af0 <out_func>
}
    5b3c:	2000      	movs	r0, #0
    5b3e:	bd38      	pop	{r3, r4, r5, pc}

00005b40 <z_log_msg2_finalize>:
	!(IS_ENABLED(CONFIG_LOG_FRONTEND) && \
	 (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY) || log_backend_count_get() == 0))

void z_log_msg2_finalize(struct log_msg2 *msg, const void *source,
			 const struct log_msg2_desc desc, const void *data)
{
    5b40:	b570      	push	{r4, r5, r6, lr}
    5b42:	460e      	mov	r6, r1
    5b44:	4615      	mov	r5, r2
    5b46:	4619      	mov	r1, r3
	if (!msg) {
    5b48:	4604      	mov	r4, r0
    5b4a:	b918      	cbnz	r0, 5b54 <z_log_msg2_finalize+0x14>
	}

	msg->hdr.desc = desc;
	msg->hdr.source = source;
	z_log_msg2_commit(msg);
}
    5b4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    5b50:	f7fb bb64 	b.w	121c <z_log_dropped>
	if (data) {
    5b54:	b143      	cbz	r3, 5b68 <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
    5b56:	f100 0310 	add.w	r3, r0, #16
    5b5a:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    5b5e:	4418      	add	r0, r3
    5b60:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    5b64:	f000 f878 	bl	5c58 <memcpy>
	msg->hdr.source = source;
    5b68:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    5b6c:	4620      	mov	r0, r4
}
    5b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    5b72:	f7fb bc89 	b.w	1488 <z_log_msg2_commit>

00005b76 <z_impl_z_log_msg2_static_create>:

void z_impl_z_log_msg2_static_create(const void *source,
			      const struct log_msg2_desc desc,
			      uint8_t *package, const void *data)
{
    5b76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    5b7a:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    5b7e:	f3c1 2649 	ubfx	r6, r1, #9, #10
    5b82:	b089      	sub	sp, #36	; 0x24
    5b84:	4681      	mov	r9, r0
    5b86:	460d      	mov	r5, r1
    5b88:	4690      	mov	r8, r2
    5b8a:	469a      	mov	sl, r3
    5b8c:	3417      	adds	r4, #23

	struct log_msg2_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg2 *msg;

	if (inlen > 0) {
    5b8e:	b386      	cbz	r6, 5bf2 <z_impl_z_log_msg2_static_create+0x7c>
		uint32_t flags = CBPRINTF_PACKAGE_COPY_RW_STR;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    5b90:	2302      	movs	r3, #2
    5b92:	9300      	str	r3, [sp, #0]
    5b94:	f04f 0b04 	mov.w	fp, #4
    5b98:	2300      	movs	r3, #0
    5b9a:	af06      	add	r7, sp, #24
    5b9c:	4631      	mov	r1, r6
    5b9e:	461a      	mov	r2, r3
    5ba0:	f8cd b008 	str.w	fp, [sp, #8]
    5ba4:	9701      	str	r7, [sp, #4]
    5ba6:	4640      	mov	r0, r8
    5ba8:	9605      	str	r6, [sp, #20]
    5baa:	f7fa fca1 	bl	4f0 <cbprintf_package_copy>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    5bae:	f3c0 0309 	ubfx	r3, r0, #0, #10
    5bb2:	1918      	adds	r0, r3, r4
    5bb4:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    5bb8:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    5bba:	461e      	mov	r6, r3
    5bbc:	9304      	str	r3, [sp, #16]
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    5bbe:	f7fb fb99 	bl	12f4 <z_log_msg2_alloc>
		if (msg) {
    5bc2:	4604      	mov	r4, r0
    5bc4:	b150      	cbz	r0, 5bdc <z_impl_z_log_msg2_static_create+0x66>
			len = cbprintf_package_copy(package, inlen,
    5bc6:	2302      	movs	r3, #2
    5bc8:	9300      	str	r3, [sp, #0]
    5bca:	f100 0210 	add.w	r2, r0, #16
    5bce:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    5bd2:	9b04      	ldr	r3, [sp, #16]
    5bd4:	9905      	ldr	r1, [sp, #20]
    5bd6:	4640      	mov	r0, r8
    5bd8:	f7fa fc8a 	bl	4f0 <cbprintf_package_copy>
		}
	} else {
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
	}

	z_log_msg2_finalize(msg, source, out_desc, data);
    5bdc:	f366 2552 	bfi	r5, r6, #9, #10
    5be0:	4653      	mov	r3, sl
    5be2:	462a      	mov	r2, r5
    5be4:	4649      	mov	r1, r9
    5be6:	4620      	mov	r0, r4
}
    5be8:	b009      	add	sp, #36	; 0x24
    5bea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg2_finalize(msg, source, out_desc, data);
    5bee:	f7ff bfa7 	b.w	5b40 <z_log_msg2_finalize>
    5bf2:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    5bf6:	0880      	lsrs	r0, r0, #2
    5bf8:	f7fb fb7c 	bl	12f4 <z_log_msg2_alloc>
    5bfc:	4604      	mov	r4, r0
    5bfe:	e7ed      	b.n	5bdc <z_impl_z_log_msg2_static_create+0x66>

00005c00 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    5c00:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    5c02:	6800      	ldr	r0, [r0, #0]
    5c04:	f7fc b884 	b.w	1d10 <z_arm_fatal_error>

00005c08 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5c08:	2100      	movs	r1, #0
    5c0a:	2001      	movs	r0, #1
    5c0c:	f7fc b880 	b.w	1d10 <z_arm_fatal_error>

00005c10 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    5c10:	b508      	push	{r3, lr}
	handler();
    5c12:	f7fc f919 	bl	1e48 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    5c16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    5c1a:	f7fc b9f1 	b.w	2000 <z_arm_exc_exit>

00005c1e <z_log_msg2_static_create.constprop.0>:
    5c1e:	2300      	movs	r3, #0
    5c20:	f7ff bfa9 	b.w	5b76 <z_impl_z_log_msg2_static_create>

00005c24 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    5c24:	3901      	subs	r1, #1
    5c26:	4603      	mov	r3, r0
    5c28:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    5c2c:	b90a      	cbnz	r2, 5c32 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    5c2e:	701a      	strb	r2, [r3, #0]

	return dest;
}
    5c30:	4770      	bx	lr
		*d = *s;
    5c32:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    5c36:	e7f7      	b.n	5c28 <strcpy+0x4>

00005c38 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    5c38:	4603      	mov	r3, r0
	size_t n = 0;
    5c3a:	2000      	movs	r0, #0

	while (*s != '\0') {
    5c3c:	5c1a      	ldrb	r2, [r3, r0]
    5c3e:	b902      	cbnz	r2, 5c42 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    5c40:	4770      	bx	lr
		n++;
    5c42:	3001      	adds	r0, #1
    5c44:	e7fa      	b.n	5c3c <strlen+0x4>

00005c46 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    5c46:	4603      	mov	r3, r0
	size_t n = 0;
    5c48:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    5c4a:	5c1a      	ldrb	r2, [r3, r0]
    5c4c:	b10a      	cbz	r2, 5c52 <strnlen+0xc>
    5c4e:	4288      	cmp	r0, r1
    5c50:	d100      	bne.n	5c54 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    5c52:	4770      	bx	lr
		n++;
    5c54:	3001      	adds	r0, #1
    5c56:	e7f8      	b.n	5c4a <strnlen+0x4>

00005c58 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    5c58:	b510      	push	{r4, lr}
    5c5a:	1e43      	subs	r3, r0, #1
    5c5c:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    5c5e:	4291      	cmp	r1, r2
    5c60:	d100      	bne.n	5c64 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    5c62:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    5c64:	f811 4b01 	ldrb.w	r4, [r1], #1
    5c68:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    5c6c:	e7f7      	b.n	5c5e <memcpy+0x6>

00005c6e <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    5c6e:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    5c70:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    5c72:	4603      	mov	r3, r0
	while (n > 0) {
    5c74:	4293      	cmp	r3, r2
    5c76:	d100      	bne.n	5c7a <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    5c78:	4770      	bx	lr
		*(d_byte++) = c_byte;
    5c7a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5c7e:	e7f9      	b.n	5c74 <memset+0x6>

00005c80 <_stdout_hook_default>:
}
    5c80:	f04f 30ff 	mov.w	r0, #4294967295
    5c84:	4770      	bx	lr

00005c86 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    5c86:	2806      	cmp	r0, #6
    5c88:	d108      	bne.n	5c9c <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    5c8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c8e:	2201      	movs	r2, #1
    5c90:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    5c94:	f3bf 8f4f 	dsb	sy
        __WFE();
    5c98:	bf20      	wfe
    while (true)
    5c9a:	e7fd      	b.n	5c98 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    5c9c:	4770      	bx	lr

00005c9e <pm_state_exit_post_ops>:
    5c9e:	2300      	movs	r3, #0
    5ca0:	f383 8811 	msr	BASEPRI, r3
    5ca4:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    5ca8:	4770      	bx	lr

00005caa <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5caa:	6903      	ldr	r3, [r0, #16]
    5cac:	b2c9      	uxtb	r1, r1
    5cae:	220c      	movs	r2, #12
    5cb0:	fb01 3302 	mla	r3, r1, r2, r3
    5cb4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    5cb6:	f000 0007 	and.w	r0, r0, #7
    5cba:	4770      	bx	lr

00005cbc <set_on_state>:
	__asm__ volatile(
    5cbc:	f04f 0320 	mov.w	r3, #32
    5cc0:	f3ef 8211 	mrs	r2, BASEPRI
    5cc4:	f383 8812 	msr	BASEPRI_MAX, r3
    5cc8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    5ccc:	6803      	ldr	r3, [r0, #0]
    5cce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5cd2:	f043 0302 	orr.w	r3, r3, #2
    5cd6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    5cd8:	f382 8811 	msr	BASEPRI, r2
    5cdc:	f3bf 8f6f 	isb	sy
}
    5ce0:	4770      	bx	lr

00005ce2 <stop>:
{
    5ce2:	4603      	mov	r3, r0
    5ce4:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    5ce6:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    5ce8:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    5cea:	f04f 0420 	mov.w	r4, #32
    5cee:	f3ef 8611 	mrs	r6, BASEPRI
    5cf2:	f384 8812 	msr	BASEPRI_MAX, r4
    5cf6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5cfa:	250c      	movs	r5, #12
    5cfc:	fb05 0401 	mla	r4, r5, r1, r0
    5d00:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    5d02:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    5d06:	d001      	beq.n	5d0c <stop+0x2a>
    5d08:	42a2      	cmp	r2, r4
    5d0a:	d111      	bne.n	5d30 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    5d0c:	fb05 0001 	mla	r0, r5, r1, r0
    5d10:	2201      	movs	r2, #1
    5d12:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    5d14:	2000      	movs	r0, #0
	__asm__ volatile(
    5d16:	f386 8811 	msr	BASEPRI, r6
    5d1a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    5d1e:	b930      	cbnz	r0, 5d2e <stop+0x4c>
	get_sub_config(dev, type)->stop();
    5d20:	685b      	ldr	r3, [r3, #4]
    5d22:	220c      	movs	r2, #12
    5d24:	fb02 3101 	mla	r1, r2, r1, r3
    5d28:	684b      	ldr	r3, [r1, #4]
    5d2a:	4798      	blx	r3
	return 0;
    5d2c:	2000      	movs	r0, #0
}
    5d2e:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    5d30:	f04f 30ff 	mov.w	r0, #4294967295
    5d34:	e7ef      	b.n	5d16 <stop+0x34>

00005d36 <api_stop>:
	return stop(dev, subsys, CTX_API);
    5d36:	2280      	movs	r2, #128	; 0x80
    5d38:	f7ff bfd3 	b.w	5ce2 <stop>

00005d3c <async_start>:
{
    5d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d3e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    5d40:	6904      	ldr	r4, [r0, #16]
{
    5d42:	4605      	mov	r5, r0
    5d44:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    5d46:	f04f 0020 	mov.w	r0, #32
    5d4a:	f3ef 8c11 	mrs	ip, BASEPRI
    5d4e:	f380 8812 	msr	BASEPRI_MAX, r0
    5d52:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5d56:	260c      	movs	r6, #12
    5d58:	fb06 4601 	mla	r6, r6, r1, r4
    5d5c:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    5d5e:	f000 0e07 	and.w	lr, r0, #7
    5d62:	f1be 0f01 	cmp.w	lr, #1
    5d66:	d110      	bne.n	5d8a <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    5d68:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    5d6a:	2600      	movs	r6, #0
	__asm__ volatile(
    5d6c:	f38c 8811 	msr	BASEPRI, ip
    5d70:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    5d74:	b93e      	cbnz	r6, 5d86 <async_start+0x4a>
	subdata->cb = cb;
    5d76:	200c      	movs	r0, #12
    5d78:	4341      	muls	r1, r0
    5d7a:	440c      	add	r4, r1
	subdata->user_data = user_data;
    5d7c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    5d80:	686b      	ldr	r3, [r5, #4]
    5d82:	585b      	ldr	r3, [r3, r1]
    5d84:	4798      	blx	r3
}
    5d86:	4630      	mov	r0, r6
    5d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    5d8a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    5d8e:	4287      	cmp	r7, r0
    5d90:	bf14      	ite	ne
    5d92:	f04f 36ff 	movne.w	r6, #4294967295
    5d96:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    5d9a:	e7e7      	b.n	5d6c <async_start+0x30>

00005d9c <api_start>:
{
    5d9c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    5d9e:	2480      	movs	r4, #128	; 0x80
    5da0:	9400      	str	r4, [sp, #0]
    5da2:	f7ff ffcb 	bl	5d3c <async_start>
}
    5da6:	b002      	add	sp, #8
    5da8:	bd10      	pop	{r4, pc}

00005daa <onoff_started_callback>:
	return &data->mgr[type];
    5daa:	6900      	ldr	r0, [r0, #16]
{
    5dac:	b410      	push	{r4}
	return &data->mgr[type];
    5dae:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    5db0:	241c      	movs	r4, #28
    5db2:	fb03 0004 	mla	r0, r3, r4, r0
    5db6:	2100      	movs	r1, #0
}
    5db8:	bc10      	pop	{r4}
	notify(mgr, 0);
    5dba:	4710      	bx	r2

00005dbc <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    5dbc:	2000      	movs	r0, #0
    5dbe:	f000 b98c 	b.w	60da <nrfx_clock_start>

00005dc2 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5dc2:	2000      	movs	r0, #0
    5dc4:	f000 b9c6 	b.w	6154 <nrfx_clock_stop>

00005dc8 <blocking_start_callback>:
{
    5dc8:	4610      	mov	r0, r2
    5dca:	f7fe bd2f 	b.w	482c <z_impl_k_sem_give>

00005dce <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5dce:	6843      	ldr	r3, [r0, #4]
    5dd0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    5dd2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    5dd6:	600b      	str	r3, [r1, #0]
}
    5dd8:	2000      	movs	r0, #0
    5dda:	4770      	bx	lr

00005ddc <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5ddc:	6843      	ldr	r3, [r0, #4]
    5dde:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    5de0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    5de4:	4042      	eors	r2, r0
    5de6:	400a      	ands	r2, r1
    5de8:	4042      	eors	r2, r0
    p_reg->OUT = value;
    5dea:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    5dee:	2000      	movs	r0, #0
    5df0:	4770      	bx	lr

00005df2 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5df2:	6843      	ldr	r3, [r0, #4]
    5df4:	685b      	ldr	r3, [r3, #4]
}
    5df6:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    5df8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    5dfc:	4770      	bx	lr

00005dfe <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5dfe:	6843      	ldr	r3, [r0, #4]
    5e00:	685b      	ldr	r3, [r3, #4]
}
    5e02:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    5e04:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    5e08:	4770      	bx	lr

00005e0a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5e0a:	6843      	ldr	r3, [r0, #4]
    5e0c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    5e0e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    5e12:	404b      	eors	r3, r1
    p_reg->OUT = value;
    5e14:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    5e18:	2000      	movs	r0, #0
    5e1a:	4770      	bx	lr

00005e1c <gpio_nrfx_manage_callback>:
	return port->data;
    5e1c:	6903      	ldr	r3, [r0, #16]
	return list->head;
    5e1e:	6858      	ldr	r0, [r3, #4]
{
    5e20:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    5e22:	b158      	cbz	r0, 5e3c <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5e24:	2400      	movs	r4, #0
    5e26:	4281      	cmp	r1, r0
    5e28:	d112      	bne.n	5e50 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    5e2a:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    5e2c:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    5e2e:	b954      	cbnz	r4, 5e46 <gpio_nrfx_manage_callback+0x2a>
    5e30:	428d      	cmp	r5, r1
	list->head = node;
    5e32:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    5e34:	d100      	bne.n	5e38 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    5e36:	6098      	str	r0, [r3, #8]
	parent->next = child;
    5e38:	2000      	movs	r0, #0
    5e3a:	6008      	str	r0, [r1, #0]
	if (set) {
    5e3c:	b96a      	cbnz	r2, 5e5a <gpio_nrfx_manage_callback+0x3e>
	return 0;
    5e3e:	2000      	movs	r0, #0
}
    5e40:	bd30      	pop	{r4, r5, pc}
    5e42:	4628      	mov	r0, r5
    5e44:	e7ef      	b.n	5e26 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    5e46:	428d      	cmp	r5, r1
	parent->next = child;
    5e48:	6020      	str	r0, [r4, #0]
	list->tail = node;
    5e4a:	bf08      	it	eq
    5e4c:	609c      	streq	r4, [r3, #8]
}
    5e4e:	e7f3      	b.n	5e38 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    5e50:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5e52:	4604      	mov	r4, r0
    5e54:	2d00      	cmp	r5, #0
    5e56:	d1f4      	bne.n	5e42 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    5e58:	b13a      	cbz	r2, 5e6a <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    5e5a:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    5e5c:	685a      	ldr	r2, [r3, #4]
    5e5e:	600a      	str	r2, [r1, #0]
	list->head = node;
    5e60:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    5e62:	2800      	cmp	r0, #0
    5e64:	d1eb      	bne.n	5e3e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    5e66:	6099      	str	r1, [r3, #8]
}
    5e68:	e7ea      	b.n	5e40 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    5e6a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5e6e:	e7e7      	b.n	5e40 <gpio_nrfx_manage_callback+0x24>

00005e70 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    5e70:	6902      	ldr	r2, [r0, #16]
{
    5e72:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    5e74:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    5e78:	e883 0003 	stmia.w	r3, {r0, r1}
}
    5e7c:	2000      	movs	r0, #0
    5e7e:	4770      	bx	lr

00005e80 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    5e80:	6843      	ldr	r3, [r0, #4]
    5e82:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5e84:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5e88:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    5e8c:	4770      	bx	lr

00005e8e <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    5e8e:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    5e90:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    5e92:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5e94:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5e98:	b148      	cbz	r0, 5eae <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    5e9a:	7c52      	ldrb	r2, [r2, #17]
    5e9c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e9e:	2000      	movs	r0, #0
    5ea0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    5ea4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5ea8:	2201      	movs	r2, #1
    5eaa:	601a      	str	r2, [r3, #0]
	return 0;
    5eac:	4770      	bx	lr
		return -1;
    5eae:	f04f 30ff 	mov.w	r0, #4294967295
}
    5eb2:	4770      	bx	lr

00005eb4 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    5eb4:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    5eb6:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5eb8:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5ebc:	b940      	cbnz	r0, 5ed0 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    5ebe:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5ec0:	079b      	lsls	r3, r3, #30
    5ec2:	d406      	bmi.n	5ed2 <is_tx_ready.isra.0+0x1e>
    5ec4:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    5ec8:	3800      	subs	r0, #0
    5eca:	bf18      	it	ne
    5ecc:	2001      	movne	r0, #1
    5ece:	4770      	bx	lr
    5ed0:	2001      	movs	r0, #1
}
    5ed2:	4770      	bx	lr

00005ed4 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    5ed4:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    5ed6:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    5ed8:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5edc:	05c9      	lsls	r1, r1, #23
    5ede:	d518      	bpl.n	5f12 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ee0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    5ee4:	b1a9      	cbz	r1, 5f12 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    5ee6:	f04f 0020 	mov.w	r0, #32
    5eea:	f3ef 8111 	mrs	r1, BASEPRI
    5eee:	f380 8812 	msr	BASEPRI_MAX, r0
    5ef2:	f3bf 8f6f 	isb	sy
    5ef6:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5efa:	b130      	cbz	r0, 5f0a <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5efc:	2000      	movs	r0, #0
    5efe:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    5f02:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f06:	2001      	movs	r0, #1
    5f08:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    5f0a:	f381 8811 	msr	BASEPRI, r1
    5f0e:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5f12:	6852      	ldr	r2, [r2, #4]
    5f14:	06d2      	lsls	r2, r2, #27
    5f16:	d515      	bpl.n	5f44 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    5f18:	f04f 0120 	mov.w	r1, #32
    5f1c:	f3ef 8211 	mrs	r2, BASEPRI
    5f20:	f381 8812 	msr	BASEPRI_MAX, r1
    5f24:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5f28:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    5f2c:	b111      	cbz	r1, 5f34 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5f2e:	2100      	movs	r1, #0
    5f30:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    5f34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    5f38:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    5f3c:	f382 8811 	msr	BASEPRI, r2
    5f40:	f3bf 8f6f 	isb	sy
}
    5f44:	4770      	bx	lr

00005f46 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    5f46:	b510      	push	{r4, lr}
    5f48:	2200      	movs	r2, #0
    5f4a:	4604      	mov	r4, r0
    5f4c:	2101      	movs	r1, #1
    5f4e:	2028      	movs	r0, #40	; 0x28
    5f50:	f7fb ff62 	bl	1e18 <z_arm_irq_priority_set>
    5f54:	2028      	movs	r0, #40	; 0x28
    5f56:	f7fb ff41 	bl	1ddc <arch_irq_enable>
    5f5a:	4620      	mov	r0, r4
    5f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5f60:	f7fd b8a4 	b.w	30ac <uarte_instance_init.constprop.0>

00005f64 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    5f64:	b510      	push	{r4, lr}
    5f66:	2200      	movs	r2, #0
    5f68:	4604      	mov	r4, r0
    5f6a:	2101      	movs	r1, #1
    5f6c:	2002      	movs	r0, #2
    5f6e:	f7fb ff53 	bl	1e18 <z_arm_irq_priority_set>
    5f72:	2002      	movs	r0, #2
    5f74:	f7fb ff32 	bl	1ddc <arch_irq_enable>
    5f78:	4620      	mov	r0, r4
    5f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5f7e:	f7fd b895 	b.w	30ac <uarte_instance_init.constprop.0>

00005f82 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    5f82:	4770      	bx	lr

00005f84 <sys_clock_cycle_get_32>:
{
    5f84:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    5f86:	f7fd fa0b 	bl	33a0 <z_nrf_rtc_timer_read>
}
    5f8a:	bd08      	pop	{r3, pc}

00005f8c <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    5f8c:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    5f8e:	6843      	ldr	r3, [r0, #4]
    5f90:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    5f92:	7a03      	ldrb	r3, [r0, #8]
    5f94:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    5f98:	3b01      	subs	r3, #1
    5f9a:	00db      	lsls	r3, r3, #3
    5f9c:	6845      	ldr	r5, [r0, #4]
    5f9e:	6814      	ldr	r4, [r2, #0]
    5fa0:	441d      	add	r5, r3
    5fa2:	42ac      	cmp	r4, r5
    5fa4:	d902      	bls.n	5fac <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    5fa6:	f06f 0001 	mvn.w	r0, #1
}
    5faa:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    5fac:	7965      	ldrb	r5, [r4, #5]
    5fae:	428d      	cmp	r5, r1
    5fb0:	d002      	beq.n	5fb8 <pinctrl_lookup_state+0x2c>
		(*state)++;
    5fb2:	3408      	adds	r4, #8
    5fb4:	6014      	str	r4, [r2, #0]
    5fb6:	e7f1      	b.n	5f9c <pinctrl_lookup_state+0x10>
			return 0;
    5fb8:	2000      	movs	r0, #0
    5fba:	e7f6      	b.n	5faa <pinctrl_lookup_state+0x1e>

00005fbc <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    5fbc:	b570      	push	{r4, r5, r6, lr}
    5fbe:	4615      	mov	r5, r2
    5fc0:	4604      	mov	r4, r0
    5fc2:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    5fc6:	42b4      	cmp	r4, r6
    5fc8:	d101      	bne.n	5fce <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    5fca:	2000      	movs	r0, #0
}
    5fcc:	bd70      	pop	{r4, r5, r6, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    5fce:	6823      	ldr	r3, [r4, #0]
		switch (NRF_GET_FUN(pins[i])) {
    5fd0:	0c1a      	lsrs	r2, r3, #16
    5fd2:	2a03      	cmp	r2, #3
    5fd4:	d823      	bhi.n	601e <pinctrl_configure_pins+0x62>
    5fd6:	e8df f002 	tbb	[pc, r2]
    5fda:	1202      	.short	0x1202
    5fdc:	1d18      	.short	0x1d18
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    5fde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5fe2:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    5fe6:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
    5fe8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    5fec:	f7fd fbb2 	bl	3754 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5ff0:	2201      	movs	r2, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5ff2:	6820      	ldr	r0, [r4, #0]
    5ff4:	4611      	mov	r1, r2
    5ff6:	f7fd fb8b 	bl	3710 <nrf_pin_configure.constprop.0>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    5ffa:	3404      	adds	r4, #4
    5ffc:	e7e3      	b.n	5fc6 <pinctrl_configure_pins+0xa>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    5ffe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6002:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    6006:	2200      	movs	r2, #0
    6008:	e7f3      	b.n	5ff2 <pinctrl_configure_pins+0x36>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    600a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    600e:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    6012:	e7e8      	b.n	5fe6 <pinctrl_configure_pins+0x2a>
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    6014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6018:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
    601c:	e7f3      	b.n	6006 <pinctrl_configure_pins+0x4a>
		switch (NRF_GET_FUN(pins[i])) {
    601e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6022:	e7d3      	b.n	5fcc <pinctrl_configure_pins+0x10>

00006024 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    6024:	4700      	bx	r0

00006026 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    6026:	f000 ba34 	b.w	6492 <z_impl_k_busy_wait>

0000602a <clock_stop>:
{
    602a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    602c:	4604      	mov	r4, r0
    602e:	b118      	cbz	r0, 6038 <clock_stop+0xe>
    6030:	2801      	cmp	r0, #1
    6032:	d024      	beq.n	607e <clock_stop+0x54>
}
    6034:	b003      	add	sp, #12
    6036:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6038:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    603c:	2202      	movs	r2, #2
    603e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6042:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    6046:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    604a:	2201      	movs	r2, #1
    604c:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    604e:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6050:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    6052:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6056:	bf14      	ite	ne
    6058:	2500      	movne	r5, #0
    605a:	f10d 0507 	addeq.w	r5, sp, #7
    605e:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6062:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    6066:	b1ac      	cbz	r4, 6094 <clock_stop+0x6a>
    6068:	2c01      	cmp	r4, #1
    606a:	d1e3      	bne.n	6034 <clock_stop+0xa>
            if (p_clk_src != NULL)
    606c:	b125      	cbz	r5, 6078 <clock_stop+0x4e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    606e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6072:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6076:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6078:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    607c:	e012      	b.n	60a4 <clock_stop+0x7a>
    p_reg->INTENCLR = mask;
    607e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6082:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    6084:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6088:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    608c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6090:	6058      	str	r0, [r3, #4]
}
    6092:	e7dc      	b.n	604e <clock_stop+0x24>
            if (p_clk_src != NULL)
    6094:	b125      	cbz	r5, 60a0 <clock_stop+0x76>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6096:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    609a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    609e:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    60a0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    60a4:	03db      	lsls	r3, r3, #15
    60a6:	d5c5      	bpl.n	6034 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    60a8:	b92d      	cbnz	r5, 60b6 <clock_stop+0x8c>
    60aa:	2001      	movs	r0, #1
    60ac:	f7ff ffbb 	bl	6026 <nrfx_busy_wait>
    60b0:	3f01      	subs	r7, #1
    60b2:	d1d8      	bne.n	6066 <clock_stop+0x3c>
    60b4:	e7be      	b.n	6034 <clock_stop+0xa>
    60b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    60ba:	2b01      	cmp	r3, #1
    60bc:	d0f5      	beq.n	60aa <clock_stop+0x80>
    60be:	e7b9      	b.n	6034 <clock_stop+0xa>

000060c0 <nrfx_clock_enable>:
{
    60c0:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    60c2:	2000      	movs	r0, #0
    60c4:	f7fb fe9a 	bl	1dfc <arch_irq_is_enabled>
    60c8:	b908      	cbnz	r0, 60ce <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    60ca:	f7fb fe87 	bl	1ddc <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    60ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    60d2:	2200      	movs	r2, #0
    60d4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    60d8:	bd08      	pop	{r3, pc}

000060da <nrfx_clock_start>:
{
    60da:	b508      	push	{r3, lr}
    switch (domain)
    60dc:	b110      	cbz	r0, 60e4 <nrfx_clock_start+0xa>
    60de:	2801      	cmp	r0, #1
    60e0:	d02d      	beq.n	613e <nrfx_clock_start+0x64>
}
    60e2:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    60e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    60e8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    60ec:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    60f0:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    60f4:	d10b      	bne.n	610e <nrfx_clock_start+0x34>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    60f6:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    60fa:	07c9      	lsls	r1, r1, #31
    60fc:	d510      	bpl.n	6120 <nrfx_clock_start+0x46>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    60fe:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
    6102:	079b      	lsls	r3, r3, #30
    6104:	d408      	bmi.n	6118 <nrfx_clock_start+0x3e>
    p_reg->INTENSET = mask;
    6106:	2302      	movs	r3, #2
    6108:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    610c:	e7e9      	b.n	60e2 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    610e:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6112:	2b01      	cmp	r3, #1
    6114:	d004      	beq.n	6120 <nrfx_clock_start+0x46>
    if (!is_correct_clk)
    6116:	b11b      	cbz	r3, 6120 <nrfx_clock_start+0x46>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6118:	2000      	movs	r0, #0
    611a:	f7ff ff86 	bl	602a <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    611e:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    6120:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6124:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6128:	2300      	movs	r3, #0
    612a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    612e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    6132:	2302      	movs	r3, #2
    6134:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6138:	2301      	movs	r3, #1
    613a:	6093      	str	r3, [r2, #8]
}
    613c:	e7d1      	b.n	60e2 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    613e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6142:	2200      	movs	r2, #0
    6144:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6148:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    614c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6150:	6018      	str	r0, [r3, #0]
}
    6152:	e7c6      	b.n	60e2 <nrfx_clock_start+0x8>

00006154 <nrfx_clock_stop>:
    clock_stop(domain);
    6154:	f7ff bf69 	b.w	602a <clock_stop>

00006158 <nrf_gpio_reconfigure>:
{
    6158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    615a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    615c:	a801      	add	r0, sp, #4
{
    615e:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    6162:	4617      	mov	r7, r2
    6164:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6166:	f7fd fc5b 	bl	3a20 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    616a:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    616c:	2f00      	cmp	r7, #0
    616e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    6172:	bf14      	ite	ne
    6174:	2302      	movne	r3, #2
    6176:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    6178:	2900      	cmp	r1, #0
    617a:	bf18      	it	ne
    617c:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6180:	2d00      	cmp	r5, #0
    6182:	bf14      	ite	ne
    6184:	f04f 0c0c 	movne.w	ip, #12
    6188:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    618c:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    618e:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6192:	bf14      	ite	ne
    6194:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    6198:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    619c:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    619e:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    61a2:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    61a6:	bf14      	ite	ne
    61a8:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    61ac:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    61b0:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    61b4:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    61b8:	b101      	cbz	r1, 61bc <nrf_gpio_reconfigure+0x64>
    61ba:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    61bc:	b10f      	cbz	r7, 61c2 <nrf_gpio_reconfigure+0x6a>
    61be:	783f      	ldrb	r7, [r7, #0]
    61c0:	007f      	lsls	r7, r7, #1
    61c2:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    61c4:	b10d      	cbz	r5, 61ca <nrf_gpio_reconfigure+0x72>
    61c6:	782d      	ldrb	r5, [r5, #0]
    61c8:	00ad      	lsls	r5, r5, #2
    61ca:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    61cc:	b10c      	cbz	r4, 61d2 <nrf_gpio_reconfigure+0x7a>
    61ce:	7822      	ldrb	r2, [r4, #0]
    61d0:	0214      	lsls	r4, r2, #8
    61d2:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    61d4:	b10e      	cbz	r6, 61da <nrf_gpio_reconfigure+0x82>
    61d6:	7836      	ldrb	r6, [r6, #0]
    61d8:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    61da:	432c      	orrs	r4, r5
    61dc:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    61de:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    61e2:	b003      	add	sp, #12
    61e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000061e6 <nrf_gpio_cfg_sense_set>:
{
    61e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    61e8:	f10d 030f 	add.w	r3, sp, #15
    61ec:	9301      	str	r3, [sp, #4]
    61ee:	2300      	movs	r3, #0
{
    61f0:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    61f4:	9300      	str	r3, [sp, #0]
    61f6:	461a      	mov	r2, r3
    61f8:	4619      	mov	r1, r3
    61fa:	f7ff ffad 	bl	6158 <nrf_gpio_reconfigure>
}
    61fe:	b005      	add	sp, #20
    6200:	f85d fb04 	ldr.w	pc, [sp], #4

00006204 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    6204:	f7fd bf72 	b.w	40ec <_DoInit>

00006208 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    6208:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    620a:	f7ff fffb 	bl	6204 <SEGGER_RTT_Init>

	return 0;
}
    620e:	2000      	movs	r0, #0
    6210:	bd08      	pop	{r3, pc}

00006212 <z_device_state_init>:
}
    6212:	4770      	bx	lr

00006214 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6214:	b138      	cbz	r0, 6226 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6216:	68c3      	ldr	r3, [r0, #12]
    6218:	8818      	ldrh	r0, [r3, #0]
    621a:	f3c0 0008 	ubfx	r0, r0, #0, #9
    621e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    6222:	4258      	negs	r0, r3
    6224:	4158      	adcs	r0, r3
}
    6226:	4770      	bx	lr

00006228 <z_early_memset>:
	(void) memset(dst, c, n);
    6228:	f7ff bd21 	b.w	5c6e <memset>

0000622c <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    622c:	f7ff bd14 	b.w	5c58 <memcpy>

00006230 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6230:	f3ef 8005 	mrs	r0, IPSR
}
    6234:	3800      	subs	r0, #0
    6236:	bf18      	it	ne
    6238:	2001      	movne	r0, #1
    623a:	4770      	bx	lr

0000623c <z_impl_k_thread_name_set>:
}
    623c:	f06f 0057 	mvn.w	r0, #87	; 0x57
    6240:	4770      	bx	lr

00006242 <k_thread_name_get>:
}
    6242:	2000      	movs	r0, #0
    6244:	4770      	bx	lr

00006246 <z_pm_save_idle_exit>:
{
    6246:	b508      	push	{r3, lr}
	pm_system_resume();
    6248:	f7fb fc2c 	bl	1aa4 <pm_system_resume>
}
    624c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    6250:	f7ff be97 	b.w	5f82 <sys_clock_idle_exit>

00006254 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    6254:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6258:	428b      	cmp	r3, r1
    625a:	d001      	beq.n	6260 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    625c:	f7fe bcdc 	b.w	4c18 <z_set_prio>
}
    6260:	2000      	movs	r0, #0
    6262:	4770      	bx	lr

00006264 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    6264:	b13a      	cbz	r2, 6276 <z_impl_k_sem_init+0x12>
    6266:	428a      	cmp	r2, r1
    6268:	d305      	bcc.n	6276 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    626a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    626e:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    6272:	2000      	movs	r0, #0
    6274:	4770      	bx	lr
		return -EINVAL;
    6276:	f06f 0015 	mvn.w	r0, #21
}
    627a:	4770      	bx	lr

0000627c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    627c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    6280:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6282:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6284:	2300      	movs	r3, #0
	node->prev = NULL;
    6286:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    628a:	4770      	bx	lr

0000628c <unpend_thread_no_timeout>:
{
    628c:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    628e:	f7ff fff5 	bl	627c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6292:	7b43      	ldrb	r3, [r0, #13]
    6294:	f023 0302 	bic.w	r3, r3, #2
    6298:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    629a:	2300      	movs	r3, #0
    629c:	6083      	str	r3, [r0, #8]
}
    629e:	bd08      	pop	{r3, pc}

000062a0 <z_unpend_thread_no_timeout>:
{
    62a0:	b508      	push	{r3, lr}
	__asm__ volatile(
    62a2:	f04f 0320 	mov.w	r3, #32
    62a6:	f3ef 8111 	mrs	r1, BASEPRI
    62aa:	f383 8812 	msr	BASEPRI_MAX, r3
    62ae:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    62b2:	f7ff ffeb 	bl	628c <unpend_thread_no_timeout>
	__asm__ volatile(
    62b6:	f381 8811 	msr	BASEPRI, r1
    62ba:	f3bf 8f6f 	isb	sy
}
    62be:	bd08      	pop	{r3, pc}

000062c0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    62c0:	4603      	mov	r3, r0
    62c2:	b920      	cbnz	r0, 62ce <z_reschedule_irqlock+0xe>
    62c4:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    62c8:	b90a      	cbnz	r2, 62ce <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    62ca:	f7fb bddd 	b.w	1e88 <arch_swap>
    62ce:	f383 8811 	msr	BASEPRI, r3
    62d2:	f3bf 8f6f 	isb	sy
}
    62d6:	4770      	bx	lr

000062d8 <z_reschedule_unlocked>:
	__asm__ volatile(
    62d8:	f04f 0320 	mov.w	r3, #32
    62dc:	f3ef 8011 	mrs	r0, BASEPRI
    62e0:	f383 8812 	msr	BASEPRI_MAX, r3
    62e4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    62e8:	f7ff bfea 	b.w	62c0 <z_reschedule_irqlock>

000062ec <z_priq_dumb_best>:
{
    62ec:	4603      	mov	r3, r0
	return list->head == list;
    62ee:	6800      	ldr	r0, [r0, #0]
}
    62f0:	4283      	cmp	r3, r0
    62f2:	bf08      	it	eq
    62f4:	2000      	moveq	r0, #0
    62f6:	4770      	bx	lr

000062f8 <z_ready_thread>:
{
    62f8:	b510      	push	{r4, lr}
    62fa:	f04f 0320 	mov.w	r3, #32
    62fe:	f3ef 8411 	mrs	r4, BASEPRI
    6302:	f383 8812 	msr	BASEPRI_MAX, r3
    6306:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    630a:	f7fe fbdf 	bl	4acc <ready_thread>
	__asm__ volatile(
    630e:	f384 8811 	msr	BASEPRI, r4
    6312:	f3bf 8f6f 	isb	sy
}
    6316:	bd10      	pop	{r4, pc}

00006318 <z_thread_timeout>:
{
    6318:	b510      	push	{r4, lr}
    631a:	4601      	mov	r1, r0
	__asm__ volatile(
    631c:	f04f 0320 	mov.w	r3, #32
    6320:	f3ef 8411 	mrs	r4, BASEPRI
    6324:	f383 8812 	msr	BASEPRI_MAX, r3
    6328:	f3bf 8f6f 	isb	sy
		if (!killed) {
    632c:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    6330:	f013 0f28 	tst.w	r3, #40	; 0x28
    6334:	d10d      	bne.n	6352 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    6336:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    633a:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    633c:	b10b      	cbz	r3, 6342 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    633e:	f7ff ffa5 	bl	628c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6342:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    6346:	f023 0314 	bic.w	r3, r3, #20
    634a:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    634e:	f7fe fbbd 	bl	4acc <ready_thread>
	__asm__ volatile(
    6352:	f384 8811 	msr	BASEPRI, r4
    6356:	f3bf 8f6f 	isb	sy
}
    635a:	bd10      	pop	{r4, pc}

0000635c <add_to_waitq_locked>:
{
    635c:	b538      	push	{r3, r4, r5, lr}
    635e:	4604      	mov	r4, r0
    6360:	460d      	mov	r5, r1
	unready_thread(thread);
    6362:	f7fe fc07 	bl	4b74 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    6366:	7b63      	ldrb	r3, [r4, #13]
    6368:	f043 0302 	orr.w	r3, r3, #2
    636c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    636e:	b195      	cbz	r5, 6396 <add_to_waitq_locked+0x3a>
    6370:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    6372:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6374:	429d      	cmp	r5, r3
    6376:	d015      	beq.n	63a4 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6378:	b1a3      	cbz	r3, 63a4 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    637a:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    637e:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    6382:	4291      	cmp	r1, r2
    6384:	d008      	beq.n	6398 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    6386:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    6388:	2a00      	cmp	r2, #0
    638a:	dd05      	ble.n	6398 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    638c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    638e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6392:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6394:	605c      	str	r4, [r3, #4]
}
    6396:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    6398:	686a      	ldr	r2, [r5, #4]
    639a:	4293      	cmp	r3, r2
    639c:	d002      	beq.n	63a4 <add_to_waitq_locked+0x48>
    639e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    63a0:	2b00      	cmp	r3, #0
    63a2:	d1ec      	bne.n	637e <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    63a4:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    63a6:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    63aa:	601c      	str	r4, [r3, #0]
	list->tail = node;
    63ac:	606c      	str	r4, [r5, #4]
}
    63ae:	e7f2      	b.n	6396 <add_to_waitq_locked+0x3a>

000063b0 <z_unpend1_no_timeout>:
{
    63b0:	b510      	push	{r4, lr}
	__asm__ volatile(
    63b2:	f04f 0320 	mov.w	r3, #32
    63b6:	f3ef 8411 	mrs	r4, BASEPRI
    63ba:	f383 8812 	msr	BASEPRI_MAX, r3
    63be:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    63c2:	f7ff ff93 	bl	62ec <z_priq_dumb_best>
		if (thread != NULL) {
    63c6:	4601      	mov	r1, r0
    63c8:	b108      	cbz	r0, 63ce <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    63ca:	f7ff ff5f 	bl	628c <unpend_thread_no_timeout>
	__asm__ volatile(
    63ce:	f384 8811 	msr	BASEPRI, r4
    63d2:	f3bf 8f6f 	isb	sy
}
    63d6:	4608      	mov	r0, r1
    63d8:	bd10      	pop	{r4, pc}

000063da <z_unpend_first_thread>:
{
    63da:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    63dc:	f04f 0320 	mov.w	r3, #32
    63e0:	f3ef 8511 	mrs	r5, BASEPRI
    63e4:	f383 8812 	msr	BASEPRI_MAX, r3
    63e8:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    63ec:	f7ff ff7e 	bl	62ec <z_priq_dumb_best>
		if (thread != NULL) {
    63f0:	4604      	mov	r4, r0
    63f2:	b120      	cbz	r0, 63fe <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    63f4:	f7ff ff4a 	bl	628c <unpend_thread_no_timeout>
    63f8:	3018      	adds	r0, #24
    63fa:	f000 f806 	bl	640a <z_abort_timeout>
	__asm__ volatile(
    63fe:	f385 8811 	msr	BASEPRI, r5
    6402:	f3bf 8f6f 	isb	sy
}
    6406:	4620      	mov	r0, r4
    6408:	bd38      	pop	{r3, r4, r5, pc}

0000640a <z_abort_timeout>:
{
    640a:	b510      	push	{r4, lr}
	__asm__ volatile(
    640c:	f04f 0220 	mov.w	r2, #32
    6410:	f3ef 8411 	mrs	r4, BASEPRI
    6414:	f382 8812 	msr	BASEPRI_MAX, r2
    6418:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    641c:	6803      	ldr	r3, [r0, #0]
    641e:	b13b      	cbz	r3, 6430 <z_abort_timeout+0x26>
			remove_timeout(to);
    6420:	f7fe fde0 	bl	4fe4 <remove_timeout>
			ret = 0;
    6424:	2000      	movs	r0, #0
	__asm__ volatile(
    6426:	f384 8811 	msr	BASEPRI, r4
    642a:	f3bf 8f6f 	isb	sy
}
    642e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    6430:	f06f 0015 	mvn.w	r0, #21
    6434:	e7f7      	b.n	6426 <z_abort_timeout+0x1c>

00006436 <z_get_next_timeout_expiry>:
{
    6436:	b510      	push	{r4, lr}
	__asm__ volatile(
    6438:	f04f 0320 	mov.w	r3, #32
    643c:	f3ef 8411 	mrs	r4, BASEPRI
    6440:	f383 8812 	msr	BASEPRI_MAX, r3
    6444:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    6448:	f7fe fda6 	bl	4f98 <next_timeout>
	__asm__ volatile(
    644c:	f384 8811 	msr	BASEPRI, r4
    6450:	f3bf 8f6f 	isb	sy
}
    6454:	bd10      	pop	{r4, pc}

00006456 <z_set_timeout_expiry>:
{
    6456:	b570      	push	{r4, r5, r6, lr}
    6458:	4604      	mov	r4, r0
    645a:	460d      	mov	r5, r1
	__asm__ volatile(
    645c:	f04f 0320 	mov.w	r3, #32
    6460:	f3ef 8611 	mrs	r6, BASEPRI
    6464:	f383 8812 	msr	BASEPRI_MAX, r3
    6468:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    646c:	f7fe fd94 	bl	4f98 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    6470:	2801      	cmp	r0, #1
    6472:	dd05      	ble.n	6480 <z_set_timeout_expiry+0x2a>
    6474:	42a0      	cmp	r0, r4
    6476:	db03      	blt.n	6480 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    6478:	4629      	mov	r1, r5
    647a:	4620      	mov	r0, r4
    647c:	f7fd f90c 	bl	3698 <sys_clock_set_timeout>
	__asm__ volatile(
    6480:	f386 8811 	msr	BASEPRI, r6
    6484:	f3bf 8f6f 	isb	sy
}
    6488:	bd70      	pop	{r4, r5, r6, pc}

0000648a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    648a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    648c:	f7fe fe9a 	bl	51c4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    6490:	bd08      	pop	{r3, pc}

00006492 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    6492:	b108      	cbz	r0, 6498 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    6494:	f7fc ba52 	b.w	293c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    6498:	4770      	bx	lr

0000649a <k_timer_init>:
	timer->status = 0U;
    649a:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    649c:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    64a0:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    64a4:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    64a8:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    64ac:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    64ae:	6343      	str	r3, [r0, #52]	; 0x34
}
    64b0:	4770      	bx	lr

000064b2 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    64b2:	b510      	push	{r4, lr}
    64b4:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    64b6:	f7ff ffa8 	bl	640a <z_abort_timeout>

	if (inactive) {
    64ba:	b9b0      	cbnz	r0, 64ea <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    64bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    64be:	b10b      	cbz	r3, 64c4 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    64c0:	4620      	mov	r0, r4
    64c2:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    64c4:	f104 0018 	add.w	r0, r4, #24
    64c8:	f7ff ff72 	bl	63b0 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    64cc:	b168      	cbz	r0, 64ea <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    64ce:	f7ff ff13 	bl	62f8 <z_ready_thread>
	__asm__ volatile(
    64d2:	f04f 0320 	mov.w	r3, #32
    64d6:	f3ef 8011 	mrs	r0, BASEPRI
    64da:	f383 8812 	msr	BASEPRI_MAX, r3
    64de:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    64e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    64e6:	f7ff beeb 	b.w	62c0 <z_reschedule_irqlock>
    64ea:	bd10      	pop	{r4, pc}

000064ec <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    64ec:	4770      	bx	lr
	...

000064f0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    64f0:	f7fd b95e 	b.w	37b0 <SystemInit>
